-- Selector Mod
-- By: Altamurenza

--[[
	The biggest script ever in Bully Mod history, it's not fully source code because i had to cut out
	some menu table to make it smaller than 512kb (674kb in original source).
	
	Credits:
	- DaBOSS54320 / Derpy54320 for his No Clip, Free Camera, Local Multiplayer, Node-o-Matic 3000 and many more.
	- deadpoolXYZ for his flag id.
]]

-------------------------------------SM_Activator---------------------------------------

Version = get_timer()
size = table.getn
useTarget = true
useTargetSetting = 1
timeFreeze = 0
noPunishment = 0
inAmmo = 0
valueHealth = 100
propCreate = 0
damageWeapon = 0
inHealth = 0
inMoney = 0
volAudio = 1
valueSpeed = 100
unhideMenu = 0
alonePlayer = 0
playerPoint = 0
playerAlly = 1
gravityPlayer = 0
classTime = 0
classGrade = 1
invPlayer = 0
initTime = 0
mapCo = 0
useOutfit = 0
createPed = 0
createPlayer = 0
cght = 0
controlID = 0
posa,posx,posy,posz = 999,999,999,999
siren = 0
siren2 = 0
siren3 = 0
inTickets = 0
saveModel = "player"
saveStyle = "Player"
autoShot = 0
rapidGun = 0
rapidPunch = 0
RepeatMain = 0
clothSelector = 0
eagleEye = 0
farVision = 0
nearPlayer = 0
blind = 0
burn1,burn2 = 0,0
playerGameSpeedEffect = 0
addSelect = 1
vgSelect = 1
hjSelect = 1
opSelect = 1
ghSelect = 1
vdSelect = 1
bnSelect = 1
asSelect = 1
uiSelect = 1
vwSelect = 1
rtSelect = 1
ewSelect = 1
gySelect = 1
zSelect = 1
zaSelect = 1
cgSelect = 1
xSelect = 1
kSelect = 1
cSelect = 1
modelSelect = 1
pedSelect = 1
fgSelect = 2
xfSelect = 1
xsSelect = 1
styleSelect = 1
frtSelect = 1
cbSelect = 1
cvSelect = 1
cvbSelect = 1
cwSelect = 1
modeSelect = 1
cwrSelect = 1 -- Outfit Selector select
cvtSelect = 1 -- Vehicle Selector select
frSelect = 1 -- Hair Selector select
speechSelect = 1 -- Speech Select
gameSpeed = 100 -- Game Speed
pedGrab = 1 -- Ped Grab select
vGrab = 1 -- Vehicle Grab (unused)
fors = 1 -- Special Select
vsrt = 1 -- Vehicle Thief
pedGetGrabed = {} -- unused
cl = 1 -- Class Editor select
myTimerSet = true -- Toggle custom timer
mcts = 100 -- Math Class Timer
bcts = 100 -- Biology Class Timer
ects = 100 -- English Class Timer
gcts = 100 -- Geography Class Timer
acpss = 0.5 -- Art Class Player Speed
acmes = 0.3 -- Art Class Enemies Speed
ecacs = false -- unused
bcacs = false -- unused
gcacs = false -- unused
mcacs = false -- unused
artClass = 1 -- Art Class Toggle
otherClass = 1 -- Another Class toggle
aets = 20 -- Art Enemies Timer
aeds = 25 -- Art Enemies Debris Count
acrs = 5 -- Art Class Radius
pun = 1 -- Punishment Selector select
mapp = 300 -- Max Punishment Points
mipp = 0 -- Minimum Punishment Points
maxPoints = 0 -- Max Points
minPoints = 0 -- Min Points
cut = 1 -- Cutscene Selector select
it = 1 -- Item Selector select
allowArtSetting = 0 -- unused
pe = 1 -- Ped Editor
stses = 1 -- "strafe selection" select
kissAllGirls = false -- Toggle Kiss All Girls
kissAllBoys = false -- Toggle Kiss All Boys
pedRun = false -- Tonggle Ped Run
pedDFB = false -- Toggle Ped Dont Fight Back
pedAEO = false -- Toggle Ped Attack Each Other
fs = 1 -- Fighting System select
shutUp = false -- Tonggle Ped Voice
st = 1 -- Strafe Selector select
sq = 1 --  unused
button1 = 0 -- unused
fpsCam = 0 -- unused
tps = 0 -- unused
freeCam = false -- Toggle Free camera
sprintPressed = 0 -- Sprint detection
lastSprint = GetTimer()
lastRun = GetTimer()
sprintPressed1 = 0 -- Sprint detection
lastSprint1 = GetTimer()
lastRun1 = GetTimer()
fas = 1 -- faction selector select
ss = 1 -- Strafe Selector?
ms = 1 -- Movement Style select 
playerControl = false -- Toggle Always Control Player
strafe = {} -- Animation storage
strafeAnim = {} -- Animation storafe (for anim detection)
slb = 1 -- Strafe select
pcs = 1 -- Pickup Selector select
table.insert(strafe,{anim = "nil",act = "nil",button = nil}) -- Don't let strafe empty
table.insert(strafeAnim,{anim = "nil",act = "nil",playing = "nil",mode = "nil",button = "nil"}) -- Don't let strafe empty
grabAnim,grabAct = "nil","nil" -- Grab animation
mountAnim,mountAct = "nil","nil" -- Mount animation
bugSelect = 1 -- Bug detection select
GameSpeed = false -- Toggle Game Speed
myRespect = true -- NOTE: DON'T CHANGE THIS VARIABLE
fightingSystem = true -- NOTE: DON'T EDIT THIS
savedStrafe = true -- NOTE: DON'T CHANGE THIS VARIABLE
FixBugs = true -- NOTE: DON'T CHANGE THIS VARIABLE
ActiveScripts = true -- NOTE: DON'T CHANGE THIS VARIABLE
ActiveScripts2 = true -- NOTE: DON'T CHANGE THIS VARIABLE
getMovements = true -- NOTE: DON'T CHANGE THIS VARIABLE
moving = false -- Movement moving detection
moving2 = false
moving3 = false
strafingStyle = false
strafing = false -- Movement strafing detection
showText = false -- Navigate control text
MainMenuType = "NEW_MENU" -- Main Menu style (SCROLL_5,SCROLL_3,STANDARD,BASIC_BIG_SIZE,BASIC_SMALL_SIZE)
movement = "DEFAULT"
movement2 = "DEFAULT"
movement3 = "DEFAULT"
msc = 1
menu = 1
hidingMenu = "AUTO" -- MANUAL or AUTO
AutoShowingTextAfterExitingSubMenu = false
hideMenu = 1
ssms = 1
ibbp = IsButtonBeingPressed
ibbr = IsButtonBeingReleased
replaceFightingStyle = true
replaceStyle = {}
sels = 1
createdPed = {}
ReplaceFactionModel = true
DetectFaction = {}
FactionModel = {}
ReplacedModel = true
modelInsert = {}
--TextTimer = 3
NerdID = {3,4,5,6,7,8,9,10,11}
BulliesID = {75,85,99,102,145,146,147}
JocksID = {12,13,14,15,16,17,18,19,20}
PrepiesID = {30,31,32,33,34,35,36,37,38,40}
GreasersID = {21,22,23,24,25,26,27,28,29}
DropoutID = {41,42,43,44,45,46,47,48,91,2}
table.insert(DetectFaction,{faction = nil})
table.insert(FactionModel,{"nil","nil","nil","nil","nil","nil","nil","nil","nil","nil"})
table.insert(replaceStyle,{faction = "nil",style = "nil"})
vrst = 1
sivs = 1
br = IsButtonBeingReleased
bp = IsButtonBeingPressed
bb = IsButtonPressed
betak = {}
table.insert(betak,{v = "nil"})
nearPlayerEffect = {}
nearPlayerPed = {}
NearPlayer = false
StrafeButton = {}
effect = {}
clear = false
waitSSpud = GetTimer()
waitSpud = GetTimer()
waitB = GetTimer()
waitPunch = GetTimer()
untilStrafe = false
waitArea = GetTimer()
timerArea = 0
restoreArea = false
nextCombo = true
cWait = GetTimer()
speedMult = 1
gPlayerAllies = {
  "fPlayer2",
  "fPlayer3",
  "fPlayer4",
  "fPlayer5",
  "fPlayer6",
  "fPlayer7",
  "fPlayer8",
  "fPlayer9",
  "fPlayer10",
  "fPlayer11",
}
t = 2
cp,ch = 0,PedGetHeading(gPlayer)
speedMult = 1
cpF,chF = 0,PedGetHeading(gPlayer)
distF = 0
fcF = false
ixF,iyF,izF = nil,nil,nil
cpT,chT = 0,PedGetHeading(gPlayer)
distT = 140
fcT = false
ixT,iyT,izT = nil,nil,nil
fix_model_option = 6
use_fix_model = 5
use_fc_cut = false
skip_cut = false
cut_stop = false
custome_cuts = false
edit_xml = false
spa,spx,spy,spz = 0,0,0,0
cen = 1
ces = 1
cec = 1
ceo = 1
load_cutscene = "GENERAL"
cuts_action = "GENERAL"
cuts_audio = "GENERAL"
cuts_edit = true
wait_sling = GetTimer()
ped_cr = {}
treat_ped = true
ped_mix = {}
use_ped_mix = true
cls = 1
until_move = false
pg = 1
pt = 1
ped_strafes = {}
in_other_task = false
sc = 1
cwt = 1

----------------------------------------SM_MENU-----------------------------------------

function S_SetupCore()
  adds = {
	"1.Control Ped",
	"2.Local Multiplayer",
	"3.Node-o-Matic",
	"4.Coord Finder",
	"5.Recruit Ally",
	"6.Delete Ped",
	"7.Save Position",
	"8.Area Doors",
	"9.Weapon ID",
	"10.Collectibles",
	"11.Rapid Fire Guns",
	"12.Rapid Punchs",
	"13.Camera Style",
	"14.Camera Effect",
	"15.Game Speed",
	"16.Ped Finder",
	"17.Dismiss Ally",
	"18.Class Editor",
	"19.Ped Editor",
	"20.Faction Editor",
	"21.Vehicle Thief",
	"22.Free Moves",
	"23.Cutscene Editor",
	"24.Fight Maker",
	"25.Ped Duplicator",
	"SKIP MISSION",
  }
  vgs = {
    "1.Create Player",
	"2.Model Selector",
	"3.Walking Style",
	"4.Vehicle Selector",
  }
  hjs = {
    --"1.FPS",
	--"2.Panoramic",
    "1.Eagle Eye (2D)",
	"2.Far Vision",
	"3.Widescreen",
	"4.Free Camera",
	--"5.FPS [BETA]",
	--"6.TPS Views",
  }
  ssm = {
    "Fighting Style",
	"Movement Style",
  }
  to = {
    "1.Player",
	"2.Target",
	"3.All Peds",
  }
  iz  = {
    "1.Select Punishment",
	"2.Min Punishment",
	"3.Max Punishment",
  }
  ops = {
    "1.Blinded",
	"2.Burn With Colour",
	"3.Burn Effect",
  }
  ghs = {
    {0					,"1.Gnome"},
	{1					,"2.Radio"},
	{2					,"3.Rubber"},
	{3					,"4.G & G"},
	{4					,"5.Pumpkin"},
	{5					,"6.Grave Stone"},
  }
  vds = {
    "1.Start",
	"2.Spawn",
	"3.Set Completed",
  }
  ass = {
    "1.Special Prop",
	"2.Normal Prop",
  }
  uis = {
    "1.Create",
	"2.Remove",
  }
  vws = {
    "1.Spawn",
	"2.Remove",
  }
  rts = {
    "1.Spawn/Remove",
	"2.Collect All",
  }
  ews = {
    {-1					,"1.Never Spawn"},
	{1					,"2.Normal"},
	{2					,"3.Have a duplicate"},
  }
  gys = {
    {"ToiletExplode"					,"1.Toilet Exploded"},
	{"GraffitiGone"					,"2.Poof"},
	{"SnowPoof"					,"3.Poof 2"},
	{"CeilingDust"					,"4.Ceiling Dust"},
	{"RaceBeam"					,"5.Light"},
    {"BoilerSteam"					,"6.Boiler Steam"},
	{"MudImpact"					,"7.Mud Impact"},
	{"ShowerSteam2"					,"8.Shower Steam"},
	{"FireSprinkler"					,"9.Mini Fire"},
	{"SteamRoom"					,"10.Steam Room"},
    {"SmokeStackLRG"					,"11.Smoke Stack"},
	{"SmokeStackBLK"					,"12.Smoke Stack Black"},
	{"GymLightSmash"					,"13.Light Smash"},
	{"GymFire"					,"14.Gym Fire"},
	{"BigExplosion"					,"15.Explosion"},
    {"BarrelFire"					,"16.Fire Barrel"},
	{"SteamSlow"					,"17.Steam Slow"},
	{"GlassLRGshards"					,"18.Glass Shards"},
	{"ElectricalSpark01"					,"19.Spark"},
	{"BottleRocketExplosion"					,"20.Mini Explosion"},
	{"LiteBulbPop"					,"21.Poop"},
    {"Chem_Bubbles"					,"22.Bubbles"},
	{"TorchImpact"					,"23.Torch Impact"},
	{"FireworksWinner"					,"24.Fireworks"},
	{"SGTargetHit"					,"25.TargetHit"},
	{"BuntzenFlame3"					,"26.Flame"},
  }
  zs = {
    {1					,"1.Fogy"},
	{2					,"2.Rainy"},
	{3					,"3.Cloudy"},
	{4					,"4.Normal"},
	{5					,"5.Hurricane"},
	{0					,"CUSTOM"},
  }
  zas = {
    {0					,"Art"},
	{1					,"Chemistry"},
	{2					,"English"},
	{3					,"Math"},
	{4					,"Biology"},
    {5					,"Geography"},
	{6					,"Gym"},
	{7					,"Photography"},
	{8					,"Shop"},
	{9					,"Music"},
  }
  cgs = {
	{2			,-628.4 ,-312.5 ,-0.0	 	,"School"},
	{14			,-496.6 ,310.6 ,31.3	 	,"Boys HQ"},
	{59			,-749.4 ,352.2 ,3.5	 	,"Jocks HQ"},
	{60			,-774.3 ,355.2 ,6.4	 	,"Preps HQ"},
	{30			,-726.0 ,34.2 ,-2.3	 	,"Nerds HQ"},
	{61			,-694.6 ,346.4 ,3.2	 	,"Greasers HQ"},
	{57			,-656.8 ,248.8 ,15.2	 	,"Townies HQ"},
	{0			,521.8 ,-89.4 ,3.7	 	,"Bullworth Town"},
	{0			,498.2 ,-239.6 ,1.9	 	,"New Conventry"},
	{0			,370.1 ,413.2 ,21.0	 	,"Bullworth Vale"},
	{0			,323.7 ,-436.9 ,3.1	 	,"Blue Skies"},
	{38			,-735.1 ,468.8 ,1.9	 	,"Asylum"},
	{8			,-756.9 ,-56.2 ,9.3	 	,"Basement"},
	{0			,188.2 ,438.3 ,5.3	 	,"Carnival"},
	{55			,-469.4 ,-71.4 ,9.7	 	,"Freakshow"},
	{27			,-712.3 ,376.9 ,295.0	 	,"Boxing Ring"},
	{0			,272.4 ,300.9 ,1.2	 	,"Beach"},
	{29			,-785.6 ,379.7 ,0.0	 	,"Bike Store"},
	{50			,-792.6 ,47.9 ,6.6	 	,"Carnival Store"},
	{55			,-469.2 ,-76.8 ,9.0	 	,"Freak Show"},
	{42			,-381.9 ,483.4 ,1.5	 	,"GoKart Race"},
	{32			,-565.4 ,133.2 ,46.1	 	,"Harrington House"},
	{0			,-27.9 ,-73.7 ,1.0	 	,"School Field"},
	{13			,-619.0 ,-59.5 ,59.6	 	,"Gym"},
	{13			,-676.0 ,-58.6 ,55.4	 	,"Pool"},
	{0			,186.5 ,-3.0 ,5.4	 	,"Parking"},
	{0			,164.1 ,-73.8 ,14.8	 	,"School Mini Rooftop"},
	{9			,-773.6 ,203.0 ,90.1	 	,"Library"},
	{0			,135.5 ,-131.7 ,6.8	 	,"Harrington Yard"},
	{0			,271.0 ,-72.9 ,5.9	 	,"Bullworth Academy"},
	{27			,-732.2 ,378.4 ,298.0	 	,"Boxing Club"},
	{26			,-573.3 ,388.5 ,0.0	 	,"Yum Yum Market"},
	{0			,443.5 ,505.9 ,22.9	 	,"Tad House"},
	{0			,438.5 ,389.2 ,17.2	 	,"Bullworth Park"},
	{0			,536.0 ,374.3 ,17.1	 	,"Mini Asylum"},
	{0			,634.2 ,161.4 ,19.9	 	,"Grave Yard"},
	{0			,647.7 ,83.4 ,8.5	 	,"Dike"},
	{34			,-646.7 ,261.5 ,0.9	 	,"Clothing Store 1"},
	{30			,-726.1 ,14.0 ,-0.0	 	,"Dragon's Wing comic"},
	{56			,-667.2 ,387.4 ,2.4	 	,"Clothing Store 2"},
	{62			,-749.2 ,637.1 ,30.9	 	,"BMX Park"},
	{0			,-57.0 ,-312.1 ,4.3	 	,"Asylum Outside"},
	{0			,73.6 ,-542.8 ,2.7	 	,"Near HEM-O Building"},
	{0			,53.7 ,-582.3 ,32.4	 	,"Outside Chem Plant"},
	{0			,-4.4 ,-214.0 ,1.0	 	,"Near Observatory"},
	{5			,-706.0 ,200.9 ,31.5	 	,"Principal's Office"},
	{40			,-696.5 ,74.9 ,20.2	 	,"Observatory"},
	{19			,-769.2 ,311.1 ,77.2	 	,"Nutcrackin' Room"},
	{15			,-557.2 ,317.1 ,-1.9	 	,"Multiple Class Room"},
	{6			,-702.8 ,312.3 ,33.3	 	,"Biology Room"},
	{20			,-771.6 ,77.3 ,6.4	 	,"Inside HEM-O Building"},
	{43			,-736.5 ,-624.6 ,3.2	 	,"Junk Yard"},
	{51			,-5.6 ,66.2 ,27.1	 	,"Arcade Track 1"},
	{52			,46.6 ,-23.7 ,0.9	 	,"Arcade Track 2"},
	{53			,0.8 ,60.1 ,62.6	 	,"Arcade Track 3"},
  }
  xs = {
    {1					,"Chapter 1"},
	{2					,"Chapter 2"},
	{3					,"Chapter 3"},
	{4					,"Chapter 4"},
	{5					,"Chapter 5"},
	{6					,"Chapter 6"}
  }
  ks = {
    {1,"1.Nerds"},
	{2,"2.Jocks"},
	{3,"3.Drop Out"},
	{4,"4.Greasers"},
	{5,"5.Prepies"},
	{11,"6.Bullies"},
	{6,"7.Students"},
    {0,"8.Prefects"},
	{7,"9.Police"},
	{8,"10.Teachers"},
	{9,"11.Adults"},
	{10,"12.Shop keeper"}
  }
  cs = {
    {name = "Fists",model = -1},
    {name = "Apple",model = 310},
    {name = "Banana",model = 358},
    {name = "Baseball",model = 302},
    {name = "Basket Ball",model = 381},
    {name = "Bat",model = 300},
    {name = "Big Firework",model = 397},
    {name = "Books 1",model = 405},
    {name = "Books 2",model = 413},
    {name = "Books 3",model = 414},
    {name = "Books 4",model = 415},
    {name = "Books 5",model = 416},
    {name = "Brick",model = 311},
    {name = "Broom",model = 377},
	{name = "Camera",model = 328},
    {name = "Digital Camera",model = 426},
    {name = "Dead Rat",model = 346},
    {name = "Devil Fork",model = 409},
    {name = "Dish",model = 338},
    {name = "Egg",model = 312},
    {name = "Fire Extinguisher",model = 326},
    {name = "Fire cracker",model = 301},
    {name = "Football",model = 331},
    {name = "Football (Bomb)",model = 400},
    {name = "Frisbee",model = 335},
    {name = "Gold Pipe",model = 418},
    {name = "Itchy Powder",model = 394},
    {name = "Kick Me",model = 372},
    {name = "Marbles",model = 349},
    {name = "News Roll",model = 320},
    {name = "Pinky Wand",model = 410},
    {name = "Plate",model = 355},
    {name = "Poison Gun",model = 395},
    {name = "Rocket Launcher",model = 307},
    {name = "Rubber Band",model = 325},
    {name = "Shield",model = 387},
    {name = "Metal Plate",model = 360},
    {name = "Skateboard",model = 437},
    {name = "Sledge Hammer",model = 324},
    {name = "Slingshot",model = 303},
    {name = "Snowball",model = 313},
    {name = "Snowball 2",model = 330},
    {name = "Soccer Ball",model = 329},
    {name = "Spray Can",model = 321},
    {name = "Spud Gun",model = 305},
    {name = "Stink Bomb",model = 309},
    {name = "Super Slingshot",model = 306},
    {name = "Super Spud Gun",model = 396},
    {name = "Trash Lid",model = 315},
    {name = "Umbrella",model = 404},
    {name = "Vase 1",model = 354},
    {name = "Vase 2",model = 353},
    {name = "Vase 3",model = 345},
    {name = "Water Baloon",model = 383},
    {name = "Water Pipe",model = 342},
    {name = "Whip",model = 411},
    {name = "Wood Paddle",model = 357},
    {name = "Wood Plank",model = 323},
    {name = "Yardstick",model = 299},
	{name = "Flashlight",model = 420},
	{name = "Tissue Roll",model = 403},
	{name = "Water Pipe 2",model = 402},
	{name = "Water Pipe 3",model = 401},
	{name = "Poo Bag",model = 399},
  }
  models = {
	{model = "player"					,name = "Jimmy"				,style = "Player"},
	{model = "DOgirl_Zoe_EG"			,name = "Zoe"				,style = "GS_Female_A"},
	{model = "NDGirl_Beatrice"			,name = "Beatrice"			,style = "GS_Female_A"},
	{model = "NDH1a_Algernon"			,name = "Algernon"			,style = "N_Striker_B"},
	{model = "NDH1_Fatty"				,name = "Fatty"				,style = "N_Striker_A"},
	{model = "ND2nd_Melvin"				,name = "Melvin"			,style = "N_Striker_A"},
	{model = "NDH2_Thad"				,name = "Thad"				,style = "N_Ranged_A"},
	{model = "NDH3_Bucky"				,name = "Bucky"				,style = "N_Ranged_A"},
	{model = "NDH2a_Cornelius"			,name = "Cornelius"			,style = "N_Ranged_A"},
	{model = "NDLead_Earnest"			,name = "Earnest"			,style = "N_Ranged_A"},
	{model = "NDH3a_Donald"				,name = "Donald"			,style = "N_Ranged_A"},
	{model = "JKH1_Damon"				,name = "Damon"				,style = "J_Striker_A"},
	{model = "JKH1a_Kirby"				,name = "Kirby"				,style = "J_Striker_A"},
	{model = "JKGirl_Mandy"				,name = "Mandy"				,style = "GS_Female_A"},
	{model = "JKH2_Dan"					,name = "Dan"				,style = "J_Striker_A"},
	{model = "JKH2a_Luis"				,name = "Luis"				,style = "J_Grappler_A"},
	{model = "JKH3_Casey"				,name = "Casey"				,style = "J_Melee_A"},
	{model = "JKH3a_Bo"					,name = "Bo"				,style = "J_Melee_A"},
	{model = "JKlead_Ted"				,name = "Ted"				,style = "J_Striker_A"},
	{model = "JK2nd_Juri"				,name = "Juri"				,style = "J_Grappler_A"},
	{model = "GR2nd_Peanut"				,name = "Peanut"			,style = "G_Striker_A"},
	{model = "GRH2A_Hal"				,name = "Hal"				,style = "G_Grappler_A"},
	{model = "GRlead_Johnny"			,name = "Johnny"			,style = "G_Striker_A"},
	{model = "GRH1_Lefty"				,name = "Lefty"				,style = "G_Melee_A"},
	{model = "GRGirl_Lola"				,name = "Lola"				,style = "GS_Female_A"},
	{model = "GRH3_Lucky"				,name = "Lucky"				,style = "G_Striker_A"},
	{model = "GRH1a_Vance"				,name = "Vance"				,style = "G_Melee_A"},
	{model = "GRH3a_Ricky"				,name = "Ricky"				,style = "G_Striker_A"},
	{model = "GRH2_Norton"				,name = "Norton"			,style = "G_Grappler_A"},
	{model = "PRH1_Gord"				,name = "Gord"				,style = "P_Striker_A"},
	{model = "PRH1a_Tad"				,name = "Tad"				,style = "P_Striker_A"},
	{model = "PRH2a_Chad"				,name = "Chad"				,style = "P_Grappler_A"},
	{model = "PR2nd_Bif"				,name = "Bif"				,style = "P_Striker_A"},
	{model = "PRH3_Justin"				,name = "Justin"			,style = "P_Striker_B"},
	{model = "PRH2_Bryce"				,name = "Bryce"				,style = "P_Grappler_A"},
	{model = "PRH2_Bryce_OBOX"			,name = "Bryce"				,style = "P_Striker_A"},
	{model = "PRlead_Darby"				,name = "Darby"				,style = "P_Striker_A"},
	{model = "PRGirl_Pinky"				,name = "Pinky"				,style = "GS_Female_A"},
	{model = "GN_Asiangirl"				,name = "Angie"				,style = "GS_Female_A"},
	{model = "PRH3a_Parker"				,name = "Parker"			,style = "P_Striker_B"},
	{model = "DOH2_Jerry"				,name = "Jerry"				,style = "DO_Grappler_A"},
	{model = "DOH1a_Otto"				,name = "Otto"				,style = "DO_Striker_A"},
	{model = "DOH2a_Leon"				,name = "Leon"				,style = "DO_Striker_A"},
	{model = "DOH1_Duncan"				,name = "Duncan"			,style = "DO_Striker_A"},
	{model = "DOH3_Henry"				,name = "Henry"				,style = "DO_Grappler_A"},
	{model = "DOH3a_Gurney"				,name = "Gurney"			,style = "DO_Grappler_A"},
	{model = "DO2nd_Omar"				,name = "Omar"				,style = "DO_Striker_A"},
	{model = "DOGirl_Zoe"				,name = "Zoe"				,style = "GS_Female_A"},
	{model = "PF2nd_Max"				,name = "Max"				,style = "Authority"},
	{model = "PFH1_Seth"				,name = "Seth"				,style = "Authority"},
	{model = "PFH2_Edward"				,name = "Edward"			,style = "Authority"},
	{model = "PFlead_Karl"				,name = "Karl"				,style = "Authority"},
	{model = "TO_Orderly"				,name = "Theo"				,style = "LE_Orderly_A"},
	{model = "TE_HallMonitor"			,name = "MissPeabody"		,style = "TE_Female_A"},
	{model = "TE_GymTeacher"			,name = "MrBurton"			,style = "Authority"},
	{model = "TE_Janitor"				,name = "MrLuntz"			,style = "CV_Male_A"},
	{model = "TE_English"				,name = "MrGalloway"		,style = "Authority"},
	{model = "TE_Cafeteria"				,name = "Edna"				,style = "Authority"},
	{model = "TE_Secretary"				,name = "MissWinston"		,style = "TE_Female_A"},
	{model = "TE_Nurse"					,name = "MrsMcRae"			,style = "TE_Female_A"},
	{model = "TE_MathTeacher"			,name = "MrHuntingdon"		,style = "Authority"},
	{model = "TE_Librarian"				,name = "MrsCarvin"			,style = "TE_Female_A"},
	{model = "TE_Art"					,name = "MsPhillips"		,style = "TE_Female_A"},
	{model = "TE_Biology"				,name = "MrSlawter"			,style = "Authority"},
	{model = "TE_Principal"				,name = "DrCrabblesnitch"	,style = "Authority"},
	{model = "GN_Littleblkboy"			,name = "Sheldon"			,style = "GS_Male_A"},
	{model = "GN_SexyGirl"				,name = "Christy"			,style = "GS_Female_A"},
	{model = "GN_Littleblkgirl"			,name = "Gloria"			,style = "GS_Female_A"},
	{model = "GN_Hispanicboy"			,name = "Pedro"				,style = "GS_Male_A"},
	{model = "GN_Greekboy"				,name = "Constantinos"		,style = "GS_Male_A"},
	{model = "GN_Fatboy"				,name = "Ray"				,style = "GS_Fat_A"},
	{model = "GN_Boy01"					,name = "Ivan"				,style = "GS_Male_A"},
	{model = "GN_Boy02"					,name = "Trevor"			,style = "GS_Male_A"},
	{model = "GN_Fatgirl"				,name = "Eunice"			,style = "GS_Fat_A"},
	{model = "DOlead_Russell"			,name = "Russell"			,style = "B_Striker_A"},
	{model = "TO_Business1"				,name = "DrBambillo"		,style = "CV_Male_A"},
	{model = "TO_Business2"				,name = "MrSullivan"		,style = "CV_Male_A"},
	{model = "TO_BusinessW1"			,name = "MsKopke"			,style = "CV_Female_A"},
	{model = "TO_BusinessW2"			,name = "MsRushinski"		,style = "CV_Female_A"},
	{model = "TO_RichW1"				,name = "MsIsaacs"			,style = "CV_Female_A"},
	{model = "TO_RichW2"				,name = "BethanyJones"		,style = "CV_Female_A"},
	{model = "TO_Fireman"				,name = "ORourke"			,style = "CV_Male_A"},
	{model = "TO_Cop"					,name = "OfficerMonson"		,style = "Authority"},
	{model = "TO_Comic"					,name = "ZackOwens"			,style = "CV_Male_A"},
	{model = "GN_Bully03"				,name = "Trent"				,style = "B_Striker_A"},
	{model = "TO_Bikeowner"				,name = "TobiasMason"		,style = "CV_Male_A"},
	{model = "TO_Hobo"					,name = "MrGrant"			,style = "CV_Male_A"},
	{model = "Player_Mascot"			,name = "Mascot"			,style = "J_Mascot"},
	{model = "TO_GroceryOwner"			,name = "MrOh"				,style = "CV_Male_A"},
	{model = "GN_Sexygirl_UW"			,name = "Christy"			,style = "GS_Female_A"},
	{model = "DOLead_Edgar"				,name = "Edgar"				,style = "DO_Striker_A"},
	{model = "JK_LuisWrestle"			,name = "Luis"				,style = "J_Grappler_A"},
	{model = "JKGirl_MandyUW"			,name = "Mandy"				,style = "GS_Female_A"},
	{model = "PRGirl_PinkyUW"			,name = "Pinky"				,style = "GS_Female_A"},
	{model = "NDGirl_BeatriceUW"		,name = "Beatrice"			,style = "GS_Female_A"},
	{model = "GRGirl_LolaUW"			,name = "Lola"				,style = "GS_Female_A"},
	{model = "TO_Cop2"					,name = "OfficerWilliams"	,style = "Authority"},
	{model = "Player_OWres"				,name = "Jimmy"				,style = "Player"},
	{model = "GN_Bully02"				,name = "Davis"				,style = "B_Striker_A"},
	{model = "TO_RichM1"				,name = "MrBreckindale"		,style = "CV_Male_A"},
	{model = "TO_RichM2"				,name = "MrDoolin"			,style = "CV_Male_A"},
	{model = "GN_Bully01"				,name = "Troy"				,style = "B_Striker_A"},
	{model = "TO_FireOwner"				,name = "Nate"				,style = "CV_Male_A"},
	{model = "TO_CSOwner_2"				,name = "MrCarmichael"		,style = "CV_Male_A"},
	{model = "TO_CSOwner_3"				,name = "NickyCharles"		,style = "CV_Male_A"},
	{model = "TE_Chemistry"				,name = "MrWatts"			,style = "Authority"},
	{model = "TO_Poorwoman"				,name = "MissAbby"			,style = "CV_OLD"},
	{model = "TO_MotelOwner"			,name = "Mihailovich"		,style = "CV_Male_A"},
	{model = "JKKirby_FB"				,name = "Kirby"				,style = "J_Striker_A"},
	{model = "JKTed_FB"					,name = "Ted"				,style = "J_Striker_A"},
	{model = "JKDan_FB"					,name = "Dan"				,style = "J_Striker_A"},
	{model = "JKDamon_FB"				,name = "Damon"				,style = "J_Striker_A"},
	{model = "TO_Carny02"				,name = "Freeley"			,style = "CV_Male_A"},
	{model = "TO_Carny01"				,name = "Dorsey"			,style = "CV_Male_A"},
	{model = "TO_CarnyMidget"			,name = "Hector"			,style = "CV_Male_A"},
	{model = "TO_Poorman2"				,name = "Osbourne"			,style = "CV_Male_A"},
	{model = "PRH2A_Chad_OBOX"			,name = "Chad"				,style = "P_Striker_A"},
	{model = "PRH3_Justin_OBOX"			,name = "Justin"			,style = "P_Striker_A"},
	{model = "PRH3a_Parker_OBOX"		,name = "Parker"			,style = "P_Striker_A"},
	{model = "TO_BarberRich"			,name = "MariaTheresa"		,style = "CV_Female_A"},
	{model = "GenericWrestler"			,name = "Bob"				,style = "GS_Male_A"},
	{model = "ND_FattyWrestle"			,name = "Fatty"				,style = "GS_Male_A"},
	{model = "TO_Industrial"			,name = "Chuck"				,style = "CV_Male_A"},
	{model = "TO_Associate"				,name = "Ian"				,style = "CV_Male_A"},
	{model = "TO_Asylumpatient"			,name = "Fenwick"			,style = "DO_Striker_A"},
	{model = "TE_Autoshop"				,name = "Neil"				,style = "Authority"},
	{model = "TO_Mailman"				,name = "MrSvenson"			,style = "CV_Male_A"},
	{model = "TO_Tattooist"				,name = "Denny"				,style = "CV_Male_A"},
	{model = "TE_Assylum"				,name = "MrGalloway"		,style = "Authority"},
	{model = "Nemesis_Gary"				,name = "Gary"				,style = "B_Striker_A"},
	{model = "TO_Oldman2"				,name = "Krakauer"			,style = "CV_OLD"},
	{model = "TO_BarberPoor"			,name = "MrMoratti"			,style = "CV_Male_A"},
	{model = "PR2nd_Bif_OBOX"			,name = "Bif"				,style = "P_Striker_A"},
	{model = "Peter"					,name = "Peter"				,style = "GS_Male_A"},
	{model = "TO_RichM3"				,name = "MrSmith"			,style = "CV_Male_A"},
	{model = "Rat_Ped"					,name = "Rat"				,style = "AN_Rat"},
	{model = "GN_LittleGirl_2"			,name = "Melody"			,style = "GS_Female_A"},
	{model = "GN_LittleGirl_3"			,name = "Karen"				,style = "GS_Female_A"},
	{model = "GN_WhiteBoy"				,name = "Gordon"			,style = "GS_Male_A"},
	{model = "TO_FMidget"				,name = "Brandy"			,style = "GS_Male_A"},
	{model = "Dog_Pitbull"				,name = "Pitbull"			,style = "AN_DOG"},
	{model = "GN_SkinnyBboy"			,name = "Lance"				,style = "GS_Male_A"},
	{model = "TO_Carnie_female"			,name = "Crystal"			,style = "CV_Female_A"},
	{model = "TO_Business3"				,name = "MrMartin"			,style = "CV_Male_A"},
	{model = "GN_Bully04"				,name = "Ethan"				,style = "B_Striker_A"},
	{model = "GN_Bully05"				,name = "Wade"				,style = "B_Striker_A"},
	{model = "GN_Bully06"				,name = "Tom"				,style = "B_Striker_A"},
	{model = "TO_Business4"				,name = "MrRamirez"			,style = "CV_Male_A"},
	{model = "TO_Business5"				,name = "MrHuntingdon"		,style = "CV_Male_A"},
	{model = "DO_Otto_asylum"			,name = "Otto"				,style = "DO_Striker_A"},
	{model = "TE_History"				,name = "MrWiggins"			,style = "Authority"},
	{model = "TO_Record"				,name = "Floyd"				,style = "CV_Male_A"},
	{model = "DO_Leon_Assylum"			,name = "Leon"				,style = "DO_Striker_A"},
	{model = "DO_Henry_Assylum"			,name = "Henry"				,style = "DO_Striker_A"},
	{model = "NDH1_FattyChocolate"		,name = "Fatty"				,style = "N_Striker_A"},
	{model = "TO_GroceryClerk"			,name = "Stan"				,style = "CV_Male_A"},
	{model = "TO_Handy"					,name = "Handy"				,style = "CV_OLD"},
	{model = "TO_Orderly2"				,name = "Gregory"			,style = "LE_Orderly_A"},
	{model = "GN_Hboy_Ween"				,name = "Pedro"				,style = "GS_Male_A"},
	{model = "Nemesis_Ween"				,name = "Gary"				,style = "B_Striker_A"},
	{model = "GRH3_Lucky_Ween"			,name = "Lucky"				,style = "G_Striker_A"},
	{model = "NDH3a_Donald_ween"		,name = "Donald"			,style = "N_Ranged_A"},
	{model = "PRH3a_Parker_Ween"		,name = "Parker"			,style = "P_Striker_B"},
	{model = "JKH3_Casey_Ween"			,name = "Casey"				,style = "J_Melee_A"},
	{model = "Peter_Ween"				,name = "Peter"				,style = "GS_Male_A"},
	{model = "GN_AsianGirl_Ween"		,name = "Angie"				,style = "GS_Female_A"},
	{model = "PRGirl_Pinky_Ween"		,name = "Pinky"				,style = "GS_Female_A"},
	{model = "JKH1_Damon_ween"			,name = "Damon"				,style = "J_Striker_A"},
	{model = "GN_WhiteBoy_Ween"			,name = "Gordon"			,style = "GS_Male_A"},
	{model = "GN_Bully01_Ween"			,name = "Ivan"				,style = "B_Striker_A"},
	{model = "GN_Boy02_Ween"			,name = "Trevor"			,style = "B_Striker_A"},
	{model = "PR2nd_Bif_OBOX_D1"		,name = "Bif"				,style = "P_Striker_A"},
	{model = "GRH1a_Vance_Ween"			,name = "Vance"				,style = "G_Melee_A"},
	{model = "NDH2_Thad_Ween"			,name = "Thad"				,style = "N_Ranged_A"},
	{model = "PRGirl_Pinky_BW"			,name = "Pinky"				,style = "GS_Female_A"},
	{model = "DOlead_Russell_BU"		,name = "Russell"			,style = "B_Striker_A"},
	{model = "PRH1a_Tad_BW"				,name = "Tad"				,style = "P_Striker_A"},
	{model = "PRH2_Bryce_BW"			,name = "Bryce"				,style = "P_Grappler_A"},
	{model = "PRH3_Justin_BW"			,name = "Justin"			,style = "P_Striker_B"},
	{model = "GN_Asiangirl_CH"			,name = "Angie"				,style = "GS_Female_A"},
	{model = "GN_Sexygirl_CH"			,name = "Christy"			,style = "GS_Female_A"},
	{model = "PRGirl_Pinky_CH"			,name = "Pinky"				,style = "GS_Female_A"},
	{model = "TO_NH_Res_01"				,name = "MrBuba"			,style = "CV_OLD"},
	{model = "TO_NH_Res_02"				,name = "MrGordon"			,style = "CV_OLD"},
	{model = "TO_NH_Res_03"				,name = "MrsLisburn"		,style = "CV_OLD"},
	{model = "NDH1_Fatty_DM"			,name = "Fatty"				,style = "N_Striker_A"},
	{model = "TO_PunkBarber"			,name = "Betty"				,style = "CV_Male_A"},
	{model = "FightingMidget_01"		,name = "Lightning"			,style = "P_Striker_A"},
	{model = "FightingMidget_02"		,name = "Zeke"				,style = "G_Striker_A"},
	{model = "TO_Skeletonman"			,name = "Alfred"			,style = "CV_Male_A"},
	{model = "TO_Beardedwoman"			,name = "Paris"				,style = "CV_Female_A"},
	{model = "TO_CarnieMermaid"			,name = "Courtney"			,style = "CV_Female_A"},
	{model = "TO_Siamesetwin2"			,name = "Delilah"			,style = "CV_Female_A"},
	{model = "TO_Paintedman"			,name = "Drew"				,style = "CV_Male_A"},
	{model = "TO_GN_Workman"			,name = "Castillo"			,style = "CV_Male_A"},
	{model = "DOLead_Edgar_GS"			,name = "Edgar"				,style = "DO_Striker_A"},
	{model = "DOH3a_Gurney_GS"			,name = "Gurney"			,style = "DO_Grappler_A"},
	{model = "DOH2_Jerry_GS"			,name = "Jerry"				,style = "DO_Grappler_A"},
	{model = "DOH2a_Leon_GS"			,name = "Leon"				,style = "DO_Striker_A"},
	{model = "GRH2a_Hal_GS"				,name = "Hal"				,style = "G_Grappler_A"},
	{model = "GRH2_Norton_GS"			,name = "Norton"			,style = "G_Grappler_A"},
	{model = "GR2nd_Peanut_GS"			,name = "Peanut"			,style = "G_Striker_A"},
	{model = "GRH1a_Vance_GS"			,name = "Vance"				,style = "G_Melee_A"},
	{model = "JKH3a_Bo_GS"				,name = "Bo"				,style = "J_Melee_A"},
	{model = "JKH1_Damon_GS"			,name = "Damon"				,style = "J_Striker_A"},
	{model = "JK2nd_Juri_GS"			,name = "Juri"				,style = "J_Grappler_A"},
	{model = "JKH1a_Kirby_GS"			,name = "Kirby"				,style = "J_Striker_A"},
	{model = "NDH1a_Algernon_GS"		,name = "Algernon"			,style = "N_Striker_B"},
	{model = "NDH3_Bucky_GS"			,name = "Bucky"				,style = "N_Ranged_A"},
	{model = "NDH2_Thad_GS"				,name = "Thad"				,style = "N_Ranged_A"},
	{model = "PRH3a_Parker_GS"			,name = "Parker"			,style = "P_Striker_B"},
	{model = "PRH3_Justin_GS"			,name = "Justin"			,style = "P_Striker_B"},
	{model = "PRH1a_Tad_GS"				,name = "Tad"				,style = "P_Striker_A"},
	{model = "PRH1_Gord_GS"				,name = "Gord"				,style = "P_Striker_A"},
	{model = "NDLead_Earnest_EG"		,name = "Earnest"			,style = "N_Ranged_A"},
	{model = "JKlead_Ted_EG"			,name = "Ted"				,style = "J_Striker_A"},
	{model = "GRlead_Johnny_EG"			,name = "Johnny"			,style = "G_Johnny"},
	{model = "PRlead_Darby_EG"			,name = "Darby"				,style = "P_Striker_A"},
	{model = "Dog_Pitbull2"				,name = "Pitbull"			,style = "AN_DOG"},
	{model = "Dog_Pitbull3"				,name = "Pitbull"			,style = "AN_DOG"},
	{model = "TE_CafeMU_W"				,name = "Edna"				,style = "Authority"},
	{model = "TO_Millworker"			,name = "McInnis"			,style = "CV_Male_A"},
	{model = "TO_Dockworker"			,name = "Johnson"			,style = "CV_Male_A"},
	{model = "NDH2_Thad_PJ"				,name = "Thad"				,style = "N_Ranged_A"},
	{model = "GN_Lblkboy_PJ"			,name = "Sheldon"			,style = "GS_Male_A"},
	{model = "GN_Hboy_PJ"				,name = "Pedro"				,style = "GS_Male_A"},
	{model = "GN_Boy01_PJ"				,name = "Ivan"				,style = "GS_Male_A"},
	{model = "GN_Boy02_PJ"				,name = "Trevor"			,style = "GS_Male_A"},
	{model = "TE_Gym_Incog"				,name = "MrBurton"			,style = "Authority"},
	{model = "JK_Mandy_Towel"			,name = "Mandy"				,style = "GS_Female_A"},
	{model = "JK_Bo_FB"					,name = "Bo"				,style = "J_Melee_A"},
	{model = "JK_Casey_FB"				,name = "Casey"				,style = "J_Melee_A"},
	{model = "PunchBag"					,name = "PunchBag"			,style = "PunchBagBS"},
	{model = "TO_Cop3"					,name = "OfficerMonson"		,style = "Authority"},
	{model = "GN_GreekboyUW"			,name = "Constantinos"		,style = "GS_Male_A"},
	{model = "TO_Construct01"			,name = "McInnis"			,style = "CV_Male_A"},
	{model = "TO_Construct02"			,name = "McInnis"			,style = "CV_Male_A"},
	{model = "TO_Cop4"					,name = "OfficerWilliams"	,style = "Authority"},
	{model = "PRH2_Bryce_OBOX_D1"		,name = "Bryce"				,style = "P_Striker_A"},
	{model = "PRH2_Bryce_OBOX_D2"		,name = "Bryce"				,style = "P_Striker_A"},
	{model = "PRH2A_Chad_OBOX_D1"		,name = "Chad"				,style = "P_Striker_A"},
	{model = "PRH2A_Chad_OBOX_D2"		,name = "Chad"				,style = "P_Striker_A"},
	{model = "PR2nd_Bif_OBOX_D2"		,name = "Bif"				,style = "P_Striker_A"},
	{model = "PRH3_Justin_OBOX_D1"		,name = "Justin"			,style = "P_Striker_A"},
	{model = "PRH3_Justin_OBOX_D2"		,name = "Justin"			,style = "P_Striker_A"},
	{model = "PRH3a_Prkr_OBOX_D1"		,name = "Parker"			,style = "P_Striker_A"},
	{model = "PRH3a_Prkr_OBOX_D2"		,name = "Parker"			,style = "P_Striker_A"},
	{model = "TE_Geography"				,name = "GeographyTeacher"	,style = "Authority"},
	{model = "TE_Music"					,name = "MusicTeacher"		,style = "TE_Female_A"},
	{model = "TO_ElfF"					,name = "Elf"				,style = "GS_Male_A"},
	{model = "TO_ElfM"					,name = "Elf"				,style = "GS_Male_A"},
	{model = "TO_HoboSanta"				,name = "HoboSanta"			,style = "CV_Male_A"},
	{model = "TO_Santa"					,name = "Santa"				,style = "CV_Male_A"},
	{model = "TO_Santa_NB"				,name = "Santa"				,style = "CV_Male_A"},
	{model = "Peter_Nutcrack"			,name = "Peter"				,style = "GS_Male_A"},
	{model = "GN_Fatgirl_Fairy"			,name = "Eunice"			,style = "GS_Fat_A"},
	{model = "GN_Lgirl_2_Flower"		,name = "Melody"			,style = "GS_Female_A"},
	{model = "GN_Hboy_Flower"			,name = "Pedro"				,style = "GS_Male_A"}
  }
  peds = {
	{name = "Jimmy"				,style = "Player"},
	{name = "Zoe"				,style = "GS_Female_A"},
	{name = "Beatrice"			,style = "GS_Female_A"},
	{name = "Algernon"			,style = "N_Striker_B"},
	{name = "Fatty"				,style = "N_Striker_A"},
	{name = "Melvin"			,style = "N_Striker_A"},
	{name = "Thad"				,style = "N_Ranged_A"},
	{name = "Bucky"				,style = "N_Ranged_A"},
	{name = "Cornelius"			,style = "N_Ranged_A"},
	{name = "Earnest"			,style = "N_Ranged_A"},
	{name = "Donald"			,style = "N_Ranged_A"},
	{name = "Damon"				,style = "J_Striker_A"},
	{name = "Kirby"				,style = "J_Striker_A"},
	{name = "Mandy"				,style = "GS_Female_A"},
	{name = "Dan"				,style = "J_Striker_A"},
	{name = "Luis"				,style = "J_Grappler_A"},
	{name = "Casey"				,style = "J_Melee_A"},
	{name = "Bo"				,style = "J_Melee_A"},
	{name = "Ted"				,style = "J_Striker_A"},
	{name = "Juri"				,style = "J_Grappler_A"},
	{name = "Peanut"			,style = "G_Striker_A"},
	{name = "Hal"				,style = "G_Grappler_A"},
	{name = "Johnny"			,style = "G_Striker_A"},
	{name = "Lefty"				,style = "G_Melee_A"},
	{name = "Lola"				,style = "GS_Female_A"},
	{name = "Lucky"				,style = "G_Striker_A"},
	{name = "Vance"				,style = "G_Melee_A"},
	{name = "Ricky"				,style = "G_Striker_A"},
	{name = "Norton"			,style = "G_Grappler_A"},
	{name = "Gord"				,style = "P_Striker_A"},
	{name = "Tad"				,style = "P_Striker_A"},
	{name = "Chad"				,style = "P_Grappler_A"},
	{name = "Bif"				,style = "P_Striker_A"},
	{name = "Justin"			,style = "P_Striker_B"},
	{name = "Bryce"				,style = "P_Grappler_A"},
	{name = "Bryce"				,style = "P_Striker_A"},
	{name = "Darby"				,style = "P_Striker_A"},
	{name = "Pinky"				,style = "GS_Female_A"},
	{name = "Angie"				,style = "GS_Female_A"},
	{name = "Parker"			,style = "P_Striker_B"},
	{name = "Jerry"				,style = "DO_Grappler_A"},
	{name = "Otto"				,style = "DO_Striker_A"},
	{name = "Leon"				,style = "DO_Striker_A"},
	{name = "Duncan"			,style = "DO_Striker_A"},
	{name = "Henry"				,style = "DO_Grappler_A"},
	{name = "Gurney"			,style = "DO_Grappler_A"},
	{name = "Omar"				,style = "DO_Striker_A"},
	{name = "Zoe"				,style = "GS_Female_A"},
	{name = "Max"				,style = "Authority"},
	{name = "Seth"				,style = "Authority"},
	{name = "Edward"			,style = "Authority"},
	{name = "Karl"				,style = "Authority"},
	{name = "Theo"				,style = "LE_Orderly_A"},
	{name = "MissPeabody"		,style = "TE_Female_A"},
	{name = "MrBurton"			,style = "Authority"},
	{name = "MrLuntz"			,style = "CV_Male_A"},
	{name = "MrGalloway"		,style = "Authority"},
	{name = "Edna"				,style = "Authority"},
	{name = "MissWinston"		,style = "TE_Female_A"},
	{name = "MrsMcRae"			,style = "TE_Female_A"},
	{name = "MrHuntingdon"		,style = "Authority"},
	{name = "MrsCarvin"			,style = "TE_Female_A"},
	{name = "MsPhillips"		,style = "TE_Female_A"},
	{name = "MrSlawter"			,style = "Authority"},
	{name = "DrCrabblesnitch"	,style = "Authority"},
	{name = "Sheldon"			,style = "GS_Male_A"},
	{name = "Christy"			,style = "GS_Female_A"},
	{name = "Gloria"			,style = "GS_Female_A"},
	{name = "Pedro"				,style = "GS_Male_A"},
	{name = "Constantinos"		,style = "GS_Male_A"},
	{name = "Ray"				,style = "GS_Fat_A"},
	{name = "Ivan"				,style = "GS_Male_A"},
	{name = "Trevor"			,style = "GS_Male_A"},
	{name = "Eunice"			,style = "GS_Fat_A"},
	{name = "Russell"			,style = "B_Striker_A"},
	{name = "DrBambillo"		,style = "CV_Male_A"},
	{name = "MrSullivan"		,style = "CV_Male_A"},
	{name = "MsKopke"			,style = "CV_Female_A"},
	{name = "MsRushinski"		,style = "CV_Female_A"},
	{name = "MsIsaacs"			,style = "CV_Female_A"},
	{name = "BethanyJones"		,style = "CV_Female_A"},
	{name = "ORourke"			,style = "CV_Male_A"},
	{name = "OfficerMonson"		,style = "Authority"},
	{name = "ZackOwens"			,style = "CV_Male_A"},
	{name = "Trent"				,style = "B_Striker_A"},
	{name = "TobiasMason"		,style = "CV_Male_A"},
	{name = "MrGrant"			,style = "CV_Male_A"},
	{name = "Mascot"			,style = "J_Mascot"},
	{name = "MrOh"				,style = "CV_Male_A"},
	{name = "Christy"			,style = "GS_Female_A"},
	{name = "Edgar"				,style = "DO_Striker_A"},
	{name = "Luis"				,style = "J_Grappler_A"},
	{name = "Mandy"				,style = "GS_Female_A"},
	{name = "Pinky"				,style = "GS_Female_A"},
	{name = "Beatrice"			,style = "GS_Female_A"},
	{name = "Lola"				,style = "GS_Female_A"},
	{name = "OfficerWilliams"	,style = "Authority"},
	{name = "Jimmy"				,style = "Player"},
	{name = "Davis"				,style = "B_Striker_A"},
	{name = "MrBreckindale"		,style = "CV_Male_A"},
	{name = "MrDoolin"			,style = "CV_Male_A"},
	{name = "Troy"				,style = "B_Striker_A"},
	{name = "Nate"				,style = "CV_Male_A"},
	{name = "MrCarmichael"		,style = "CV_Male_A"},
	{name = "NickyCharles"		,style = "CV_Male_A"},
	{name = "MrWatts"			,style = "Authority"},
	{name = "MissAbby"			,style = "CV_OLD"},
	{name = "Mihailovich"		,style = "CV_Male_A"},
	{name = "Kirby"				,style = "J_Striker_A"},
	{name = "Ted"				,style = "J_Striker_A"},
	{name = "Dan"				,style = "J_Striker_A"},
	{name = "Damon"				,style = "J_Striker_A"},
	{name = "Freeley"			,style = "CV_Male_A"},
	{name = "Dorsey"			,style = "CV_Male_A"},
	{name = "Hector"			,style = "CV_Male_A"},
	{name = "Osbourne"			,style = "CV_Male_A"},
	{name = "Chad"				,style = "P_Striker_A"},
	{name = "Justin"			,style = "P_Striker_A"},
	{name = "Parker"			,style = "P_Striker_A"},
	{name = "MariaTheresa"		,style = "CV_Female_A"},
	{name = "Bob"				,style = "GS_Male_A"},
	{name = "Fatty"				,style = "GS_Male_A"},
	{name = "Chuck"				,style = "CV_Male_A"},
	{name = "Ian"				,style = "CV_Male_A"},
	{name = "Fenwick"			,style = "DO_Striker_A"},
	{name = "Neil"				,style = "Authority"},
	{name = "MrSvenson"			,style = "CV_Male_A"},
	{name = "Denny"				,style = "CV_Male_A"},
	{name = "MrGalloway"		,style = "Authority"},
	{name = "Gary"				,style = "B_Striker_A"},
	{name = "Krakauer"			,style = "CV_OLD"},
	{name = "MrMoratti"			,style = "CV_Male_A"},
	{name = "Bif"				,style = "P_Striker_A"},
	{name = "Peter"				,style = "GS_Male_A"},
	{name = "MrSmith"			,style = "CV_Male_A"},
	{name = "Rat"				,style = "AN_Rat"},
	{name = "Melody"			,style = "GS_Female_A"},
	{name = "Karen"				,style = "GS_Female_A"},
	{name = "Gordon"			,style = "GS_Male_A"},
	{name = "Brandy"			,style = "GS_Male_A"},
	{name = "Pitbull"			,style = "AN_DOG"},
	{name = "Lance"				,style = "GS_Male_A"},
	{name = "Crystal"			,style = "CV_Female_A"},
	{name = "MrMartin"			,style = "CV_Male_A"},
	{name = "Ethan"				,style = "B_Striker_A"},
	{name = "Wade"				,style = "B_Striker_A"},
	{name = "Tom"				,style = "B_Striker_A"},
	{name = "MrRamirez"			,style = "CV_Male_A"},
	{name = "MrHuntingdon"		,style = "CV_Male_A"},
	{name = "Otto"				,style = "DO_Striker_A"},
	{name = "MrWiggins"			,style = "Authority"},
	{name = "Floyd"				,style = "CV_Male_A"},
	{name = "Leon"				,style = "DO_Striker_A"},
	{name = "Henry"				,style = "DO_Striker_A"},
	{name = "Fatty"				,style = "N_Striker_A"},
	{name = "Stan"				,style = "CV_Male_A"},
	{name = "Handy"				,style = "CV_OLD"},
	{name = "Gregory"			,style = "LE_Orderly_A"},
	{name = "Pedro"				,style = "GS_Male_A"},
	{name = "Gary"				,style = "B_Striker_A"},
	{name = "Lucky"				,style = "G_Striker_A"},
	{name = "Donald"			,style = "N_Ranged_A"},
	{name = "Parker"			,style = "P_Striker_B"},
	{name = "Casey"				,style = "J_Melee_A"},
	{name = "Peter"				,style = "GS_Male_A"},
	{name = "Angie"				,style = "GS_Female_A"},
	{name = "Pinky"				,style = "GS_Female_A"},
	{name = "Damon"				,style = "J_Striker_A"},
	{name = "Gordon"			,style = "GS_Male_A"},
	{name = "Ivan"				,style = "B_Striker_A"},
	{name = "Trevor"			,style = "B_Striker_A"},
	{name = "Bif"				,style = "P_Striker_A"},
	{name = "Vance"				,style = "G_Melee_A"},
	{name = "Thad"				,style = "N_Ranged_A"},
	{name = "Pinky"				,style = "GS_Female_A"},
	{name = "Russell"			,style = "B_Striker_A"},
	{name = "Tad"				,style = "P_Striker_A"},
	{name = "Bryce"				,style = "P_Grappler_A"},
	{name = "Justin"			,style = "P_Striker_B"},
	{name = "Angie"				,style = "GS_Female_A"},
	{name = "Christy"			,style = "GS_Female_A"},
	{name = "Pinky"				,style = "GS_Female_A"},
	{name = "MrBuba"			,style = "CV_OLD"},
	{name = "MrGordon"			,style = "CV_OLD"},
	{name = "MrsLisburn"		,style = "CV_OLD"},
	{name = "Fatty"				,style = "N_Striker_A"},
	{name = "Betty"				,style = "CV_Male_A"},
	{name = "Lightning"			,style = "P_Striker_A"},
	{name = "Zeke"				,style = "G_Striker_A"},
	{name = "Alfred"			,style = "CV_Male_A"},
	{name = "Paris"				,style = "CV_Female_A"},
	{name = "Courtney"			,style = "CV_Female_A"},
	{name = "Delilah"			,style = "CV_Female_A"},
	{name = "Drew"				,style = "CV_Male_A"},
	{name = "Castillo"			,style = "CV_Male_A"},
	{name = "Edgar"				,style = "DO_Striker_A"},
	{name = "Gurney"			,style = "DO_Grappler_A"},
	{name = "Jerry"				,style = "DO_Grappler_A"},
	{name = "Leon"				,style = "DO_Striker_A"},
	{name = "Hal"				,style = "G_Grappler_A"},
	{name = "Norton"			,style = "G_Grappler_A"},
	{name = "Peanut"			,style = "G_Striker_A"},
	{name = "Vance"				,style = "G_Melee_A"},
	{name = "Bo"				,style = "J_Melee_A"},
	{name = "Damon"				,style = "J_Striker_A"},
	{name = "Juri"				,style = "J_Grappler_A"},
	{name = "Kirby"				,style = "J_Striker_A"},
	{name = "Algernon"			,style = "N_Striker_B"},
	{name = "Bucky"				,style = "N_Ranged_A"},
	{name = "Thad"				,style = "N_Ranged_A"},
	{name = "Parker"			,style = "P_Striker_B"},
	{name = "Justin"			,style = "P_Striker_B"},
	{name = "Tad"				,style = "P_Striker_A"},
	{name = "Gord"				,style = "P_Striker_A"},
	{name = "Earnest"			,style = "N_Ranged_A"},
	{name = "Ted"				,style = "J_Striker_A"},
	{name = "Johnny"			,style = "G_Johnny"},
	{name = "Darby"				,style = "P_Striker_A"},
	{name = "Pitbull"			,style = "AN_DOG"},
	{name = "Pitbull"			,style = "AN_DOG"},
	{name = "Edna"				,style = "Authority"},
	{name = "McInnis"			,style = "CV_Male_A"},
	{name = "Johnson"			,style = "CV_Male_A"},
	{name = "Thad"				,style = "N_Ranged_A"},
	{name = "Sheldon"			,style = "GS_Male_A"},
	{name = "Pedro"				,style = "GS_Male_A"},
	{name = "Ivan"				,style = "GS_Male_A"},
	{name = "Trevor"			,style = "GS_Male_A"},
	{name = "MrBurton"			,style = "Authority"},
	{name = "Mandy"				,style = "GS_Female_A"},
	{name = "Bo"				,style = "J_Melee_A"},
	{name = "Casey"				,style = "J_Melee_A"},
	{name = "PunchBag"			,style = "PunchBagBS"},
	{name = "OfficerMonson"		,style = "Authority"},
	{name = "Constantinos"		,style = "GS_Male_A"},
	{name = "McInnis"			,style = "CV_Male_A"},
	{name = "McInnis"			,style = "CV_Male_A"},
	{name = "OfficerWilliams"	,style = "Authority"},
	{name = "Bryce"				,style = "P_Striker_A"},
	{name = "Bryce"				,style = "P_Striker_A"},
	{name = "Chad"				,style = "P_Striker_A"},
	{name = "Chad"				,style = "P_Striker_A"},
	{name = "Bif"				,style = "P_Striker_A"},
	{name = "Justin"			,style = "P_Striker_A"},
	{name = "Justin"			,style = "P_Striker_A"},
	{name = "Parker"			,style = "P_Striker_A"},
	{name = "Parker"			,style = "P_Striker_A"},
	{name = "GeographyTeacher"	,style = "Authority"},
	{name = "MusicTeacher"		,style = "TE_Female_A"},
	{name = "Elf"				,style = "GS_Male_A"},
	{name = "Elf"				,style = "GS_Male_A"},
	{name = "HoboSanta"			,style = "CV_Male_A"},
	{name = "Santa"				,style = "CV_Male_A"},
	{name = "Santa"				,style = "CV_Male_A"},
	{name = "Peter"				,style = "GS_Male_A"},
	{name = "Eunice"			,style = "GS_Fat_A"},
	{name = "Melody"			,style = "GS_Female_A"},
	{name = "Pedro"				,style = "GS_Male_A"}
  }
  fgs = {
	{name = "Nothing"},
	{name = "Ally"},
	{name = "Enemies"}
  }
  pty = {
    "Normal",
	"Faster",
	"Always",
  }
  xss = {
	{"Halloween1"					,"Halloween"},
	{"Halloween2"			,"Halloween 2"},
	{"Halloween3"			,"Halloween 3"},
	{"vote"				,"Earnest speech"},
	{"TombstonePost"			,"Tombstone"},
	{"PumpkinPost"				,"Pumpkin"},
	{"RL_rich1"				,"Race The Vale"},
	{"Christmas"			,"Christmas"},
	{"Nutcracker"			,"Nutrackin'"},
	{"Rudy1"				,"Town Christmas"},
	{"Rudy2"			,"Rudy the Red Nosed Santa"},
	{"Rudy3"				,"Rudy the Red Nosed Santa 2"},
	{"delivery"				,"Discreet Delivery"},
	{"Miracle"				,"Miracle on Bullworth st"},
	{"2s07"				,"Small Offences"},
  }
  styles = {
    "Player",
	"AN_DOG",
	"Authority",
	"B_Striker_A",
	"1_03_Davis",
	"BOSS_Darby",
	"BOSS_Russell",
	"Crazy_Basic",
	"CV_Drunk",
	"CV_Female_A",
	"CV_Male_A",
	"CV_OLD",
	"DO_Edgar",
	"DO_Grappler_A",
	"DO_Melee_A",
	"DO_Striker_A",
	"G_Grappler_A",
	"G_Johnny",
	"G_Melee_A",
	"G_Ranged_A",
	"G_Striker_A",
	"3_05_Norton",
	"GS_Fat_A",
	"GS_Female_A",
	"GS_Male_A",
	"Hobo_Blocker",
	"J_Damon",
	"J_Grappler_A",
	"J_Mascot",
	"J_Melee_A",
	"J_Striker_A",
	"J_Ted",
	"LE_Orderly_A",
	"N_Earnest",
	"N_Ranged_A",
	"N_Striker_A",
	"N_Striker_B",
	"Nemesis",
	"P_Bif",
	"P_Grappler_A",
	"P_Striker_A",
	"P_Striker_B",
	"PunchBagBS",
	"Russell_102",
	"TE_Female_A",
	"TE_Secretary",
	"TO_Siamese",
	"WrestlingACT",
	"BoxingPlayer",
	"Client_3_01",
	"Client_3_R05",
  }
  frts = {
	{"C_Photography_2"					,"Photography 1"},
	{"C_Photography_1"			,"Photography 2"},
	{"C_Photography_3"			,"Photography 3"},
	{"C_Photography_4"			,"Photography 4"},
	{"C_Photography_5"				,"Photography 5"},
	{"C_English_1"					,"English 1"},
	{"C_English_2"			,"English 2"},
	{"C_English_3"			,"English 3"},
	{"C_English_4"			,"English 4"},
	{"C_English_5"				,"English 5"},
	{"C_ART_1"					,"Art 1"},
	{"C_ART_2"			,"Art 2"},
	{"C_ART_3"			,"Art 3"},
	{"C_ART_4"			,"Art 4"},
	{"C_ART_5"				,"Art 5"},
	{"C_Art_5_repeat"				,"Repeat Art 5"},
	{"C_WRESTLING_1"					,"Gym 1"},
	{"C_WRESTLING_2"			,"Gym 2"},
	{"C_WRESTLING_3"			,"Gym 3"},
	{"C_WRESTLING_4"			,"Gym 4"},
	{"C_WRESTLING_5"				,"Gym 5"},
	{"C_Shop_1"					,"Shop 1"},
	{"C_Shop_2"			,"Shop 2"},
	{"C_Shop_3"			,"Shop 3"},
	{"C_Shop_4"			,"Shop 4"},
	{"C_Shop_5"				,"Shop 5"},
	{"C_Math_1"					,"Math 1"},
	{"C_Math_2"			,"Math 2"},
	{"C_Math_3"			,"Math 3"},
	{"C_Math_4"			,"Math 4"},
	{"C_Math_5"				,"Math 5"},
	{"C_Math_5_repeat"				,"Repeat Math 5"},
	{"C_Biology_1"					,"Biology 1"},
	{"C_Biology_2"			,"Biology 2"},
	{"C_Biology_3"			,"Biology 3"},
	{"C_Biology_4"			,"Biology 4"},
	{"C_Biology_5"				,"Biology 5"},
	{"C_Biology_5_repeat"				,"Repeat Biology 5"},
	{"C_Geography_1"					,"Geography 1"},
	{"C_Geography_2"			,"Geography 2"},
	{"C_Geography_3"			,"Geography 3"},
	{"C_Geography_4"			,"Geography 4"},
	{"C_Geography_5"				,"Geography 5"},
	{"C_Geography_5_repeat"				,"Repeat Geography 5"},
	{"C_Music_1"					,"Music 1"},
	{"C_Music_2"			,"Music 2"},
	{"C_Music_3"			,"Music 3"},
	{"C_Music_4"			,"Music 4"},
	{"C_Music_5"				,"Music 5"},
	{"C_Music_5_repeat"				,"Repeat Music 5"},
	{"C_Chem_1"					,"Chemistry 1"},
	{"C_Chem_2"			,"Chemistry 2"},
	{"C_Chem_3"			,"Chemistry 3"},
	{"C_Chem_4"			,"Chemistry 4"},
	{"C_Chem_5"				,"Chemistry 5"},
	{"C_Chem_5_repeat"				,"Repeat Chemistry 5"},
	{215				,"Lock Picking Class"},
	{212				,"WebDriver Torso"}
  }
  cbs = {
	{"LawnMowing1a"				,"L-Mowing 1 70%"},
	{"LawnMowing1b"				,"L-Mowing 1 80%"},
	{"LawnMowing1c"				,"L-Mowing 1 90%"},
	{"LawnMowing2a"				,"L-Mowing 2 70%"},
	{"LawnMowing2b"				,"L-Mowing 2 80%"},
	{"LawnMowing2c"				,"L-Mowing 2 90%"},
	{"LawnMowing3a"				,"L-Mowing 3 70%"},
	{"LawnMowing3b"				,"L-Mowing 3 80%"},
	{"LawnMowing3c"				,"L-Mowing 3 90%"},
	{208				,"GoKart Street 1"},
	{209				,"GoKart Street 2"},
	{210				,"GoKart Street 3"},
	{255				,"Snow 1"},
	{256				,"Snow 2"},
	{257				,"Snow 3"},
	{258				,"Snow 4"},
	{259				,"Snow 5"},
	{260				,"Snow 6"},
	{203				,"GoKart 1"},
	{204				,"GoKart 2"},
	{205				,"GoKart 3"},
	{206				,"GoKart 4"},
	{207				,"GoKart 5"},
	{15				,"Training 1"},
	{16				,"Training 2"},
	{17				,"Training 3"},
	{18				,"Training 4"},
	{19				,"Training 5"},
	{199				,"High Striker"},
	{200				,"Strike Out"},
	{201				,"Shooting Range"},
	{202				,"Shoot"},
	{211				,"Football Jugling"},
	{213				,"Soccer Ball"},
	{50				,"Bullworth Vale Race 1"},
	{51				,"Bullworth Vale Race 2"},
	{52				,"Bullworth Vale Race 3"},
	{53				,"Bullworth Vale Race 4"},
	{54				,"Bullworth Vale Race 5"},
	{55				,"Bullworth Vale Race 6"},
	{56				,"Bullworth Vale Race 7"},
	{57				,"Bullworth Town Race 1"},
	{58				,"Bullworth Town Race 2"},
	{59				,"Bullworth Town Race 3"},
	{60				,"Bullworth Town Race 4"},
	{61				,"New Conventry Race 1"},
	{62				,"New Conventry Race 2"},
	{63				,"Bullworth Academy race"},
	{34				,"Boxing 1"},
	{35				,"Boxing 2"},
	{36				,"Boxing 3"},
	{37				,"Boxing 4"},
	{38				,"Boxing 5"},
	{167				,"Dodgeball 1"},
	{168				,"Dodgeball 2"},
	{169				,"Dodgeball 3"},
	{170				,"Dodgeball 4"},
	{171				,"Dodgeball 5"},
	{249				,"L-Mowing Park 1"},
	{250				,"L-Mowing Park 2"},
	{251				,"L-Mowing Park 3"},
	{252				,"L-Mowing House 1"},
	{253				,"L-Mowing House 2"},
	{254				,"L-Mowing House 3"},
	{217				,"Monkey Fling"},
	{218				,"Flying Squirrel"},
	{220				,"Con Sumo"},
	{225				,"Future Street Race"},
	{226				,"Future Street Race 3D"},
	{214				,"BMX Rumble"},
  }
  cvs = {
	{"1_01"					,"Welcome to Bullworth"},
	{"1_02B"			,"This is your school"},
	{"1_03"			,"The Setup"},
	{"1_E01"				,"Petey Errand"},
	{"1_04"			,"The Slingshot"},
	{"1_05"				,"Save Algie"},
	{"1_07"				,"Defend Bucky"},
	{"1_08"				,"That Bitch"},
	{"1_G1"				,"The Diary"},
	{"1_09"				,"The Candidate"},
	{"1_11x1"			,"Halloween"},
	{"1_11x2"			,"The Big Prank"},
	{"1_10"				,"Help Gary"},
	{"1_B"				,"Russell in the hole"},
	{"2_S04"					,"Character Sheets"},
	{70				,"Small Offences"},
	{"2_01"				,"Last Minute Shopping"},
	{"2_02"				,"Klepto Comic"},
	{"2_03"					,"The Eggs"},
	{"2_04"				,"Race The Vale"},
	{"1_S01"				,"Hattrick vs Galloway"},
	{"2_05"				,"Tad House"},
	{"2_06"					,"Movie Tickets"},
	{"2_G2"				,"Carnival Date"},
	{"2_07"				,"Beach Rumble"},
	{"2_08"				,"Weed Killer"},
	{"2_09"				,"Boxing Challenge"},
	{"2_B"				,"Dishonorable Fight"},
	{"2_S05"				,"Cook's Crush"},
	{"2_S06"			,"Panty Raid"},
	{"3_01"				,"Jealous Johnny"},
	{"3_01A"				,"Balls of snow"},
	{"3_01C"				,"Nutcrackin"},
	{"3_01D"				,"Rudy the Red Nosed Santa"},
	{"3_02"				,"Bait"},
	{"2_S02"				,"Glass House"},
	{"3_08"				,"Christmas is here"},
	{"3_R05B"				,"Discreet Deliveries"},
	{"3_S10"				,"Tagging"},
	{"3_S11"				,"Galloway Away"},
	{"3_XM"				,"Miracle on Bullworth St"},
	{"3_G3"				,"Lola Race"},
	{"3_05"				,"The Tenements"},
	{"3_04"			,"Wrong Part of Town"},
	{"3_06"				,"The Rumble"},
	{"3_B"				,"Fighting With Johnny"},
	{"4_02"				,"Stronghold Assault"},
	{"3_S03"			,"Cheating Time"},
	{"4_01"				,"Paparazzi"},
	{"4_G4"					,"Discretion Assured"},
	{"4_03"				,"Defender of the Castle"},
	{"4_03"				,"Funhouse fun"},
	{"4_05"				,"Nice Outfit"},
	{"4_S12"				,"Here's to you Ms.Philips"},
	{"4_06"				,"The Big Game"},
	{"5_09"				,"Making a mark"},
	{"5_01"				,"Rats in the library"},
	{"5_02"				,"Preppies Vandalized"},
	{"5_04"				,"The Gym Is Burning"},
	{"5_03"				,"Finding Johnny Vincent"},
	{"5_05"				,"Revenge on Mr.Button"},
	{"3_R07"				,"The Collector"},
	{"3_S08"				,"Mailbox Armageddon"},
	{"5_G5"				,"Smash it up"},
	{"6_01"				,"Go See The Principal"},
	{"5_06"				,"Busting In Part 1"},
	{"5_07a"				,"Busting In Part 2"},
	{"5_B"				,"Showdown at the plant"},
	{"6_02"				,"Complete Mayhem I"},
	{"6_03"				,"Complete Mayhme II"},
	{"6_B"				,"Final Showdown"},
	{64				,"Prep Challenge"},
	{85			,"Greaser Challenge"},
	{"3_R09_N"				,"Nerd Challenge"},
	{97				,"Jocks Challenge"},
	{111				,"Townies Challenge"},
	{5				,"Chapter 1"},
	{"Chapt1Trans"				,"Chapter 2"},
	{"Chapt2Trans"				,"Chapter 3"},
	{"Chapt3Trans"				,"Chapter 4"},
	{"Chapt4Trans"				,"Chapter 5"},
	{"Chapt5Trans"				,"Chapter 6"},
  }
  cvbs = {
	"MS_MisbehavingLow.rsm",
	"EX_XmasTreeEmitter04.rsm",
	"MS_CarnivalFunhouseAmbient.rsm",
    "MS_Somower.rsm",
	"MS_RomanceHigh.rsm",
	"MS_MusicClass_Turkey.rsm",
	"MS_WIldstyleHigh.rsm",
    "ArcRaceMXmidi02SPLASHBED01.rsm",
	"MS_5-05_MeetZoe_NIS.rsm",
	"MS_RunningMid.rsm",
	"MS_Candidate.rsm",
	"MS_EpicConfrontationHighPart2.rsm",
    "ArcRaceMXmidi02SPLASH.rsm",
	"MS_EnglishClassEnd.rsm",
	"EX_BikeShopMX.rsm",
	"MS_FinalShowdown03Low.rsm",
	"ArcRaceMXmidi02SPLASHBED05.rsm",
	"MS_EpicConfrontationLow.rsm",
	"MS_StealthHigh.rsm",
	"E_TatooTrailerMX.rsm",
	"MS_FriendshipAllyHigh.rsm",
	"MS_OnFootFailure.rsm",
	"MS_MusicClass_Washing.rsm",
	"MS_CarnivalFunhouseMaze.rsm",
    "MS_BikeFunMid.rsm",
	"FIGHT01EndFade.rsm",
	"MS_RussellInTheHole.rsm",
	"MS_ChaseAdult.rsm",
	"MS_3-B_ENDTAG.rsm",
	"MS_ActionLow.rsm",
	"MS_MiniStingSuccess.rsm",
	"MS_Misbehaving_NISPrankInfo.rsm",
	"MS_StreetFightLargeLow_Boxing.rsm",
	"MS_XmasBellsRudylow.rsm",
	"MS_MusicClass_MasterP.rsm",
	"MS_FinalShowdownMid.rsm",
	"MS_Misbehaving_NISPrankSucess.rsm",
	"E_HQMX_Dropouts.rsm",
	"MS_TenementsLow.rsm",
	"MS_BikeDay.rsm",
    "MS_ActionMid.rsm",
	"FIGHT01EFade.rsm",
	"MS_InTroubleHigh.rsm",
	"MS_PhotographyClass.rsm",
	"MS_FinalShowdown03Mid.rsm",
	"MS_RunningHigh.rsm",
	"MS_XmasJingleMiracleMid.rsm",
	"EX_XmasTreeEmitter03.rsm",
	"MS_MusicClass_Carols01.rsm",
	"MS_TenementsHigh.rsm",
	"MS_XmasJingleMiracle.rsm",
	"MS_NerdFight.rsm",
	"MS_GoKart02.rsm",
	"MS_BiologyClass.rsm",
	"MS_EnglishClass.rsm",
	"MS_FootStealthLow.rsm",
	"ArcRaceMXmidi02Drive02.rsm",
	"FIGHT01D.rsm",
	"MS_XmasBellsRudyHigh.rsm",
	"MS_HalloweenMid.rsm",
	"E_HQMX_Jocks.rsm",
	"MS_Ambient01.rsm",
	"Arc_MonkeyFlingGame01.rsm",
	"MS_SearchingHigh.rsm",
	"MS_FightMid01.rsm",
	"ArcRaceMXmidi02SPLASHBED06.rsm",
	"MS_DestructionVandalismMid.rsm",
	"MS_BoxingBossFight.rsm",
	"MS_ShowdownAtThePlantLow.rsm",
	"MS_ActionHigh.rsm",
	"MS_BikeFailure.rsm",
	"E_HairSaloonPoorMX.rsm",
	"MS_SneakDate_Romantic.rsm",
	"MS_FightingNerds.rsm",
	"MS_Tired.rsm",
  }
  cws = {
	{model = "R_Jacket1"				,style = 1},
	{model = "R_Jacket2"				,style = 1},
	{model = "R_Jacket5"			,style = 1},
	{model = "R_Sweater1"				,style = 1},
	{model = "R_Sweater2"			,style = 1},
	{model = "R_Sweater3"				,style = 1},
	{model = "R_Sweater4"			,style = 1},
	{model = "R_Sweater5"				,style = 1},
	{model = "R_SSleeves1"			,style = 1},
	{model = "R_SSleeves2"				,style = 1},
	{model = "R_SSleeves4"				,style = 1},
	{model = "R_SSleeves5"			,style = 1},
	{model = "R_SSleeves6"				,style = 1},
	{model = "R_LSleeves1"			,style = 1},
	{model = "R_LSleeves2"				,style = 1},
	{model = "R_LSleeves4"				,style = 1},
	{model = "R_LSleeves5"			,style = 1},
	{model = "R_Watch1"				,style = 2},
	{model = "R_Watch2"				,style = 2},
	{model = "R_Watch3"				,style = 2},
	{model = "R_Watch4"			,style = 2},
	{model = "R_Wristband1"				,style = 3},
	{model = "R_Wristband2"				,style = 3},
	{model = "R_Wristband3"				,style = 3},
	{model = "R_Wristband4"			,style = 3},
	{model = "R_Pants1"			,style = 4},
	{model = "R_Pants2"			,style = 4},
	{model = "R_Pants3"				,style = 4},
	{model = "R_Pants4"				,style = 4},
	{model = "R_Pants5"				,style = 4},
	{model = "R_Shorts1"			,style = 4},
	{model = "R_Shorts2"			,style = 4},
	{model = "R_Shorts3"				,style = 4},
	{model = "R_Shorts4"				,style = 4},
	{model = "R_Shorts5"				,style = 4},
	{model = "R_Sneakers1"				,style = 5},
	{model = "R_Sneakers2"			,style = 5},
	{model = "R_Sneakers3"				,style = 5},
	{model = "R_Sneakers4"				,style = 5},
	{model = "R_Sneakers5"				,style = 5},
	{model = "R_Sneakers6"				,style = 5},
	{model = "R_Boots1"				,style = 5},
	{model = "R_Boots2"			,style = 5},
	{model = "R_Boots3"				,style = 5},
	{model = "R_Hat1"				,style = 0},
	{model = "R_Hat2"				,style = 0},
	{model = "R_Hat3"				,style = 0},
	{model = "R_Hat4"			,style = 0},
	{model = "R_Hat5"			,style = 0},
	{model = "R_Hat6"				,style = 0},
	{model = "R_TopHat"				,style = 0},
	{model = "S_Jacket3"				,style = 1},
	{model = "S_Jacket4"			,style = 1},
	{model = "S_Sweater1"				,style = 1},
	{model = "S_Sweater2"			,style = 1},
	{model = "S_Sweater5"				,style = 1},
	{model = "S_LSleeves1"			,style = 1},
	{model = "S_LSleeves2"			,style = 1},
	{model = "S_LSleeves3"				,style = 1},
	{model = "S_LSleeves4"			,style = 1},
	{model = "S_Wristband1"				,style = 2},
	{model = "S_Wristband2"				,style = 3},
	{model = "S_Wristband3"				,style = 3},
	{model = "S_Wristband4"			,style = 2},
	{model = "S_Wristband5"				,style = 3},
	{model = "S_Wristband6"			,style = 2},
	{model = "S_Pants1"			,style = 4},
	{model = "S_Pants3"			,style = 4},
	{model = "S_Shorts1"			,style = 4},
	{model = "S_Shorts2"			,style = 4},
	{model = "S_Shorts3"				,style = 4},
	{model = "S_Shorts4"			,style = 4},
	{model = "S_Shorts5"			,style = 4},
	{model = "S_Shorts6"			,style = 4},
	{model = "S_Sneakers1"				,style = 5},
	{model = "S_Sneakers2"			,style = 5},
	{model = "S_BHat1"				,style = 0},
	{model = "S_BHat2"				,style = 0},
	{model = "S_BHat3"				,style = 0},
	{model = "S_Sunvisor1"				,style = 0},
	{model = "S_Sunvisor2"				,style = 0},
	{model = "S_Sunvisor3"				,style = 0},
	{model = "P_Army1"				,style = 0},
	{model = "P_Army2"				,style = 0},
	{model = "P_Army3"			,style = 0},
	{model = "P_Jacket1"				,style = 1},
	{model = "P_Jacket2"				,style = 1},
	{model = "P_Jacket3"			,style = 1},
	{model = "P_Jacket4"				,style = 1},
	{model = "P_Jacket5"			,style = 1},
	{model = "P_Jacket6"				,style = 1},
	{model = "P_Sweater1"				,style = 1},
	{model = "P_Sweater2"				,style = 1},
	{model = "P_Sweater3"			,style = 1},
	{model = "P_Sweater4"				,style = 1},
	{model = "P_Sweater5"			,style = 1},
	{model = "P_Sweater6"				,style = 1},
	{model = "P_Sweater7"			,style = 1},
	{model = "P_Sweater8"				,style = 1},
	{model = "P_SSleeves1"				,style = 1},
	{model = "P_SSleeves2"				,style = 1},
	{model = "P_SSleeves3"			,style = 1},
	{model = "P_SSleeves4"				,style = 1},
	{model = "P_SSleeves5"			,style = 1},
	{model = "P_SSleeves6"				,style = 1},
	{model = "P_SSleeves7"			,style = 1},
	{model = "P_SSleeves8"				,style = 1},
	{model = "P_SSleeves9"			,style = 1},
	{model = "P_SSleeves10"			,style = 1},
	{model = "P_SSleeves11"				,style = 1},
	{model = "P_SSleeves12"				,style = 1},
	{model = "P_SSleeves13"				,style = 1},
	{model = "P_SSleeves14"				,style = 1},
	{model = "P_SSleeves15"				,style = 1},
	{model = "P_LSleeves1"				,style = 1},
	{model = "P_LSleeves2"				,style = 1},
	{model = "P_LSleeves3"			,style = 1},
	{model = "P_LSleeves4"				,style = 1},
	{model = "P_LSleeves5"			,style = 1},
	{model = "P_LSleeves6"				,style = 1},
	{model = "P_LSleeves7"			,style = 1},
	{model = "P_LSleeves8"				,style = 1},
	{model = "P_LSleeves9"			,style = 1},
	{model = "P_LSleeves10"			,style = 1},
	{model = "P_Watch1"				,style = 2},
	{model = "P_Wristband1"				,style = 3},
	{model = "P_Wristband2"				,style = 3},
	{model = "P_Wristband3"				,style = 3},
	{model = "P_Wristband4"			,style = 3},
	{model = "P_Wristband5"				,style = 3},
	{model = "P_Wristband6"			,style = 3},
	{model = "P_Wristband7"				,style = 3},
	{model = "P_Wristband8"			,style = 3},
	{model = "P_Pants1"			,style = 4},
	{model = "P_Pants2"			,style = 4},
	{model = "P_Pants3"				,style = 4},
	{model = "P_Pants4"				,style = 4},
	{model = "P_Pants5"				,style = 4},
	{model = "P_Pants6"				,style = 4},
	{model = "P_Pants7"			,style = 4},
	{model = "P_Sneakers1"				,style = 5},
	{model = "P_Sneakers2"				,style = 5},
	{model = "P_Sneakers3"			,style = 5},
	{model = "P_Sneakers4"				,style = 5},
	{model = "P_Sneakers5"			,style = 5},
	{model = "P_Sneakers6"				,style = 5},
	{model = "P_Sneakers7"			,style = 5},
	{model = "P_Sneakers8"				,style = 5},
	{model = "P_Sneakers9"			,style = 5},
	{model = "P_Sneakers10"			,style = 5},
	{model = "P_Sneakers11"				,style = 5},
	{model = "P_Sneakers12"				,style = 5},
	{model = "P_Sneakers13"				,style = 5},
	{model = "P_Sneakers14"				,style = 5},
	{model = "P_Sneakers15"			,style = 5},
	{model = "P_Sneakers16"				,style = 5},
	{model = "P_Sneakers17"				,style = 5},
	{model = "P_Sneakers18"				,style = 5},
	{model = "P_Sneakers19"			,style = 5},
	{model = "P_Boots1"				,style = 5},
	{model = "P_Boots2"				,style = 5},
	{model = "P_Boots3"			,style = 5},
	{model = "P_Boots4"				,style = 5},
	{model = "P_BHat1"				,style = 0},
	{model = "P_BHat2"				,style = 0},
	{model = "P_BHat3"				,style = 0},
	{model = "P_BHat4"			,style = 0},
	{model = "P_BHat5"			,style = 0},
	{model = "P_BHat6"				,style = 0},
	{model = "P_Bandana1"			,style = 0},
	{model = "P_Bandana2"			,style = 0},
	{model = "P_Bandana3"				,style = 0},
	{model = "B_Jacket1"				,style = 1},
	{model = "B_Jacket2"				,style = 1},
	{model = "B_Jacket3"			,style = 1},
	{model = "B_Jacket6"				,style = 1},
	{model = "B_Sweater2"				,style = 1},
	{model = "B_Sweater3"				,style = 1},
	{model = "B_Sweater4"			,style = 1},
	{model = "B_SSleeves1"				,style = 1},
	{model = "B_SSleeves2"				,style = 1},
	{model = "B_SSleeves3"			,style = 1},
	{model = "B_LSleeves2"				,style = 1},
	{model = "B_LSleeves3"				,style = 1},
	{model = "B_LSleeves4"			,style = 1},
	{model = "B_Jersey1"				,style = 1},
	{model = "B_Jersey3"				,style = 1},
	{model = "B_Jersey4"			,style = 1},
	{model = "B_Jersey5"				,style = 1},
	{model = "B_Jersey6"			,style = 1},
	{model = "B_Jersey7"				,style = 1},
	{model = "B_Jersey8"			,style = 1},
	{model = "B_Jersey9"				,style = 1},
	{model = "B_Jersey10"			,style = 1},
	{model = "B_BigWatch"				,style = 2},
	{model = "B_Wristband1"				,style = 3},
	{model = "B_Wristband2"				,style = 3},
	{model = "B_Wristband3"				,style = 3},
	{model = "B_Wristband4"			,style = 3},
	{model = "B_Wristband5"				,style = 3},
	{model = "B_Wristband6"			,style = 3},
	{model = "B_Pants1"				,style = 4},
	{model = "B_Pants2"				,style = 4},
	{model = "B_Pants3"			,style = 4},
	{model = "B_Pants4"				,style = 4},
	{model = "B_Pants6"				,style = 4},
	{model = "B_Pants7"				,style = 4},
	{model = "B_Pants8"			,style = 4},
	{model = "B_Shorts1"			,style = 4},
	{model = "B_Shorts2"			,style = 4},
	{model = "B_Shorts3"				,style = 4},
	{model = "B_Shorts4"			,style = 4},
	{model = "B_Shorts5"			,style = 4},
	{model = "B_Shorts6"			,style = 4},
	{model = "B_Shorts7"			,style = 4},
	{model = "B_Sneakers1"				,style = 5},
	{model = "B_Sneakers2"				,style = 5},
	{model = "B_Sneakers3"			,style = 5},
	{model = "B_Sneakers4"				,style = 5},
	{model = "B_Sneakers5"			,style = 5},
	{model = "B_Sneakers6"				,style = 5},
	{model = "B_Sneakers8"				,style = 5},
	{model = "B_Sneakers9"			,style = 5},
	{model = "B_Sneakers10"			,style = 5},
	{model = "B_Sneakers11"				,style = 5},
	{model = "B_Sneakers12"				,style = 5},
	{model = "B_Sneakers13"				,style = 5},
	{model = "B_Boots1"				,style = 5},
	{model = "B_Boots2"				,style = 5},
	{model = "B_Boots3"			,style = 5},
	{model = "B_Boots4"				,style = 5},
	{model = "B_Boots5"			,style = 5},
	{model = "B_BHat1"				,style = 0},
	{model = "B_BHat2"				,style = 0},
	{model = "B_BHat3"				,style = 0},
	{model = "B_BHat4"			,style = 0},
	{model = "B_BHat5"			,style = 0},
	{model = "B_BHat6"				,style = 0},
	{model = "B_Bucket1"				,style = 0},
	{model = "B_Bucket2"			,style = 0},
	{model = "B_Various1"				,style = 0},
	{model = "B_Various2"			,style = 0},
	{model = "B_Various3"				,style = 0},
	{model = "B_Various4"				,style = 0},
	{model = "B_Various5"				,style = 0},
	{model = "B_Hunter1"				,style = 0},
	{model = "B_Hunter2"			,style = 0},
	{model = "B_Hunter3"			,style = 0},
  }
  cwrs = {
    {"Underwear"					,"Underwear"},
	{"Starting"					,"Starting"},
	{"Uniform"					,"School Uniform"},
	{"Boxing"					,"Boxing (Complete)"},
	{"Boxing NG"					,"Boxing"},
	{"Wrestling"				,"Wrestling Uniform"},
	{"Mascot"					,"Mascot"},
    {"MascotNoHead"					,"Mascot (No Head)"},
	{"Orderly"					,"Orderly Uniform"},
	{"Halloween"					,"Halloween"},
	{"PJ"					,"Pajamas"},
	{"Prison"					,"Prisoner"},
	{"Grotto Master"				,"Grotto Master"},
	{"Gnome"					,"Gnome"},
	{"Fast Food"					,"Fast Food uniform"},
	{"Gold Suit"					,"Gold Suit"},
	{"BMX Champion"					,"BMX"},
	{"Gym Strip"				,"Gym strip"},
	{"Ninja_BLK"					,"Black Ninja"},
    {"Ninja_WHT"					,"Green Ninja"},
	{"Ninja_RED"					,"Red Ninja"},
	{"Columbus"					,"Columbus"},
	{"Nutcracker"					,"Nutrackin"},
	{"Elf"								,"Elf"},
	{"Marching Band"				,"Marching Band"},
	{"Nascar"					,"Nascar"},
	{"80 Rocker"					,"Rocker"},
	{"Panda"					,"Panda"},
	{"Alien"					,"Alien"},
	{"NerdJimmy"				,"Nerd"}
  }
  cvts = {
	{"275"					,"1.Cop Bike"},
	{"276"			,"2.Scooter"},
	{"277"			,"3.Red BMX"},
	{"278"			,"4.Blue BMX"},
	{"279"				,"5.Bicycle"},
	{"280"				,"6.Mountain Bike"},
	{"281"				,"7.Old Bike"},
	{"282"				,"8.Racer"},
	{"283"				,"9.Aquaberry Bike"},
	{"284"			,"10.Mower"},
	{"286"				,"11.Taxi"},
	{"288"					,"12.Dozer"},
	{"289"				,"13.Go Kart"},
	{"290"				,"14.Limo"},
	{"291"					,"15.Delivery Truck"},
	{"292"				,"16.Foreign Car"},
	{"293"				,"17.Regular Car"},
	{"294"				,"18.70 Wagon"},
	{"295"					,"19.Police Car"},
	{"296"				,"20.Domestic Car"},
	{"297"				,"21.Truck"},
	{"298"					,"22.Arcade 1"},
	{"287"				,"22.Arcade 2"},
	{"285"				,"23.Arcade 3"},
  }
  frs = {
    "B_Buzz",
	"B_Bald",
	"P_Fauhawk_01",
	"P_Fauhawk_02",
	"P_Fauhawk_03",
	"P_Fauhawk_04",
	"P_Mh_Flat_01",
	"P_Mh_Flat_02",
	"P_Mh_Flat_03",
	"P_Mh_Flat_04",
	"P_Mh_Spike_01",
	"P_Mh_Spike_02",
	"P_Mh_Spike_03",
	"P_Mh_Spike_04",
	"P_Spiky_01",
	"P_Spiky_02",
	"P_Spiky_03",
	"P_Spiky_04",
	"P_Taper_01",
	"P_Taper_02",
	"P_Taper_03",
	"P_Taper_04",
	"P_Details1_01",
	"P_Details1_02",
	"P_Details1_03",
	"P_Details1_04",
	"P_Details2_01",
	"P_Details2_02",
	"P_Details2_03",
	"P_Details2_04",
	"R_GoodBoy_01",
	"R_GoodBoy_02",
	"R_GoodBoy_03",
	"R_GoodBoy_04",
	"R_SSmart_01",
	"R_SSmart_02",
	"R_SSmart_03",
	"R_SSmart_04",
	"R_Hwood_01",
	"R_Hwood_02",
	"R_Hwood_03",
	"R_Hwood_04",
	"R_HThrob_01",
	"R_HThrob_02",
	"R_HThrob_03",
	"R_HThrob_04",
	"R_ILeague_01",
	"R_ILeague_02",
	"R_ILeague_03",
	"R_ILeague_04",
	"R_SShag_01",
	"R_SShag_02",
	"R_SShag_03",
	"R_SShag_04",
	"B_Caesar_01",
	"B_Caesar_02",
	"B_Caesar_03",
	"B_Caesar_04",
	"B_CrewCut_01",
	"B_CrewCut_02",
	"B_CrewCut_03",
	"B_CrewCut_04",
	"B_FlatTop_01",
	"B_FlatTop_02",
	"B_FlatTop_03",
	"B_FlatTop_04",
	"B_MFade_01",
	"B_MFade_02",
	"B_MFade_03",
	"B_MFade_04",
  }
end

size = table.getn

function S_NewMenuSystem()
  NewSetupATZ = {}
  local NS = NewSetupATZ
  table.insert(NS,{"MODEL",ATZ_Model})
  table.insert(NS,{"STYLE",ATZ_Style})
  table.insert(NS,{"WEATHER",ATZ_Weather})
  table.insert(NS,{"CHAPTER",ATZ_Chapter})
  table.insert(NS,{"TIME",ATZ_Time})
  table.insert(NS,{"WEAPON",ATZ_Weapon})
  table.insert(NS,{"RESPECT",ATZ_Respect})
  table.insert(NS,{"MISSION",ATZ_Mission})
  table.insert(NS,{"MINI GAME",ATZ_MGame})
  table.insert(NS,{"CLASS",ATZ_Class})
  table.insert(NS,{"GRADE",ATZ_Grade})
  table.insert(NS,{"VEHICLE",ATZ_Vehicle})
  table.insert(NS,{"MUSIC",ATZ_Music})
  table.insert(NS,{"ANIMATION",ATZ_Anim})
  table.insert(NS,{"STRAFE",ATZ_Strafe})
  table.insert(NS,{"SPEED",ATZ_Speed})
  table.insert(NS,{"OUTFIT",ATZ_Outfit})
  table.insert(NS,{"CLOTHES",ATZ_Clothes})
  table.insert(NS,{"HAIRCUT",ATZ_Hair})
  table.insert(NS,{"AREA",ATZ_Area})
  table.insert(NS,{"PED",ATZ_Ped})
  table.insert(NS,{"PROP ",ATZ_Prop})
  table.insert(NS,{"HEALTH",ATZ_Health})
  table.insert(NS,{"PUNISHMENT",ATZ_Punishment})
  table.insert(NS,{"PICKUP",ATZ_Pickups})
  table.insert(NS,{"MONEY",ATZ_Money})
  table.insert(NS,{"EFFECT",ATZ_Effect})
  table.insert(NS,{"SPEECH",ATZ_Speech})
  table.insert(NS,{"CUTSCENE",ATZ_Cuts})
  table.insert(NS,{"ITEM",ATZ_Items})
  table.insert(NS,{"FACTION",ATZ_Factions})
  table.insert(NS,{"OTHERS MOD",ATZ_Another})
  table.insert(NS,{"CONFIGURATIONS",ATZ_Config})
  table.insert(NS,{"RESTART MOD",F_main})
end

function S_SetupTable() -- Menu Tables
  select = 1
  SetupATZ = {}
  table.insert(SetupATZ,{"1.MODEL SELECTOR",ATZ_Model})
  table.insert(SetupATZ,{"2.STYLE SELECTOR",ATZ_Style})
  table.insert(SetupATZ,{"3.WEATHER SELECTOR",ATZ_Weather})
  table.insert(SetupATZ,{"4.CHAPTER SELECTOR",ATZ_Chapter})
  table.insert(SetupATZ,{"5.TIME SELECTOR",ATZ_Time})
  table.insert(SetupATZ,{"6.WEAPON SELECTOR",ATZ_Weapon})
  table.insert(SetupATZ,{"7.RESPECT SELECTOR",ATZ_Respect})
  table.insert(SetupATZ,{"8.MISSION SELECTOR",ATZ_Mission})
  table.insert(SetupATZ,{"9.M-GAME SELECTOR",ATZ_MGame})
  table.insert(SetupATZ,{"10.CLASS SELECTOR",ATZ_Class})
  table.insert(SetupATZ,{"11.GRADE SELECTOR",ATZ_Grade})
  table.insert(SetupATZ,{"12.VEHICLE SELECTOR",ATZ_Vehicle})
  table.insert(SetupATZ,{"13.MUSIC SELECTOR",ATZ_Music})
  table.insert(SetupATZ,{"14.ANIM SELECTOR",ATZ_Anim})
  table.insert(SetupATZ,{"15.STRAFE SELECTOR",ATZ_Strafe})
  table.insert(SetupATZ,{"16.SPEED SELECTOR",ATZ_Speed})
  table.insert(SetupATZ,{"17.OUTFIT SELECTOR",ATZ_Outfit})
  table.insert(SetupATZ,{"18.CLOTHES SELECTOR",ATZ_Clothes})
  table.insert(SetupATZ,{"19.HAIR SELECTOR",ATZ_Hair})
  table.insert(SetupATZ,{"20.AREA SELECTOR",ATZ_Area})
  table.insert(SetupATZ,{"21.PED SELECTOR",ATZ_Ped})
  table.insert(SetupATZ,{"22.PROP SELECTOR",ATZ_Prop})
  table.insert(SetupATZ,{"23.HEALTH SELECTOR",ATZ_Health})
  table.insert(SetupATZ,{"24.PUNISHMENT SELECTOR",ATZ_Punishment})
  table.insert(SetupATZ,{"25.PICKUP SELECTOR",ATZ_Pickups})
  table.insert(SetupATZ,{"26.MONEY SELECTOR",ATZ_Money})
  table.insert(SetupATZ,{"27.EFFECT SELECTOR",ATZ_Effect})
  table.insert(SetupATZ,{"28.SPEECH SELECTOR",ATZ_Speech})
  table.insert(SetupATZ,{"29.CUTS SELECTOR",ATZ_Cuts})
  table.insert(SetupATZ,{"30.ITEM SELECTOR",ATZ_Items})
  table.insert(SetupATZ,{"31.FACTION SELECTOR",ATZ_Factions})
  table.insert(SetupATZ,{"OTHERS MOD",ATZ_Another})
  table.insert(SetupATZ,{"CONFIGURATIONS",ATZ_Config})
  table.insert(SetupATZ,{"RESTART MOD",F_main})
end

function S_ClassEditor()
  classEditor = {
    {"1.MATH Class Timer",MCT},
    {"2.BIO Class Timer",BCT},
    {"3.ENG Class Timer",ECT},
    {"4.GEO Class Timer",GCT},
    {"5.ART Brush Speed",ACPS},
    {"6.ART Enemy Speed",ACME},
	{"7.ART Exploder TimeOut",AET},
	{"8.ART Exploder Debris",AED},
	{"9.ART PwUp Clear Radius",ACR},
  }
end

function S_SetupVehicleFinder()
  vfs = {
	{"275"					,"1.Cop Bike"},
	{"276"			,"2.Scooter"},
	{"277"			,"3.Red BMX"},
	{"278"			,"4.Blue BMX"},
	{"279"				,"5.Bicycle"},
	{"280"				,"6.Mountain Bike"},
	{"281"				,"7.Old Bike"},
	{"282"				,"8.Racer"},
	{"283"				,"9.Aquaberry Bike"},
	{"284"			,"10.Mower"},
	{"286"				,"11.Taxi"},
	{"288"					,"12.Dozer"},
	{"289"				,"13.Go Kart"},
	{"290"				,"14.Limo"},
	{"291"					,"15.Delivery Truck"},
	{"292"				,"16.Foreign Car"},
	{"293"				,"17.Regular Car"},
	{"294"				,"18.70 Wagon"},
	{"295"					,"19.Police Car"},
	{"296"				,"20.Domestic Car"},
	{"297"				,"21.Truck"},
	{"298"					,"22.Arcade 1"},
	{"287"				,"22.Arcade 2"},
	{"285"				,"23.Arcade 3"},
  }
end

function S_SetupItem()
  its = {
	{475					,"1.Flower"},
	{478			,"2.Choc Box"},
	{479			,"3.Admis Ticket"},
	{480			,"4.HEM-O Key Card"},
	{494				,"5.Tad House Key"},
	{510				,"6.Orderly Uniform"},
	{515				,"7.Panties"},
	{521				,"8.Package"},
	{523				,"9.Crab"},
	{524			,"10.Algie Jacket"},
	{526				,"11.Photos"},
	{493				,"12.Harrington House Key"},
	{488					,"13.Lab Notes"},
	{477				,"14.Paper Stack"},
	{476				,"15.Radio"},
	{474					,"15.G&G Card"},
	{500				,"16.Rubber Band"},
	{487				,"17.Bolt Cutter"},
	{483				,"18.Beatrice Diary"},
	{490				,"19.Perfume"},
	{522				,"20.Drug Bottle"},
	{492				,"21.Sex Dress"},
  }
end

function S_SetupCutscene()
  cuts = {
"1-01", -- UN-USED
"1-02",
"1-02B",
--"1-02C",
"1-02D",
"1-02E",
"1-03",
"1-04",
"1-05",
"1-06",
"1-06B",
"1-07",
"1-08",
--"1-08B",
"1-09",
--"1-09B",
--"1-1",
"1-10",
--"1-1-02",
"1-1-1",
"1-11",
"1-1-2",
"1-B",
"1-BB",
"1-BC",
"1-G1",
"1-S01",
"2-0",
"2-01",
"2-02",
"2-03",
--"2-03B",
"2-04",
--"2-04B",
"2-05",
"2-06",
"2-07",
"2-08",
"2-09",
--"2-09A",
"2-09B",
"2-B",
"2-BB",
"2-G2",
"2-S02",
"2-S04",
"2-S05",
"2-S05",
--"2-S0B",
--"2-S0C",
"2-S06",
"2-S07",
"3-0",
"3-01",
"3-01AA",
"3-01AB",
"3-01BA",
--"3-01BB",
"3-01CA",
"3-01CB",
"3-01DA",
"3-01DB",
"3-01DC",
"3-02",
"3-03",
"3-04",
"3-04B",
"3-05",
"3-06",
"3-B",
"3-BB",
"3-BC", -- UN-USED
"3-BD",
"3-G3",
--"3-R05",
"3-R05A",
"3-R05B",
"3-R07",
"3-S03",
"3-S08",
"3-S10",
"3-S11",
"3-S11C",
"4-0",
"4-01",
"4-02",
"4-03",
"4-04",
"4-05",
"4-06",
"4-B1",
"4-B1B", -- UN-USED
"4-B1C", -- UN-USED
--"4-B1C2",
"4-B1D",
"4-B2",
"4-B2B",
"4-G4",
--"4-S11",
"4-S12",
"4-S12B",
"5-0",
"5-01",
"5-02",
"5-02B",
"5-03",
"5-04",
"5-05",
"5-05B",
"5-06",
"5-07",
"5-09",
"5-09B",
"5-B", -- UN-USED
"5-BC",
"5-G5",
"6-0",
"6-02",
"6-02B", -- UN-USED
"6-B",
--"6-B2",
"6-BB",
"6-BC",
  }
end

function S_SetupProp()
  xfs = {
	"Armor",
	"PortaPoo",
	"DPE_Fraffy",
	"DPE_Snowman",
	"GarbCanA",
	"DPE_Rubble",
	"WPCannon",
	"DPE_GnomeA",
	"BarrGate",
	"DPE_Dumpster",
	"DPE_BenchA",
	"DPE_BenchB",
	"DPE_BenchC",
	"DPE_BSign",
	"DPE_BSignB",
	"DPE_BTable",
	"DPE_BusStop",
	"DPE_FlowersA",
	"DPE_FlowersB",
	"DPE_GarbStuffB",
	"FortTell",
	"pxArc3DS",
	"ScGate",
	"FGhost",
	"AniGlobe",
	"PaperStack",
	"sc_HalloweenSkel",
	"Ferris",
	"BU_Dozer",
	"Chapter3Baracade",
	"Chapter5Baracade",
	"InBaracadeBarge",
	"inBarricade01",
	"inBarricade02",
	"scBaracadeFence01",
	"bs_BarricadeTree",
	"bu_ContainerA13",
	"CA1b_walls05",
	"Coaster",
	"Scaffold",
	"Squid",
  }
end

function S_Stats()
  pgo = {
    {"7","Yelling"},
	{"16","Sprint Metter"},
	{"12","Block freq"},
	{"13","Evade freq"},
	{"8","Attack freq"},
	{"14","Aggresion"},
	{"18","Combat Zone"},
	{"31","Damage Scale"},
	{"5","Health regen"},
  }
end

function S_SetupMovement()
  smo = {
    "DEFAULT",
    "B_Striker_A",
	"Authority",
	"LE_Orderly_A",
	"BOSS_Darby",
	"BOSS_Russell",
	"Crazy_Basic",
	"CV_Drunk",
	"CV_Female_A",
	"CV_Male_A",
	"CV_OLD",
	"DO_Edgar",
	"DO_Striker_A",
	"DO_Melee_A",
	"DO_Grappler_A",
	"G_Johnny",
	"G_Striker_A",
	"G_Melee_A",
	"G_Ranged_A",
	"G_Grappler_A",
	"GS_Fat_A",
	"GS_Female_A",
	"GS_Male_A",
	"J_Ted",
	"J_Damon",
	"J_Striker_A",
	"J_Melee_A",
	"J_Grappler_A",
	"J_Mascot",
	"N_Earnest",
	"N_Striker_A",
	"N_Striker_B",
	"N_Ranged_A",
	"Nemesis",
	"P_Bif",
	"P_Striker_A",
	"P_Striker_B",
	"P_Grappler_A",
	"Russell_102",
	"TE_Female_A",
	"TE_Secretary",
  }
end

function S_Settings() -- Configuration menu
  SettingSelect = 1
  SettingATZ = {
	"1.Target Select",
	"2.Freeze Time",
	"3.Infinite Health",
	"4.No Punishment",
	"5.Infinite Ammo",
	"6.Infinite Money",
	"7.Instant Kill",
	"8.Delete All Peds",
	"9.Knockout",
	"10.Gravity Player",
	"11.Invisibility",
	"12.Infinite Timer",
	"13.Collectible HUD",
	"14.Infinite Tickets",
	"15.Game Speed Effect",
	"16.Girlfriends",
	"17.Boyfriends",
	"18.Control Player",
	"19.Show Navigate Text",
	"20.Main Menu style",
	"21.Hiding Menu",
	"22.Fix Broken Model",
	"23.Skip Cutscene",
  }
end

function HidingMenuSetup()
  menu = {
    "MANUAL",
	"AUTO"
  }
end

function S_SetupStrafe()
  sts = {
    {"Player Uppercut","/Global/Player/Attacks/Strikes/LightAttacks/Left1/Release/HeavyAttacks","act/anim/Player.act"},
    {"Player Leg Kick","/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Release/Unblockable/LegKickReleaseMax","act/anim/Player.act"},
	{"Player Jackie Kick","/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Release/Unblockable/JackieKick","act/anim/Player.act"},
	{"Player Roundhouse Kick","/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Release/Unblockable/HighKick","act/anim/Player.act"},
	{"Player Overhead Punch","/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Left5/Release/Unblockable","act/anim/Player.act"},
	{"Player Ground Kick","/Global/Player/Attacks/GroundAttacks/GroundAttacks/Strikes/HeavyAttacks/GroundKick","act/anim/Player.act"},
	{"Player JAB","/Global/Player/Attacks/Strikes/LightAttacks/Left1/Release/JAB","act/anim/Player.act"},
	{"Player Cross","/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Release/Cross","act/anim/Player.act"},
	{"Player Hook","/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Release/Hook","act/anim/Player.act"},
	{"Player Gut Punch","/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Release/GutPunch","act/anim/Player.act"},
	{"Player Last Uppercut","/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Left5/Release/UpperCut","act/anim/Player.act"},
    {"BOSS_Darby 6 Hit + Finisher","/Global/BOSS_Darby/Offense/Short/Grapples/HeavyAttacks/Catch_Throw","Act/Anim/BOSS_Darby.act"},
    {"BOSS_Darby Unblockable","/Global/BOSS_Darby/Offense/Short/Strikes/Unblockable/HeavyPunchCharge/HeavyPunch","act/anim/BOSS_Darby.act"},
	{"BOSS_Darby Hopback","/Global/BOSS_Darby/Offense/NonCombatActions/Hopback","Act/Anim/BOSS_Darby.act"},
	{"BOSS_Darby Left JAB","/Global/BOSS_Darby/Offense/Short/Strikes/LightAttacks/LeftJab","Act/Anim/BOSS_Darby.act"},
	{"BOSS_Darby Left Hook","/Global/BOSS_Darby/Offense/Short/Strikes/LightAttacks/LeftHook","Act/Anim/BOSS_Darby.act"},
	{"BOSS_Darby Duck Evade","/Global/BOSS_Darby/Defense/Short/Evade/EvadeDuck","act/anim/BOSS_Darby.act"},
	{"BOSS_Darby Right Evade","/Global/BOSS_Darby/Defense/Short/Evade/EvadeRight","act/anim/BOSS_Darby.act"},
	{"BOSS_Darby Left Evade","/Global/BOSS_Darby/Defense/Short/Evade/EvadeLeft","act/anim/BOSS_Darby.act"},
	{"BOSS_Darby Duck Evade Counter","/Global/BOSS_Darby/Defense/Evade/EvadeDuck/HeavyAttacks/EvadeDuckPunch","act/anim/BOSS_Darby.act"},
	{"BOSS_Darby Right Evade Counter","/Global/BOSS_Darby/Defense/Evade/EvadeLeft/HeavyAttacks/EvadeRightPunch","act/anim/BOSS_Darby.act"},
	{"BOSS_Darby Left Evade Counter","/Global/BOSS_Darby/Defense/Evade/EvadeRight/HeavyAttacks/EvadeLeftPunch","act/anim/BOSS_Darby.act"},
	{"BOSS_Darby Block","/Global/BOSS_Darby/Defense/Block/Block/BlockHits","act/anim/BOSS_Darby.act"},
	{"BOSS_Darby 3 Evades + Counter","/Global/BOSS_Darby/Defense","act/anim/BOSS_Darby.act"},
	{"BOSS_Darby Block Hits","/Global/BOSS_Darby/Offense/Short/Strikes/HeavyAttacks/Unblockable/HeavyPunchCharge/SuperUppercut/StraightPunch/Actions/Lid_Blocks/BlockHits", "Act/Anim/BOSS_Darby.act"},
	{"BOSS_Darby Chase Uppercut","/Global/BOSS_Darby/Offense/Special/Dash/Dash/Uppercut/ShortDarby","act/anim/BOSS_Darby.act"},
	{"BOSS Russell Overhand","/Global/BOSS_Russell/Offense/Short/Strikes/LightAttacks/OverHand","act/anim/BOSS_Russell.act"},
	{"BOSS Russell Ground Stomp","/Global/BOSS_Russell/Offense/GroundAttack/GroundStomp1","act/anim/BOSS_Russell.act"},
	{"BOSS Russell Power Bomb","/Global/Actions/Grapples/Front/Grapples/GrappleMoves/PowerBomb","Globals/BOSS_Russell.act"},
	{"BOSS Russell Barserk Grapple","/Global/BOSS_Russell/Offense/Special/Invincible/BarserkGrapple","act/anim/BOSS_Russell.act"},
	{"BOSS Russell Double Axe Handle","/Global/BOSS_Russell/Offense/Medium/Strikes/Unblockable/DoubleAxeHandle", "act/anim/BOSS_Russell.act"},
	{"BOXING Duck Evade","/Global/BoxingPlayer/EvadeBank/Evades/Duck","act/anim/BoxingPlayer.act"},
	{"BOXING Left Evade","/Global/BoxingPlayer/EvadeBank/Evades/Left","act/anim/BoxingPlayer.act"},
	{"BOXING Right Evade","/Global/BoxingPlayer/EvadeBank/Evades/Right","act/anim/BoxingPlayer.act"},
	{"BOXING Duck Evade Counter","/Global/BoxingPlayer/EvadeBank/Evades/EvadeAttacks/BackCharge","act/anim/BoxingPlayer.act"},
	{"G_Grappler_A Right Hook","/Global/G_Grappler_A/Offense/Short/Strikes/HeavyAttacks/RightHook","Globals/G_Grappler_A.act"},
	{"G_Grappler_A BearHug","/Global/Actions/Grapples/Front/Grapples/GrappleMoves/BearHug","Globals/G_Grappler_A.act"},
	{"G_Grappler_A Boot kick","/Global/G_Grappler_A/Offense/Short/Strikes/HeavyAttacks/BootKick","act/anim/G_Grappler_A.act"},
	{"G_Johnny Haymaker","/Global/G_Johnny/Offense/Special/SpecialActions/Grapples/Dash","Act/Anim/G_Johnny.act"},
	{"G_Johnny Combo","/Global/G_Johnny/Offense","Act/Anim/G_Johnny.act"},
	{"G_Johnny Special Haymaker","/Global/G_Johnny/Cinematic/ThroatGrab","act/anim/G_Johnny.act"},
	{"G_Johnny Grabknees","/Global/G_Johnny/Offense/Short/Strikes/HeavyKick/HeavyKick/Grabknees/GV","act/anim/G_Johnny.act"},
	{"G_Melee_A Right Hook","/Global/G_Melee_A/Offense/Short/Strikes/LightAttacks/RightHook", "act/anim/G_Melee_A.act"},
	{"G_Melee_A Left Hook","/Global/G_Melee_A/Offense/Short/Strikes/LightAttacks/RightHook/LeftHook","act/anim/G_Melee_A.act"},
	{"G_Melee_A Finisher","/Global/G_Melee_A/Offense/Short/Strikes/LightAttacks/RightHook/LeftHook/RightStomach","act/anim/G_Melee_A.act"},
	{"G_Melee_A Groundpunch","/Global/G_Melee_A/Offense/GroundAttack/GroundPunch","act/anim/G_Melee_A.act"},
	{"G_Melee_A Grabknees","/Global/Actions/Grapples/Front/Grapples/GrappleOpps/Melee/Greaser/GrabKnees/GV","Globals/G_Melee_A.act"},
	{"G_Melee_A Dash Punch Taunt","/Global/G_Melee_A/Offense/Taunts/Taunt_B","act/anim/G_Melee_A.act"},
	{"G_Melee_A Inverted Roundhouse","/Global/G_Melee_A/Offense/Medium/Strikes/HeavyAttacks/HeavyKick","act/anim/G_Melee_A.act"},
	{"G_Striker_A Right Hook","/Global/G_Striker_A/Offense/Short/Strikes/LightAttacks/RightHook","act/anim/G_Striker_A.act"},
	{"G_Striker_A Left Hook","/Global/G_Striker_A/Offense/Short/Strikes/LightAttacks/RightHook/LeftHook","act/anim/G_Striker_A.act"},
	{"G_Striker_A Right Hook 2","/Global/G_Striker_A/Offense/Short/Strikes/LightAttacks/RightHook/LeftHook/RightHook","act/anim/G_Striker_A.act"},
	{"G_Striker_A Groundpunch","/Global/G_Striker_A/Offense/GroundAttack/GroundPunch","Act/Anim/G_Striker_A.act"},
	{"G_Striker_A Kick Thrust","/Global/G_Striker_A/Offense/Medium/Strikes/HeavyAttack/KickThrust","Act/Anim/G_Striker_A.act"},
	{"G_Striker_A Rissing Attacks","/Global/Actions/RisingAttacks/HeavyAttacks/RisingAttacks","Globals/G_Striker_A.act"},
	{"G_Striker_A Grabknees","/Global/G_Striker_A/Offense/Short/Strikes/HeavyAttacks/HeavyKick/GrabKnees","act/anim/G_Striker_A.act"},
	{"G_Striker_A Heavy Knee","/Global/G_Striker_A/Offense/Short/Strikes/HeavyAttacks/HeavyKnee","Act/Anim/G_Striker_A.act"},
	{"G_Striker_A 3 Punch Taunt","/Global/G_Striker_A/Offense/Taunts/Taunt_A","act/anim/G_Striker_A.act"},
	{"G_Striker_A Hop Kick taunt","/Global/G_Striker_A/Offense/Taunts/Taunt_B","act/anim/G_Striker_A.act"},
	{"J_Grappler_A Back Breaker","/Global/Actions/Grapples/Front/Grapples/GrappleMoves/BackBreaker","Globals/J_Grappler_A.act"},
	{"J_Grappler_A Body Slam","/Global/Actions/Grapples/Front/Grapples/GrappleMoves/BodySlam","Globals/J_Grappler_A.act"},
	{"J_Damon Throwing Ped","/Global/J_Damon/Offense/Medium/Grapples/GrapplesAttempt/TakeDown","act/anim/J_Damon.act"},
	{"J_Damon Running Grab","/Global/J_Damon/Offense/SpecialStart/StartRun","act/anim/J_Damon.act"},
	{"Nemesis Left Hook","/Global/Nemesis/Offense/Short/Strikes/LightAttacks/LeftHook","Act/Anim/Nemesis.act"},
	{"Nemesis Right Cross","/Global/Nemesis/Offense/Short/Strikes/LightAttacks/LeftHook/RightCross","Act/Anim/Nemesis.act"},
	{"Nemesis Heavy Attacks","/Global/Nemesis/Offense/Short/Strikes/LightAttacks/LeftHook/RightCross/HeavyAttacks","Act/Anim/Nemesis.act"},
	{"Nemesis Heavy Punch","/Global/Nemesis/Offense/Short/Strikes/HeavyAttacks/HeavyPunch1","Act/Anim/Nemesis.act"},
	{"Nemesis JAB","/Global/Nemesis/Offense/Short/Strikes/LightAttacks/JAB", "Act/Anim/Nemesis.act"},
	{"Nemesis Super Uppercut","/Global/Nemesis/Offense/Short/Strikes/LightAttacks/JAB/HeavyAttacks/SuperUppercut", "Act/Anim/Nemesis.act"},
	{"Nemesis Knee","/Global/Nemesis/Offense/Short/Strikes/LightAttacks/JAB/HeavyAttacks/SuperUppercut/Knee", "Act/Anim/Nemesis.act"},
	{"Nemesis Light Attacks","/Global/Nemesis/Offense/Short/Strikes/LightAttacks","Act/Anim/Nemesis.act"},
	{"Nemesis Gut kick","/Global/Nemesis/Offense/Medium/Strikes/HeavyAttacks/JackieKick","Act/Anim/Nemesis.act"},
	{"Nemesis Rooftop Grab","/Global/Nemesis/Special/GarySpecialGrapple","Act/Anim/Nemesis.act"},
	{"Nemesis 3 Weak Punch","/Global/Nemesis/Offense/Short/Strikes/ShortAttacks" ,"Act/Anim/Nemesis.act"},
	{"Nemesis Gut punch + knee","/Global/Nemesis/Offense/Medium/Strikes/ShortAttacks" ,"Act/Anim/Nemesis.act"},
  }
end

function S_SetupAnim()
  bns = {
    {"Reset Animation","/Global","Act/Globals.act"},
    {"Punch hands","/Global/1_01/PunchHands","Act/Conv/1_01.act"},
	{"Short idle","/Global/1_01/ShortIdle","Act/Conv/1_01.act"},
	{"Talking (1_01)","/Global/1_01/Talking","Act/Conv/1_01.act"},
	{"Wave to sec","/Global/1_01/WaveToSec","Act/Conv/1_01.act"},
	{"Idle Fight","/Global/1_02/IdleFight/SimpleIdle","Act/Conv/1_02.act"},
	{"Meet Russell 1","/Global/1_02/NIS/MeetRussell/Bullies/Bullies","Act/Conv/1_02.act"},
	{"Hattrick","/Global/1_02/NIS/MeetRussell/Hattrick/BLANK","Act/Conv/1_02.act"},
	{"Hattrick 01","/Global/1_02/NIS/MeetRussell/Hattrick/Hattrick01","Act/Conv/1_02.act"},
	{"Jimmy 01","/Global/1_02/NIS/MeetRussell/Jimmy/Jimmy01","Act/Conv/1_02.act"},
	{"Jimmy 02","/Global/1_02/NIS/MeetRussell/Jimmy/Jimmy02","Act/Conv/1_02.act"},
	{"Russell 01","/Global/1_02/NIS/MeetRussell/Russell/Russell01","Act/Conv/1_02.act"},
	{"Russell 02","/Global/1_02/NIS/MeetRussell/Russell/Russell02","Act/Conv/1_02.act"},
	{"Player Bullies","/Global/1_02/NIS/PLAYER_BULLIES/PLAYER01","Act/Conv/1_02.act"},
	{"Point at player","/Global/1_02/PointAtPlayer","Act/Conv/1_02.act"},
	{"Point at russell","/Global/1_02/PointAtRussel","Act/Conv/1_02.act"},
	{"Push player","/Global/1_02/PushPlayer/GrappleSuccess/Yay/AttackIdle","Act/Conv/1_02.act"},
	{"Sec idle","/Global/1_02/SecIdle","Act/Conv/1_02.act"},
	{"Sec Start","/Global/1_02/SecStart","Act/Conv/1_02.act"},
	{"Short Idle (1_02)","/Global/1_02/ShortIdle","Act/Conv/1_02.act"},
	{"Sit on wall","/Global/1_02/SitOnWall","Act/Conv/1_02.act"},
	{"Talking (1_02)","/Global/1_02/Talking/Talk","Act/Conv/1_02.act"},
  }
end

function S_SetupPedFinder()
  pfs = {
	{name = "Jimmy"				,style = "Player"},
	{name = "Zoe"				,style = "GS_Female_A"},
	{name = "Beatrice"			,style = "GS_Female_A"},
	{name = "Algernon"			,style = "N_Striker_B"},
	{name = "Fatty"				,style = "N_Striker_A"},
	{name = "Melvin"			,style = "N_Striker_A"},
	{name = "Thad"				,style = "N_Ranged_A"},
	{name = "Bucky"				,style = "N_Ranged_A"},
	{name = "Cornelius"			,style = "N_Ranged_A"},
	{name = "Earnest"			,style = "N_Ranged_A"},
	{name = "Donald"			,style = "N_Ranged_A"},
	{name = "Damon"				,style = "J_Striker_A"},
	{name = "Kirby"				,style = "J_Striker_A"},
	{name = "Mandy"				,style = "GS_Female_A"},
	{name = "Dan"				,style = "J_Striker_A"},
	{name = "Luis"				,style = "J_Grappler_A"},
	{name = "Casey"				,style = "J_Melee_A"},
	{name = "Bo"				,style = "J_Melee_A"},
	{name = "Ted"				,style = "J_Striker_A"},
	{name = "Juri"				,style = "J_Grappler_A"},
	{name = "Peanut"			,style = "G_Striker_A"},
	{name = "Hal"				,style = "G_Grappler_A"},
	{name = "Johnny"			,style = "G_Striker_A"},
	{name = "Lefty"				,style = "G_Melee_A"},
	{name = "Lola"				,style = "GS_Female_A"},
	{name = "Lucky"				,style = "G_Striker_A"},
	{name = "Vance"				,style = "G_Melee_A"},
	{name = "Ricky"				,style = "G_Striker_A"},
	{name = "Norton"			,style = "G_Grappler_A"},
	{name = "Gord"				,style = "P_Striker_A"},
	{name = "Tad"				,style = "P_Striker_A"},
	{name = "Chad"				,style = "P_Grappler_A"},
	{name = "Bif"				,style = "P_Striker_A"},
	{name = "Justin"			,style = "P_Striker_B"},
	{name = "Bryce"				,style = "P_Grappler_A"},
	{name = "Bryce"				,style = "P_Striker_A"},
	{name = "Darby"				,style = "P_Striker_A"},
	{name = "Pinky"				,style = "GS_Female_A"},
	{name = "Angie"				,style = "GS_Female_A"},
	{name = "Parker"			,style = "P_Striker_B"},
	{name = "Jerry"				,style = "DO_Grappler_A"},
	{name = "Otto"				,style = "DO_Striker_A"},
	{name = "Leon"				,style = "DO_Striker_A"},
	{name = "Duncan"			,style = "DO_Striker_A"},
	{name = "Henry"				,style = "DO_Grappler_A"},
	{name = "Gurney"			,style = "DO_Grappler_A"},
	{name = "Omar"				,style = "DO_Striker_A"},
	{name = "Zoe"				,style = "GS_Female_A"},
	{name = "Max"				,style = "Authority"},
	{name = "Seth"				,style = "Authority"},
	{name = "Edward"			,style = "Authority"},
	{name = "Karl"				,style = "Authority"},
	{name = "Sheldon"			,style = "GS_Male_A"},
	{name = "Christy"			,style = "GS_Female_A"},
	{name = "Gloria"			,style = "GS_Female_A"},
	{name = "Pedro"				,style = "GS_Male_A"},
	{name = "Constantinos"		,style = "GS_Male_A"},
	{name = "Ray"				,style = "GS_Fat_A"},
	{name = "Ivan"				,style = "GS_Male_A"},
	{name = "Trevor"			,style = "GS_Male_A"},
	{name = "Eunice"			,style = "GS_Fat_A"},
	{name = "Russell"			,style = "B_Striker_A"},
	{name = "Trent"				,style = "B_Striker_A"},
	{name = "Christy"			,style = "GS_Female_A"},
	{name = "Edgar"				,style = "DO_Striker_A"},
  }
end

function S_SetupActionNodeFinder()
  animations = {
"0",
"05",
"0_BLOCK_0",
"1_01",
"1_02",
"1_02B",
"1_02BYourSchool",
"1_03",
"1_03_Davis",
"1_04",
"1_04_ClearActions",
"1_05",
"1_06",
"1_06_Give",
"1_07",
"1_08",
"1_08_Beatrice",
"1_08_Fatty",
"1_08_Give",
"1_08_GiveNotes",
"1_08_Idle",
"1_08_LookAround",
"1_08_MandyCollpase",
"1_08_Nerdo",
"1_08_NerdoNoCake",
"1_08_NerdoYesCake",
"1_08_Prefect",
"1_08_RollDice",
"1_09",
"1_10_anims",
"1_11X1",
"1_11X2",
"1_B_ScriptCall",
"1_G1",
"1_S01",
"1_S01_Bathroom",
"1_S01_Bathroom_Loop",
"1_S01_Stand_Talking",
"20",
"2_01",
"2_02_Owner",
"2_03Cnv",
"2_03i",
"2_04_Conv",
"2_05",
"2_06",
"2_06_Go",
"2_07",
"2_07_Gord",
"2_08Conv",
"2_08WeedKiller",
"2_B",
"2_G2",
"2_G2_Anims",
"2_R03_Conv",
"2_S04",
"2_S05",
"2_S06",
"3B_JohnnyVincent",
"3_01",
"3_01A",
"3_01C",
"3_01D",
"3_02",
"3_02_Bait",
"3_03",
"3_04",
"3_04_Anim",
"3_04_End",
"3_05",
"3_05TheTenements",
"3_06",
"3_08",
"3_09",
"3_B",
"3_G3",
"3_G3_Conv",
"3_R09",
"3_S03",
"3_S03_Givebottle",
"3_S10",
"3_S10_Tags",
"3_S11",
"3_S11_O_P_Struggle",
"3_S11_O_Struggle_Break",
"3_S11_O_Struggle_Idle",
"3_S11_P_Struggle_Break",
"3_S11_P_Struggle_Idle",
"3_XM",
"404Conv",
"4ArmHi",
"4ArmLow",
"4_01",
"4_02",
"4_03",
"4_05",
"4_06",
"4_06_Glue",
"4_06_MarbledL",
"4_06_WaitForJim",
"4_06_Wizz",
"4_B1",
"4_B2",
"4_B2_Blank",
"4_B2_JockBossBattle",
"4_G4",
"4_G4_Hello",
"4_G4_Where",
"5",
"5_01",
"5_01_Empty",
"5_01_Librarian",
"5_01_PoisonEffect0",
"5_01_PoisonEffect1",
"5_01_PoisonEffect1cycle",
"5_01_PoisonEffect1intro",
"5_01_PoisonEffect1outro",
"5_01_PoisonEffect2",
"5_01_PoisonEffect2cycle",
"5_01_PoisonEffect2intro",
"5_01_PoisonEffect2outro",
"5_02",
"5_03",
"5_03_Crazy_Door",
"5_03_Johnny_In_Cell",
"5_03_NIS_Gateclose",
"5_03_NIS_Outro",
"5_03_Reset",
"5_03_Sleeping_Orderly",
"5_03_Sleeping_Orderly_To_Sleep",
"5_03_Sleeping_Orderly_Wake_Up",
"5_03_Stand_Talking",
"5_04",
"5_05",
"5_07a",
"5_09",
"5_09_Cityhall_Cut",
"5_B",
"5_G5",
"6_02",
"6_02GDORM",
"6_B",
"ABORT",
"Act",
"Action",
"Action1",
"Action2",
"Action3",
"Action4",
"ActionNode",
"ActionOpps",
"Actions",
"Action_Breakout",
"ActivateDoor",
"Active",
"AddRockets",
"AdjustGravity",
"Adult",
"AdultGrapple",
"Adult_Hold_escape",
"Adult_Takedown",
"Afternoon?",
"AGymLght",
"AI",
"Aim",
"AimIdle",
"AimOut",
"AirGrab",
"AirGrabGoofy",
"AirGrabRelease",
"AirGrabReleaseGoofy",
"AI_2_R03_HMB",
"AI_2_R03_MBP",
"AI_3_R05",
"AI_BOXER",
"AI_Dog",
"AI_EDGAR_5_B",
"AI_FightTutorial",
"AI_MASCOT_4_05",
"AI_Rat",
"AI_SitTest",
"Algie",
"Algie01",
"Algie03",
"AlgieCower",
"ALGIEJACCS",
"AlgieOhFace",
"Ali",
"AliGoofy",
"AliHigh",
"AliHighGoofy",
"AliSpeech",
"Ambient",
"Ambient2",
"Ambient3",
"AmbientActions",
"AmbientActions_Opp",
"AmbientActions_Tired",
"AmbientActions_VTired",
"AmbientDice",
"AmbientGift_FAIL",
"AmbientSpawn",
"Ambient_3",
"Ammo1",
"Ammo2",
"Ammo3",
"AmmoCheck",
"AnchoredToVehicle",
"Angry",
"AniBball",
"AniDice",
"Anim",
"AnimatedLadder",
"Animation",
"Animations",
"AnimLoadTrigger",
"Anims",
"Anims2",
"animstart1",
"animstart2",
"animstart3",
"animstart4",
"animstart5",
"animstart6",
"animstart7",
"animstart8",
"animstart9",
"any",
"AnyStruggle",
"AN_DOG",
"AN_RAT",
"Apology",
"Apple",
"Apple_Smash",
"ApplyTorch",
"Area_School",
"armDrivers",
"Arm_Lift",
"AssThrust",
"AsyBars",
"AsySwtch",
"AttachedEffect",
"AttachMarbles",
"AttachSign",
"AttachWeapon",
"AttackCheck",
"AttackIdle",
"Attacks",
"Attempt",
"ATTEMPTNODE",
"Authority",
"AutoFaceTarget",
"AutoFireCheck",
"AutoReversal",
"AutoReversalOpps",
"Axehandle",
"AxeKicks",
"AxeKick_Grap",
"AxeKick_Grap_GV",
"AxeKick_Grap_RCV",
"Back",
"BackBounceSmall",
"BACKBREAK",
"Backbreaker",
"BackGrabCrunch",
"BackPunch",
"BackUp",
"bagmrbls",
"BailOut",
"BailOutGoofy",
"Ball",
"Ball4",
"Banana",
"Bank",
"BarellLadder",
"Barf",
"BarksWhileRunning",
"BarUpHold",
"Base",
"baseball",
"BaseWithCollissionOn",
"Basketball",
"bat",
"baton",
"Bat_Break",
"bbagbottle",
"BBALL_21",
"BBALL_RESET",
"BBGun",
"BBrawl",
"Bearded",
"BeardedInit",
"BearHug",
"BearHugCyc",
"BearHugFinish",
"BeatriceFreakOut",
"BED_GET_OUT",
"begin",
"BeginWorkout",
"BeingLifted",
"BellyDown",
"BellyDownGetUp",
"BellyUp",
"BellyUpGetUp",
"BellyUpGetUpGetUp",
"BeScared",
"BiffKO",
"BigTag",
"BIKEGAR",
"BikeGeneralObjectives",
"Bikes",
"Billyclb",
"Blank",
"Block",
"BlockHits",
"Blocks",
"Block_Lite",
"bnk",
"Bodyfall",
"BODYSHOTDOWN",
"BODYSHOTUP",
"BodySlam",
"BodyslamReversal",
"BodyslamReversalOpps",
"Body_fall",
"Body_Getup",
"Body_Handle",
"Body_Slide",
"Body_Wrestle",
"BoltCutters",
"Bomb",
"BombInToilet",
"BonusHit",
"BookAttacks",
"BookHarass",
"Books",
"BookScatter",
"BOOOOOO",
"BootKick",
"BOSS_Darby",
"BOSS_Russell",
"Botch",
"BottleRocketFuse",
"BottleRocketTrail",
"BottleRocketTrigger",
"BounceLegsUp_L",
"BounceLegsUp_S",
"BounceSmall",
"Boxing",
"BoxingAttacks",
"BoxingBlocks",
"BoxingCheer",
"BoxingEnding",
"BoxingEnding1",
"BoxingEnding2",
"BoxingEnding3",
"BoxingEnding4",
"BoxingPlayer",
"BoxingSpecialKO",
"BoxingSpeicalKO",
"BoxingStun",
"Boxing_Blocks",
"Box_Punch",
"Bo_01",
"Bo_02",
"Brake",
"BrakeEnd",
"BrakeEndRelease",
"BrakeEnd_Pump",
"BrakeEnd_Pump2",
"BrakeEnd_PumpAlt",
"BrakeEnd_PumpAlt2",
"BrakeEnd_PumpGoofy",
"BrakeEnd_PumpGoofy2",
"BrakeEnd_PumpGoofyAlt",
"BrakeEnd_PumpGoofyAlt2",
"BrakeGoofyEnd",
"BrakeGoofyEndRelease",
"Break",
"BreakCyclicAnimation",
"BreakGive",
"BreakNode",
"BreakOff",
"BreakReceive",
"Break_GIVE",
"Break_RCV",
"Breathe",
"Breathe_Wait",
"brick",
"brocket",
"BROCKETLAUNCHER",
"BRSwitch",
"Btl_Rkt_DryFire",
"Btl_Rkt_Load01",
"Btl_Rkt_Load02",
"Btl_Rkt_Trig",
"Bucky",
"Bucky01",
"Bull",
"BullHoof",
"Bullies",
"Bully",
"Bully01",
"Bully02",
"BullyNerdTease",
"BullyTaunt",
"BullyWall_Smoke",
"BurnStim",
"BurtonIdle",
"BurtonPeeDance",
"BurtonReactions",
"BURTON_DODGE_007",
"BURTON_DODGE_011",
"Busted",
"BustedInvuln",
"BustedStatsBank",
"BustedStim",
"Button Successfully pressed",
"ButtPinch",
"ButtPinchComplete",
"ButtPinchSick",
"ButtPinchSickNode",
"B_Striker_A",
"B_Striker_B",
"C2_ArtClass",
"C31Strt",
"C4",
"C5",
"C6",
"C7",
"C8",
"C9",
"CafeteriaLady",
"Calf",
"Camera",
"CameraActions",
"Cameras",
"CamGroundShake",
"CAM_BUS_CLS",
"CanDump",
"candy",
"Cannon",
"CannonInteract",
"carnies",
"Carny",
"CarnyActions",
"CarnyBail",
"CarnyDunk",
"CarnyGame",
"CarnyHouse",
"Cars",
"Casey",
"Casey01",
"Casey02",
"CaseyWait",
"Casey_01",
"Catch",
"CatchBall",
"CatchMiss",
"CatchPaper",
"CatchReact",
"CatchSuccess",
"Catch_Throw",
"CCW",
"Celebrate",
"CelebrateA",
"CelebrateB",
"CelebrateD",
"CelebrateTrophy",
"Chad01",
"Chap5Trans",
"Chapter3Trans",
"Charge",
"ChargeJump",
"Charge_Pt2",
"Cheaters",
"CheckFrontHitCollision",
"check_deselect",
"Cheer",
"Cheer1",
"Cheerage",
"CheerCool06",
"CheerCool08",
"CheerCool2",
"CheerCycle",
"CheerGen08",
"CheerGen09",
"CheerGen3",
"CheerGirl06",
"CheerGirl07",
"CheerGirl11",
"CheerGirl2",
"CheerGirl3",
"Cheering",
"Cheering01",
"Cheering02",
"Cheering03",
"CheeringAINode",
"CheerLdr",
"Cheerleading",
"CheerNerd1",
"CheerNerd3",
"CheerNerd_03",
"CheerNerd_10",
"CheerPosh1",
"CheerPosh_01",
"CheerPosh_04",
"CheerRoutineA",
"CheerRoutineA_00",
"CheerRoutineA_01",
"CheerRoutineA_02",
"CheerRoutineA_03",
"CheerRoutineA_04",
"CheerRoutineA_05",
"CheerUpperBody",
"Cheer_Anims",
"Cheer_Cool",
"Cheer_Cool1",
"Cheer_Cool2",
"Cheer_Cool3",
"Cheer_Cool_11",
"Cheer_Cool_12",
"Cheer_Cool_13",
"Cheer_Cool_14",
"Cheer_Gen",
"Cheer_Gen1",
"Cheer_Gen2",
"Cheer_Gen3",
"Cheer_Girl",
"Cheer_Girl1",
"Cheer_Girl2",
"Cheer_Girl3",
"Cheer_Girl4",
"Cheer_MsPhillips",
"Cheer_MsPhillips01",
"Cheer_Nerd",
"Cheer_Nerd1",
"Cheer_Nerd2",
"Cheer_Nerd3",
"Cheer_Posh",
"Cheer_Posh1",
"Cheer_Posh2",
"Cheer_Posh3",
"Cheer_Static",
"cherryb",
"CherryBomb",
"ChewIn",
"CHEW_START_T",
"ChickenS",
"ChickenWarn",
"ChLeadIdle04",
"ChLeadIdle05",
"CHSHIELDA",
"CHSHIELDB",
"CHShieldC",
"Cigarette",
"CigExhale",
"CigSmoke",
"Cinematic",
"Circle",
"CityHallTag",
"class!",
"Clav",
"CleanedUp",
"CleanMedTag",
"Clear",
"ClearNode",
"ClearObjective",
"Client_3_R05",
"Climb_ON_BOT",
"Close",
"Close5_03",
"CloseBreak",
"Closed",
"ClosedIdle",
"CloseDoor",
"CloseGate",
"CloseToEnd",
"CloseToEndQuick",
"Close_StayClosed",
"Closing",
"Clothing",
"Co2",
"Coach",
"CoachWhistle",
"Coast",
"Coaster",
"coldbreath",
"Collapse",
"CollapseNorth",
"CollapseWest",
"Collapsing",
"Collision",
"CollisionPedFlags",
"Combat",
"CombatActions",
"CombatAggSpeech",
"CombatBasic",
"CombatFearEnd",
"CombatFearSpeech",
"CombatIdle",
"CombatIdleBlock",
"CombatIdleTurn",
"CombatIdle_Out",
"CombatLoco",
"CombatLocoBasic",
"CombatStrafeIdle",
"CombatTaunt",
"CombatTauntSpeech",
"CombatTransition",
"ComeOn",
"ComeToStopInVehicle",
"Comic",
"Comic01",
"ComicOwner",
"condition",
"ConstantinosIdle",
"Controller",
"Controller_Node",
"CONV",
"ConvInitiate",
"Cook1",
"Cook2",
"Cookin",
"Cop_Busted_Pin",
"Cornelius",
"Cornelius01",
"Cornelius02",
"Cornelius03",
"Coughing",
"CoughingMandy",
"Countdown",
"CoverUp",
"CowDance",
"CowDanceA",
"CowDanceB",
"CowDanceC",
"CowDanceD",
"CowDanceFail",
"CowDanceMusic",
"CowDanceMusicStart",
"CowDanceMusicStop",
"CowDanceSuccess",
"Cower",
"CowerStart",
"Cower_Block",
"Cower_Child",
"Cower_Cycle",
"Cower_End",
"Cower_Start",
"CowFail",
"CowFlub",
"CowSucess",
"CO_OP_PUNCH_2",
"Crabble",
"Crabble01",
"CrawlCycle",
"Crawl_Cam",
"Crawl_Release",
"Crazy_Basic",
"CreateAuthFight",
"cricket",
"Criminal",
"Cross",
"Crouch",
"CrouchActionOppsBase",
"CrouchAim",
"CrouchHide",
"CrouchIdle",
"CrouchLocoAnims",
"CrouchLocoBasic",
"CrouchLocoRun",
"CrouchLocoTarget",
"CrouchRelease",
"CrouchReload",
"Crouch_Out_Target",
"Crouch_Tired",
"Crying",
"CryLoop",
"CRYSPEECH",
"CtrlBx",
"Cuddle",
"CustomActionOps",
"CustomAnim",
"CustomHitTree",
"CustomIdle",
"CustomIdleC",
"CustomIdleLoop",
"CustomIdleO",
"CustomIdleS",
"CustomIdleX",
"CustomLoco",
"CustomPedTree",
"CutPlan",
"CutScene",
"CV_Female_A",
"CV_Male_A",
"CV_OLD",
"CW",
"Cycle",
"CycleClear",
"CyclicIdle",
"Damage",
"Damaged",
"Dance",
"Dance1",
"Dance2",
"DanceA",
"DanceB",
"DanceD",
"Darby01",
"Darby02",
"DarbyAI",
"DARBYIDLE",
"Dash",
"DateActions",
"DavisBrag",
"DavisKickLadder",
"DavisShoulder",
"DavisWait",
"DavisWaitTired",
"DB_ALG_IDLE",
"Dead",
"DeadCollisionOff",
"DeadHold",
"DeadRat",
"Death",
"Decal_WallCrack",
"dec_plate",
"DeEquip",
"DeEquipWeapon",
"Default",
"DefaultClosing",
"DefaultOpening",
"DefaultReset",
"Default_KEY",
"Default_KEYLocomotion",
"Defence",
"Defense",
"Defensive",
"DejectedB",
"DejectedD",
"Delay",
"DeleteBear",
"Deselect",
"Destroy",
"Destroyed",
"Detaching",
"DetermineSpeed",
"DevilFork",
"Dialog",
"DiceRolled",
"Die",
"Difficulty",
"DirectionalPush",
"Disappoint",
"DisEngage",
"Disgusted",
"Dismiss",
"Dismount",
"Dismount_No_PlayOnTarget",
"Disturb",
"DisturbSnow",
"Dive_Splash",
"DoAnim",
"DoCrying",
"DoCryingSpeech",
"DoDamage",
"Dodge",
"dodgeball",
"DodgeballGame",
"Dog",
"DogBodyFall",
"DogChew",
"DogEatLoop",
"DogGrowl",
"DogHurt",
"DOGIRL_ZOE",
"DOG_DOBERMAN",
"DOG_PITBULL",
"DOG_PITBULL2",
"DOG_PITBULL3",
"dolead_edgar",
"dolead_russell",
"DontHurt",
"DontMess",
"Dooit",
"Door",
"DoorFunctions",
"DoorOnGround",
"Doors",
"DoorsDirect",
"Door_Open",
"DOPush",
"DormTV",
"DoubleAxeHandle",
"DOUT_IDLE_B_01",
"DOUT_IDLE_E_01",
"DOUT_IDLE_G_01",
"DOUT_IDLE_I_01",
"Down",
"DownOnGround",
"Down_End",
"DO_Edgar",
"DO_Grappler_A",
"DO_Striker_A",
"DrawMedTag",
"DrawVandalTag",
"DRBrace",
"DrbyVault",
"Dribble",
"Drink",
"Drip",
"Drop",
"DropDirect",
"Dropouts",
"Dropouts01",
"Dropouts02",
"Dropouts03",
"Dropouts04",
"DropWeapon",
"Drop_Anim",
"Drunk",
"Drunk3Actions",
"Drunk3Break",
"Drunk4Actions",
"Drunk4Break",
"Drunk4Detach",
"Drunk4DetachNode",
"Drunk_1_Child",
"DuckCharge",
"DuckChargeHit",
"DuffBag",
"DUMMY",
"DunkBench",
"DunkTank",
"DunkTankMidget",
"Dunk_Swim",
"DuvetInteract",
"EarGrab",
"Early",
"EarnA",
"EarnC",
"Earnest",
"Earnest01",
"Earnest02",
"Earnest03",
"EarnestCry",
"EarnestSpeech",
"Earnest_01",
"Easy",
"Edgar",
"Edgar02",
"EdgarBlank",
"EdgarCocky",
"EdgarShield",
"EdnaShrug",
"eggproj",
"EggSplat",
"Egg_Smash",
"Elbow",
"EmergencyAnim",
"Emergency_Static_Anim",
"Empty",
"EmptyNode",
"End",
"EndCower",
"EndDropHammer",
"endHide",
"EndingNIS",
"EndingSequences",
"EndRunning",
"endTalking",
"endTease",
"endTeased",
"EndWorkout",
"Entry1",
"Entry2",
"Entry3",
"ErrandCrab",
"Errand_BUS",
"Errand_BUS_Detective",
"Errand_BUS_Drugs",
"Errand_BUS_Jacket",
"Errand_BUS_PhotoCash",
"Errand_IND",
"Errand_IND_Package",
"Errand_IND_PACKGET",
"Errand_IND_PackMon",
"Errand_RIC",
"Errand_RIC_Crab",
"Errand_RIC_LostBear",
"Errand_RIC_Mailman",
"Errand_SCH",
"Errand_SCH_ADMIRE1",
"Errand_SCH_ADMIRE2",
"Errand_SCH_Tutorial",
"Errand_SCH_Tutorial2",
"Escape",
"EscapeParametric",
"EscapeStruggle",
"Evade",
"EvadeAttacks",
"EvadeBack",
"EvadeBackPunch",
"EvadeBank",
"EvadeCounter",
"EvadeDuck",
"EvadeDuckPunch",
"EvadeLeft",
"EvadeLeftPunch",
"EvadeRight",
"EvadeRightPunch",
"Evades",
"Evade_Duck",
"Exec",
"ExecNodes",
"Execute",
"ExecuteBank",
"ExecuteNodes",
"Executes",
"exiting",
"ExitSkateboard",
"ExitSkateboardCombat",
"ExitSkateboardJump",
"Explosion",
"ExtWind",
"FacePunch",
"FaceTarget",
"FaceTargetAutoThrow",
"FaceTargetSpawn",
"facial",
"FacingIntended",
"FactionLeaderNIS",
"Fade",
"FadeIn",
"FAIL",
"FailAnim",
"FailNoCondition",
"Failure",
"FAIL_PLAYER",
"Fairy",
"FakeTry",
"Fall",
"Falldown",
"FallDownGetUp",
"falldust",
"falldust02",
"Falling",
"FallOff",
"FallOffBarrels",
"Fall_Loop",
"Fall_No_Damage",
"FalsedMasterOpp",
"FastBackStep",
"Fast_Run",
"CustomLoco",
"FattyAvoid",
"FAT_LOOKPANIC_B_01",
"FAT_LOOKSIDES_A_01",
"FAT_PICKNOSE_A_01",
"FAT_SMELLARMPIT_A_01",
"FeedbackSpawn",
"FeetSlide",
"Female",
"FemaleFight",
"FemaleTalk",
"FemFite",
"Ferris",
"FF120",
"Fight_Tutorial",
"FindTagSpot",
"Finished",
"FinishedNormal",
"FinishedReleaseProp",
"FinishedShower",
"FinishedWidescreen",
"FinishingCross",
"FINISH_GUT",
"Fire",
"FireActions",
"fireexting",
"FireExtingSocket",
"FireMan",
"FireSequence",
"FireSpudGun",
"fire_inv",
"FistShakeEnd",
"flag",
"FlagsAndLua",
"FlashLight",
"Flee",
"FleeObjective",
"FleeReaction",
"Flower",
"FlowerBund",
"FlowerGive",
"FMTrapDr",
"FollowAllyorGirlSpeechPreload",
"Football",
"ForcedDesiredWeapon",
"ForceFeedback",
"Forearm",
"Forwards",
"Forwards_Accurate",
"FOUNDTARGET",
"Fountain",
"FPPassenger3rdPerson",
"FPPassenger3rdPersonAtRest",
"FPPassengerGetOn",
"FrAlrm",
"freakout",
"Freaks",
"Free",
"FRIENDLYHIT",
"FrisbeeThrow",
"Frisk",
"from",
"Front",
"FRONTKNOCKDOWNHARD",
"FuckYOU",
"FuckYOUSpecialBoost",
"FullBodyActionOpps",
"FunBook",
"Functions",
"FunCurtn",
"FunMiner",
"FunReapr",
"FUUUUUUUCKKKKKKKKKK",
"F_AlgieHitWhine",
"F_AreLockersAvailable",
"F_CheckForOutfit",
"F_CowDance",
"F_FirstAttack",
"F_Freakout",
"F_GrapplePunches",
"F_HasRoomForMoreTrash",
"F_Nerds",
"F_PlantNotDestroyed",
"F_PlayerAimingInNIS",
"F_PlayerSleptInBed",
"F_RusselCalm",
"F_WakeupInStreet",
"F_Walk",
"Gag",
"GagFemale",
"GagSound",
"Galloway",
"Galloway01",
"Game_THROW",
"GarageOpens",
"Garbagecan",
"GarbInteract",
"Gary",
"Gary1",
"Gary92",
"Gary93",
"Gary97",
"GaryAI",
"GaryCrazy",
"GaryIdleInBed",
"GaryIntro",
"GaryLightBag",
"GaryNIS",
"GaryPoint",
"GaryPointAnim",
"GaryShove",
"GarySpecialGrapple",
"GasolinePour",
"GatClr",
"Gate",
"GateExplodes",
"GateNerd",
"Gates",
"GateStanding",
"Gawk",
"GeneralObjectives",
"Generic",
"GenericBathroomMirror",
"GenericIdle",
"GenericWallSmoking",
"GenericWrestler",
"GenReactions",
"GenStandTalking",
"GEN_THROW",
"GetBooks",
"GetBrocketLauncher",
"GetDiary",
"GetInAndUseCrane",
"GetItem",
"GetMoney",
"GetOff",
"GetOff_Attack",
"GetOn",
"GetOnCannon",
"GetOn_Player",
"GetOut",
"GetOutBed",
"GetUp",
"GetUpBelly",
"GetUpChoice",
"GetUpEasy",
"GetUpEasy2",
"GetUpHard",
"GetWeapon",
"Get_Object",
"GFIGHT",
"GiftGive_Speech",
"Gifts",
"GirFriend",
"GirFriendSee",
"GirFriendSeeHH",
"GirlFight_Init",
"GirlFight_Loop",
"GirlFight_Out",
"GirlNotice",
"GirlNutKick",
"GirlsBathroom",
"GirlsOutside",
"GIVE",
"Give1_07",
"Give2G2",
"Give2S04",
"GiveBagmrbls",
"GiveBall",
"GiveBeatrice1_G1",
"GiveBottle",
"GiveChocolateBox",
"GiveChocolates",
"GiveComicOwner",
"GiveEarnest_4_01",
"GiveEdna_2_01",
"GiveFlowers",
"GiveHealth",
"GiveHobo_1_06",
"GiveInitiate",
"GiveItem",
"GiveJohnny3_01",
"GiveLabNotes1_08",
"GiveLola3_05",
"GiveMissPhillips1_S01",
"GiveMoney",
"GivePackage_3_09",
"GivePhotos",
"GivePt2",
"GiveSpawned",
"GiveSuperGlue",
"GiveUp",
"GiveUp_Speech",
"GiveWftbomb",
"GiveZoe_5_05",
"Give_Attempt",
"Give_Attempt_Speech",
"GIVE_B",
"Give_Seek",
"Give_Sequence",
"Give_Wait",
"GKFF",
"Global",
"GlobalActions",
"GlobalLoco",
"Globals",
"GlueBench",
"GN_FatGirl",
"Go",
"GoingDown",
"GoKart",
"GoKartFailure",
"GoKartVictory",
"GoodHit01ccccx",
"GoOff",
"Gord",
"Gord01",
"Grab",
"GrabBear",
"GrabKnees",
"GraffitiCleanup",
"GrapLocoOpps",
"Grapple",
"GrappleAnchor",
"GrappleAttempt",
"GrappleAttempt1",
"GrappleAttempt2",
"GrappleBreak",
"Grappled",
"GrappleExecutes",
"GrappleLoco",
"GrappleMoves",
"GrappleOpps",
"GrappleRcvWait",
"GrappleReversalOpps",
"GrappleReversals",
"GrappleRotate",
"Grapples",
"GrapplesAttempt",
"GrapplesExecuteNodes",
"GrappleStrikes",
"GrappleSuccess",
"GrappleTarget",
"GrappleTeach",
"Grapple_BearHug_Cameras",
"GRAPPLE_BEARHUG_GIVE",
"Grapple_Cameras",
"Grapple_Cams_Low",
"Grapple_Cam_WeaponStruggle",
"GrapThorw",
"GrapThorwLeft",
"GRAP_HIGH",
"GRAP_HIGH_RCV",
"GravityReset",
"Greaser1",
"Greaser2",
"GreaserIdles",
"GreaserKick_1",
"GreaserKick_2",
"GreaserNIS",
"Greasers",
"Greasers01",
"Greasers02",
"Greet",
"Greet_Speech",
"GRES_FISTPALM_A",
"GRES_FIXHAIR_D",
"GRES_IDLE_B",
"GRES_LOOSENUP_A",
"GRH2_NORTON",
"grlead_johnny",
"GROANER",
"GroinKick",
"Groin_Kick",
"Ground",
"GroundActions",
"GroundAndWallHits",
"GroundAttacks",
"GROUNDHITHEAVY",
"GROUNDHITLIGHT",
"GroundKick",
"GroundKickCharged",
"GroundMount",
"GroundPunch",
"GroundStomp1",
"GroundStomp2",
"GroundStomp3",
"GS_Fat_A",
"GS_Female_A",
"GS_Male_A",
"GuardDog",
"GuardDogLoopExit",
"GuardPunchFinish",
"GuardPunchReversal",
"Gun",
"GunHit",
"GurneyCrouchOut",
"GurneyKneel",
"GutKick",
"GutKick_L",
"GutKick_R",
"GutPunch",
"Gut_Punch",
"Guy_Laugh",
"GV",
"GymCut",
"GymHoop",
"GymWLad",
"G_Grappler_A",
"G_Johnny",
"G_Melee_A",
"G_Ranged_A",
"G_Striker_A",
"HammerActions",
"HammerLiftHold",
"HammerSwing",
"HammerSwings",
"Hand",
"HandleDoors",
"HandleRockets",
"HandleSoundCalls",
"Handwash",
"HangOut",
"Hang_Talking",
"Hang_Workout",
"Harassed",
"Harassing",
"HarassMoves",
"HarassSpeech",
"HarassSpeechExec",
"Hard",
"Harrassed",
"Hattrick",
"Hattrick01",
"HEAD",
"HeadButt",
"HeadButt_AnticStart",
"HEADCROSS",
"HEADHEAVY",
"HEADHOOK",
"HEADJAB",
"HEADLEFT",
"Headlock",
"HEADRIGHT",
"HEADROLLR",
"HEADSTUN",
"HealthIncrement",
"HealthIncrementB",
"HeavyAttacks",
"HeavyHits",
"HeavyKick",
"HeavyKick2",
"HeavyKick_FF",
"HeavyKnee",
"HeavyLeft",
"HeavyPunch",
"HeavyPunch1",
"HeavyPunch2",
"HeavyPunchCharge",
"HeavyPunch_FF",
"HeavyRight",
"Held",
"HelpOut_Speech",
"Hiding",
"HighKick",
"HighKickRelease",
"HighKickStart",
"HighStriker",
"HIT",
"Hit1",
"Hit2",
"Hit3",
"HitA",
"HitB",
"HitC",
"HitFace",
"HitFireAlarm02",
"HitGutCycle",
"HitHardBack",
"HitHardFront",
"HitHardFrontShort",
"HitImpactLarge",
"HitImpactSmall",
"HitReact",
"HitReactWait",
"HitsLight",
"HitStairs",
"HitTree",
"HIT_LEG_FRONT_L_FALL",
"HIT_LEG_FRONT_R_FALL",
"HMB_2_R03",
"HoboFly",
"HoboIdleCycle",
"HoboOpenGate",
"Hobo_Blocker",
"Hold",
"HOLDNODE",
"HoldOpen",
"Hold_Cycle",
"Hold_Idle",
"Hook",
"Hook1",
"Hook2",
"Hopback",
"Hork",
"However",
"HUDEnable",
"HumiliateFlee",
"HumiliateSpeech",
"Humiliate_Init",
"Humiliate_Me",
"Humiliate_Trip_Kid",
"HumiliationReact",
"Humiliations",
"Humiliation_Cameras",
"Humiliation_Dead_Arm",
"Humiliation_Dead_leg",
"Humiliation_Ear_Grab",
"Humiliation_Handcrush",
"Humiliation_Hit_Self",
"Humiliation_Indian_Burn",
"Humiliation_Noogie_Spit",
"Humiliation_Nose",
"Humiliation_Pee",
"Humiliation_Slap",
"Humiliation_Trip_Bigkid",
"Humiliation_Wedgie",
"HUMIL_4-10_B",
"HUMIL_4-10_C",
"HUMIL_5-8F_A",
"HUMIL_5-8F_B",
"HUMIL_5-8VPLY",
"HUMIL_5-8_A",
"HUMIL_5-8_B",
"HUMIL_5-8_C",
"HUMIL_6-1_A",
"HUMIL_6-1_B",
"HUMIL_6-1_C",
"HUMIL_6-5_A",
"HUMIL_6-5_B",
"HUMIL_6-5_C",
"HUMIL_FAIL",
"Idle",
"IdleAnimationChooser",
"IdleAnimations",
"IdleDice",
"IdleFight",
"IdleJump",
"IdleLoop",
"IdleOneFrame",
"Idles",
"IdleSpeech",
"Idle_Anim",
"Idle_Base",
"Idle_Overrides",
"Idle_Regular",
"Idle_Remove",
"Idle_Social",
"If_Large",
"ImpactSFX",
"in",
"Inactive",
"InCan",
"IncrementBustedStat",
"IncrementEscapeStat",
"IncrementStatKick",
"IncrementStatPunches",
"Init",
"InitCollisionOn",
"Initialize",
"InitRockets",
"InsertOpportunity",
"Interact",
"InteractWithToilet",
"Interruptable",
"IntoAim",
"IntoPose",
"IntroNIS",
"Invincible",
"invisible",
"IsPlayer",
"ItchingPowder",
"iz",
"JAB",
"JackieKick",
"JackieKickLAND",
"JBroom",
"Jimmy",
"Jimmy01",
"Jimmy02",
"Jimmy03",
"JimmyBye",
"JimmyGetGift",
"JimmyKnock",
"JimmyLine1",
"JimmyTag",
"JimmyTalk02",
"JimmyThatStupid",
"JimmyWaits",
"Jimmy_01",
"Jimmy_02",
"Jimmy_Pool",
"JKICK",
"JK_LuisWrestle",
"Jock",
"JockIdle",
"JockMed",
"Jocks",
"JocksOutro",
"JOCK_HAMSTRINGS_A",
"JOCK_IDLE_E",
"JOCK_SMELLPITS_A",
"JOCK_STRETCH_B",
"Johnny",
"Johnny01",
"Johnny02",
"Johnny03",
"Johnny1",
"Johnny2",
"JohnnyCheer",
"JohnnyIdle",
"JohnnyShove",
"Johnny_01",
"Johnny_02",
"jointDrivers",
"Jump",
"JumpActions",
"JUST_RightArm",
"J_Damon",
"J_Grappler_A",
"J_Mascot",
"J_Melee_A",
"J_Striker_A",
"KD_DROP_Default",
"Keepups",
"KEEP_NODE_ALIVE",
"KeyPickup",
"Kick",
"KickBallSpawn",
"KickHeavy",
"kickme",
"KickMeHit",
"KickMeReactions",
"KickMeSign",
"KickRib",
"KickScript",
"KickSwing",
"KickTaunt",
"KickThrust",
"Kick_1_landed",
"Kick_2_landed",
"KidAnimations",
"KirbyCough",
"KirbyFall",
"KirbyGetsBall",
"KirbyInit",
"Kiss",
"KISS1",
"Kiss2",
"Kiss2Loop_GIVE",
"Kiss2Loop_RCV",
"Kiss2_Loop",
"KISS3",
"Kiss4",
"Kiss4Loop_GIVE",
"Kiss4Loop_RCV",
"Kiss4_Loop",
"KISSAdult",
"KISSB",
"KissB2A",
"KissB2B",
"KissB3A",
"KissB3B",
"KissBreak",
"KissDrop",
"KissEnd_GIVE",
"KissEnd_RCV",
"Kisses",
"KISSF",
"KissFinal",
"KissGrap",
"KissMeAdult",
"KissyKissy",
"Kiss_Cameras",
"Kiss_Cameras_Fat",
"Kiss_Cameras_Random",
"Kiss_GIV",
"Kiss_GIVE",
"Kiss_Me_Baby",
"Kiss_RCV",
"Knee",
"Knee2",
"KneeDrop",
"KneeDropReversal",
"Kneel",
"KneelFeed",
"KneelIdle",
"KneelIn",
"KneeToBodyLStart",
"Knock",
"KNOCKDOWN",
"KnockedOut",
"Knockout",
"KnockoutDead",
"KnockoutHit",
"KnockoutRecover",
"KnockOuts",
"KOReactions",
"KOSpeechBank",
"KOSpeechExec",
"KO_COLLAPSE",
"Ladder",
"Ladder_Actions",
"Ladder_Actions_PED",
"Landing",
"LandingGoofy",
"Late",
"Laugh",
"Laugh01",
"Laugh02",
"LaughCyclic",
"Laughing",
"LaughingSpeechPreload",
"Laugh_Default",
"Laugh_Shove",
"LeadPipe",
"LEFT",
"Left1",
"Left2",
"Left3",
"Left5",
"LeftArm",
"LeftCollar",
"LeftDown",
"LeftFoot",
"LeftHand",
"LeftHook",
"LeftJab",
"LeftJabBody",
"LeftJabHead",
"LeftPunch",
"LegIn",
"LegKick",
"LegKickReleaseMax",
"LegKickStart",
"LegSwing",
"LegSwingFinishr",
"LEG_FRONT_L_FALL",
"Leg_Swing",
"Leon",
"Less",
"Level",
"LE_Orderly_A",
"Librarian",
"Librarian_01",
"Librarian_02",
"Librarian_03",
"lid",
"Lid_Blocks",
"LightAttacks",
"LightBomb",
"LightFountain",
"LightHits",
"ListenAnims",
"Listening",
"Load",
"LoadAnims",
"LoadBrocket",
"Loaded",
"LoadSpawn",
"LoadWait",
"Locked",
"Locked1_08",
"Locker",
"LockerStuff",
"Lock_Picking",
"Lock_Picking_Loop",
"Lock_Picking_Loop_To_Idle",
"Loco",
"Locomotion",
"LocomotionExecutes",
"LocomotionOverride",
"Locomotions",
"LocomotionSpawn",
"Locomotion_Move",
"LocoOverride2H",
"LocoTracks",
"Lola",
"Lola01",
"Long",
"LongChoose",
"Look",
"LookAround",
"LookLayer_1",
"LookLayer_2",
"LookRight",
"Look_B",
"LOOP",
"LoopPicking",
"LostGame",
"LowerBody",
"lua",
"Lucky",
"LuckyWait",
"LuisIntro",
"Magnetized",
"main",
"MakeOut",
"MAKING_OUT",
"Mandy",
"Mandy01",
"MandyFreak",
"MandyStand",
"MandyTalk",
"MandyTalk02",
"MandyTalk03",
"MandyWait",
"marble",
"Marbles",
"Mascot",
"Mascot01",
"MascotActions",
"MascotDance",
"MascotDancing",
"MascotPool",
"MassagingLeg",
"MasterSpawns",
"MazeLookAround",
"MBP_2_R03",
"Medium",
"Medum",
"MeetRussell",
"Melee",
"Melvin",
"Melvin01",
"MelvinCheers",
"Mermaid",
"MermaidIdle",
"MGBaseballToss",
"MGMusic",
"MGSocPen",
"MG_BallToss",
"MG_DunkTank",
"Midgets",
"MINIDUNK",
"Minigame",
"MINI_LOCK",
"MirrorActions",
"MirrorIdle",
"mission",
"Mission505",
"MissionCower",
"MissionLookAround",
"Missions",
"MissionSpec",
"MISSION_2",
"Mock",
"Mock1",
"Models",
"MonitorOnce",
"monkeywrench",
"MonLoopStop",
"Morning??",
"MoshOut",
"MotionController",
"Mount",
"MountFLIP",
"MountHitBase",
"MountIdle",
"MountOpps",
"MountRCVFlags",
"MountReversalPunches",
"MountReversals",
"MountReversalToPunch",
"Mounts",
"Mouth",
"MouthCig",
"Ms_Phillips",
"Ms_Phillips01",
"Ms_Phillips02",
"Ms_Phillips03",
"MusicPlayerActions",
"MuzzleFlash",
"M_2_R03_01",
"M_2_R03_02",
"M_2_R03_03",
"NC_Loco",
"ndh1a_algernon",
"Neck",
"NeedInit",
"NegativeReaction",
"Nemesis",
"nemesis_gary",
"NerdBooks",
"NerdBooksB",
"NerdbooksC",
"NerdBooksD",
"NerdbooksE",
"NerdBooks_Hold",
"NerdCheer",
"NerdHook",
"NerdMed",
"Nerds",
"Nerds01",
"Nerds02",
"Nerds03",
"NERDS_IDLE_D",
"NERDS_RUBHEAD_A",
"NERDS_SCRATCHARSE_A",
"NerdTeased",
"New",
"NewFall",
"NewKid",
"NewKidBreak",
"NewLocoAnims",
"newsroll",
"NewSweater",
"NIS",
"NISend",
"NISJocksTaunt",
"NISLOLA",
"NISPINKY",
"NISs",
"NIS_1_08_1",
"NIS_3_S03_GiveCas",
"NIS_3_S03_GiveHat",
"NIS_3_S03_GiveVan",
"NIS_Animations",
"NIS_Anims",
"NIS_SUCCESS",
"NLockA",
"NoAnimation",
"NoAuthorityInView",
"Node:",
"NoEffect",
"non",
"NonCombatActions",
"NonCombatStrafe",
"NONE",
"NonMasher",
"NonWeapon",
"Normal",
"Norton",
"Norton01",
"NortonAI",
"NortonSwing",
"NoseWipe",
"NotMoving",
"NotSpectator",
"NotTired",
"NotUseable",
"NotUsed",
"NPC",
"NPC1_09",
"NPCFacial",
"NPCGetItem",
"NPCGetup",
"NPC_Adult",
"NPC_GENERIC",
"NPC_Love",
"NPC_MASCOT",
"NPC_Shopping",
"NPC_Spectator",
"NPC_WAIT",
"NPC_Winning",
"NULL",
"N_Earnest",
"N_Melee_A",
"N_Ranged_A",
"N_Striker_A",
"N_Striker_B",
"ObjCompleted",
"ObjectiveOptions",
"OBJECTIVES CLEARED!",
"Objectives",
"OBJECTS_3",
"OBSDoor",
"ObserverLoops",
"Obstruction_Check",
"Off",
"Offense",
"OhFace",
"On",
"OnBike",
"OneShot",
"OneShotDialog",
"OnGround",
"OnGroundBounce",
"ON_BOT",
"On_Ground",
"Open",
"OpenCut",
"OpenDoor",
"OpenFoyeurDoor",
"OpenGate",
"OpenHold",
"Opening",
"OpenSecondFloorDoor",
"OpenToEnd",
"OpenToEndQuick",
"OpenTSGate",
"OpponentDefeated",
"Opps",
"OrderlyGrapple",
"OrderlyPatrol",
"OrderlyPatrol_Child",
"Orderly_Busted",
"OutOfCarFail",
"OUTRO",
"OverHand",
"OverHandR",
"PaintedMan",
"Parametric",
"ParametricDoor",
"ParametricRun",
"ParametricTagging",
"PatrolDialogue",
"PatrolMonitor",
"PayRussell",
"Peanut",
"PedDrawMedTag",
"PedPropActions",
"PedPropsActions",
"Peds",
"PedUnderHood",
"Pee",
"PeeDance",
"PeeSelf",
"PeeStart",
"PeeStop",
"Pelvis",
"PerformCleanup",
"PerformTag",
"Pete94",
"Pete96",
"PeteCan",
"Peter",
"Peter01",
"PeterFistShake",
"PeterHit",
"PeteSit",
"PeteyUseCrane",
"PF_Basic_A",
"Phillips",
"Phillips01",
"PICKING",
"PickKiss",
"Picklock",
"Pickup",
"PickupAct",
"PickUpActions",
"PickupCandyAct",
"PickupCandyEat",
"PickupDefault",
"PickupDice",
"PickupPropHack",
"PickupStats",
"PickupTorch",
"PickupWeapon",
"PinchBum",
"Pinky",
"Pinky01",
"Pinky02",
"Pinky03",
"Pinky04",
"PinkyWand",
"PissSelf",
"PlaceFountain",
"PlaceIt",
"Planting",
"PlantStinkbomb",
"Platform",
"PLAY",
"PlayAnim",
"PlayAnimationCyclic",
"PlayDamageSound",
"Player",
"Player01",
"Player02",
"Player03",
"PlayerAI",
"PlayerAlgie",
"PlayerBadFailure",
"PlayerBucky",
"PlayerCornelius",
"PlayerCornelius02",
"PlayerEnd",
"PlayerFacial",
"PlayerFail",
"PlayerFallOffBike",
"PlayerGetUp",
"PlayerGoodVictory",
"PlayerIdle",
"PlayerLookAround",
"PlayerMelvin",
"PlayerOnGround",
"PlayerOutro",
"PlayerPickupSlingshot",
"PlayerReactions",
"PlayerScratch",
"PlayerSit",
"PlayerStand",
"PlayerStretch",
"PlayerTaunt",
"PlayerVictory",
"PlayerVictory01",
"PlayerVictory03",
"PlayerWet",
"PlayerWin",
"Player_01",
"Player_02",
"PLAYER_BULLIES",
"Player_Tired",
"Player_VTired",
"Player_Winning",
"PlayOnTarget",
"PlayOpenAnim",
"PlayShow",
"PlaySocialAnimation",
"PlaySocialInitialReaction",
"Point",
"PointAtPlayer",
"PointAtRussel",
"PointAtSwitch",
"PointWarn",
"POIPoint",
"poison",
"PoisonAnims",
"PoisonGas",
"PoisonSpray",
"POI_Booktease",
"POI_Cafeteria",
"POI_ChLead",
"POI_Gen",
"POI_Smoking",
"POI_Telloff",
"POI_WarmHands",
"POI_Worker",
"polo",
"pompom",
"PomShake",
"poolcue",
"POpenSide",
"POpenUp",
"PositiveReaction",
"PostGetOff",
"PostHit",
"potato",
"PotatoSmokeTrail",
"Powerbomb",
"PowerDown",
"Powerslide",
"PowPunchA",
"PowPunchB",
"PracticeCharge",
"Pranks",
"Prefect",
"PrefectBustDialogue",
"PrefectChew",
"PrefectEdwardWarn",
"Prefect_Busted",
"PreFireWait",
"PreloadSpeech",
"PrepHouse",
"PREPHOUSE_PLANTAREA",
"PrepIdle",
"PrepMed",
"Preppies",
"Preppies01",
"Preppies02",
"Preppies03",
"Preps",
"PREP_IDLE",
"PREP_PREP_IDLE_A",
"PREP_TIME_CHECK_2",
"PREP_WIPE_SLEEVES_B",
"PreSpeech",
"Primary",
"PrincipalDialogue",
"PriOff",
"ProjAttack",
"Projectile",
"PropClosed",
"PropInteract",
"PropInteractLoco",
"PropOpened",
"PropStuffTarget",
"Prop_Kik",
"PSheild",
"Puke",
"PukeExec",
"PukeOnDemand",
"Pull_In_heavy",
"Pull_Up",
"Pump2",
"PumpGoofy2",
"Punch",
"Punch1",
"Punch2",
"Punch3",
"punchbag",
"PunchbagAI",
"PunchBagBS",
"PunchHands",
"PunchHeavy01",
"PunchHeavy02",
"PunchLite01",
"PunchLite02",
"PunchSpawn",
"Punch_Hold_Idle",
"Punch_Swing",
"PunishmentHit",
"Punishment_Hold",
"Push",
"Pushback",
"PushFwd",
"Pushoff",
"PushPlayer",
"Pushups",
"PutAway",
"PutOutCigEnd",
"pVase_proj",
"Pwr_Punch_Rels",
"pxCshld",
"pxSitStl",
"Px_Bed",
"Px_Garb",
"Px_Ladr",
"Px_Sink",
"Px_Tlet",
"Px_Tree",
"P_Bif",
"P_Grappler_A",
"P_Striker_A",
"P_Striker_B",
"P_Walk",
"QuickIdle",
"Quick_Release_Cam_Bank",
"Race",
"RaceVictory",
"Rail",
"RainBreak",
"Random",
"RandomLockState",
"Ranged",
"RangedWeaponActions",
"RatKick",
"RatPacking",
"RAT_PED",
"RBandBall",
"Rcv",
"RcvWait",
"Rcv_NPC",
"RCV_PT2",
"Rcv_Sequence",
"Rcv_Wait",
"ReactionAnims",
"ReactionLoops",
"Reactions",
"Reactions_Shared",
"REAC_BRING_IT",
"REAC_COMEON",
"Rear",
"Rebuff",
"Receive",
"ReceiveIdle",
"ReceiveWait",
"Receive_Speech",
"RecruitRussell",
"RefCounting",
"Release",
"ReleaseAnimGroup",
"ReleaseGroup",
"ReleaseGroup_Child",
"ReleaseProp",
"Release_Cam",
"Release_Cam_Bank",
"RELEASING",
"Reload",
"RemoveAllWeapons",
"RemoveBall",
"RemoveRocketsInCase",
"RemoveWeapons",
"RemoveWeapons_LH",
"Repunch1",
"Repunch2",
"Repunch3",
"Rescue",
"Reset",
"resetTad",
"reset_flags",
"Restart",
"Results",
"Resume",
"Retard_Loco",
"ReturnToAim",
"Reversal",
"ReversalOpps",
"Reversals",
"RibKick",
"Ride",
"RideMe",
"Right",
"Right2",
"Right4",
"RightArm",
"RightArmDamage",
"RightCross",
"RightDom",
"RightFoot",
"RightHand",
"RightHook",
"RightPunch",
"RightStomach",
"RisingAttacks",
"RisingAttck",
"Robbed",
"Robbednode",
"Rochambeau",
"RochambeauNIS",
"Roll",
"RollDice",
"Rolled",
"RooftopAttacker",
"ROOT",
"RoundHouseKick_L",
"RSGrDoor",
"Rumble",
"RumbleNorth",
"RumbleWest",
"Rummage",
"RummageInDuffel",
"Run",
"RUNATTACKH",
"RUNATTACKL",
"RunBasic",
"RunController",
"RunInside",
"RunLoco",
"RunLocoAnims",
"RunningAttacks",
"RunningAttacksDirect",
"RunningTakedown",
"RunPunch",
"RunPunchBackToRun",
"RunPunchFF",
"RunShoulder",
"RunShoulderBackToRun",
"RunShoulderFF",
"RunStart",
"RunStop",
"RunStrafeMode",
"RunTired",
"Run_StartLoco",
"Run_Stop",
"Run_To_Idle",
"RusellFallOffBike",
"RuslSwing",
"RusselAI",
"Russell",
"Russell01",
"Russell02",
"Russell03",
"RussellAlley",
"RussellHide",
"RussellLoco",
"Russell_NIS",
"RUSS_ROAR",
"SACKED",
"SANTA_END",
"SANTA_START",
"SAUTH_A",
"SAUTH_F",
"SAUTH_U",
"SaveAlgieBooks",
"SaySomething",
"sbarels1",
"SBULL_A",
"SBULL_F",
"SBULL_S",
"SBULL_U",
"Scared",
"SCBELL",
"Scenario",
"ScenarioAccepted",
"ScenarioDialog",
"ScenarioGive",
"ScenarioObjective",
"ScenarioOpen",
"ScenarioOptions",
"ScenarioReceive",
"Scenarios",
"ScenarioSeek",
"ScenarioWait",
"ScenGreetBoyAnim",
"SchoolGatesNIS",
"scObsDr",
"Scream",
"ScriptCall1",
"ScriptCalls",
"Scripted",
"ScriptedAI",
"ScriptedProj",
"ScriptedProjtrack",
"ScriptedPropInteract",
"ScrKick",
"Scuff",
"SeatGetOn",
"SecIdle",
"SecretaryGetUp",
"SecStart",
"SeeAttacker",
"SeeBreak",
"Seek",
"SeekEntity",
"Select",
"SelectActions",
"Sequences",
"set",
"SetHealth",
"SetPlayerInvuln",
"SetTagDone",
"SetTargetInvuln",
"Setting",
"SetupPoster",
"SFAT_A",
"SFAT_F",
"SFAT_I",
"SFAT_S",
"SFX",
"SFXSpawn",
"SGEN_A",
"SGEN_F",
"SGEN_I",
"SGEN_S",
"SGIRL_A",
"SGIRL_D",
"SGIRL_F",
"SGIRL_S",
"ShakeFist",
"Shields",
"ShieldWeapons",
"ShitStomp",
"ShootActions",
"Short",
"ShortDarby",
"ShortIdle",
"Shots",
"Shots_Idle",
"Shoulder",
"ShoulderButt",
"ShoulderButt_Release",
"ShoulderButt_Start",
"ShoulderSlam",
"Shove",
"Shove2HandExecute",
"Shove_Punch",
"Shove_Still",
"Showering",
"ShutOff",
"SiameseTwinsLoad",
"SignDetach",
"SimpleIdle",
"SimpleLoco",
"Single",
"Sit",
"SitHigh",
"SitLoop",
"SitOnWall",
"SittingGirls",
"Sitting_Boys",
"Sitting_Down",
"Sit_End",
"Sit_End2",
"Sit_GirlEnd",
"Sit_GirlIdle",
"Sit_GirlTalk",
"Sit_Idle",
"Sit_Smoke_Idle",
"Sit_Smoke_Start",
"Sit_Start",
"Sit_StartGirl",
"Sit_Talk",
"Sk8board",
"SK8_Examine",
"SkateBoard",
"SkateboardWallHit",
"SkateFall",
"SkateLand",
"SkateOllieLand",
"SkateOllieUp",
"SkatePush",
"Skeleton",
"SkeletonInit",
"Slap",
"Slasher",
"sledgehammer",
"SledgeHamrHit",
"Sleep",
"SlideDust",
"SlingShot",
"SLNGSHT_PULL",
"SloppyAttacks",
"SmashInnaFace",
"SmashInnaFaceStink",
"SmellSelf",
"Smell_Pits",
"smoking",
"SNERD_A",
"SNERD_I",
"SNERD_S",
"SnoBallPicUp",
"SNOBALL_FACEHIT",
"snowball",
"SnowShovel",
"SnowShwl",
"snwballb",
"SocBall",
"Social",
"SocialAcceptApology",
"SocialAngryShove",
"SocialAnims",
"SocialApology",
"SocialBringItOn",
"SocialChitChat",
"SocialDismissShrug",
"SocialExecute",
"SocialExtort",
"SocialFlee",
"SocialFleeSpeechPreload",
"SocialFollow",
"SocialGreeting",
"SocialHumiliateAttack",
"SocialInitialReaction",
"SocialInstigatorFaceForGreet",
"SocialInstigatorGreet",
"SocialInstigatorMoveToGreet",
"SocialInstigatorPreloadComplete",
"SocialInstigatorWait",
"SocialInsult1",
"SocialInsult1SpeechPreload",
"Socializing",
"SocialLaugh",
"SocialLostTemper",
"SocialLostTemperSpeechPreload",
"SocialOpps",
"SocialPraise",
"SocialReactAngry",
"SocialReactCower",
"SocialReactDontHurt",
"SocialStopHand",
"SocialTargetFaceForReact",
"SocialTargetMoveToReact",
"SocialTargetPreloadComplete",
"SocialTargetReaction",
"SocialTargetWait",
"SocialTattle",
"SocialWantGift",
"SocialWave",
"Social_Actions",
"Social_Combat",
"Social_Speech",
"socket",
"SocketChange",
"SodaMach",
"soking",
"Somezink",
"Sounds",
"Special",
"SpecialActions",
"SpecialFire",
"SpecialPuke",
"Specials",
"SpecialStart",
"Special_Init",
"SpecificObjectives",
"SpecLike",
"SpecSpeech",
"SpecSpeechHate",
"SpecSpeechLike",
"SpectatorAnims",
"SpectatorHateWait",
"SpectatorLikeWait",
"SpectatorSpawn",
"SpectatorWait",
"Speech",
"SpeechGen",
"SpeechPreload",
"SpeechPreloadNone",
"Speech_Preload",
"Spine",
"SPINE1",
"Spine2",
"SPINECONTROLHACK",
"Spit",
"SpitHand",
"Spit_Wrestle",
"SplitBody",
"Sprawl",
"Spray",
"SprayAttackRun",
"Spraycan",
"SprayFrontRun",
"SprayFrontRun2",
"SprayFrontRun_Release",
"SprayGun",
"Spray_A",
"Spray_Big_1",
"Sprint",
"SprintBasic",
"SprintController",
"SprintDeplete",
"SprintDepleteExec",
"SprintLocoAnims",
"SpudG",
"SpudGunDryfire",
"SpudGun_Fire",
"SpudGun_Reload",
"Square",
"Squid",
"SSWhip",
"StanceTransition",
"Stand",
"StandBackUp",
"StandIdle",
"Standing",
"StandingReversals",
"StandingSmoke",
"Star",
"Start",
"StartAnimations",
"sTARTIdle",
"startOpen",
"StartRun",
"StartUsing",
"StatsExecutes",
"Stay",
"Steal",
"StealCostumeCut",
"StealthDoor",
"StealthWalk",
"Steal_Easy",
"SteamReaction",
"StepAwayEnd",
"StepBackMoshOut",
"StimBank",
"Stimuli",
"StinkBomb",
"Stinky",
"STINK_REACT",
"Stink_Trap",
"STNKBMB_SMASH",
"StompIn",
"StompRCVCycle",
"Stop",
"StopBathroom",
"StopCheering",
"StrafeBase",
"StrafeBasic",
"StrafeBasicLocoOpp",
"StrafeIdle",
"StrafeLocoBasic",
"StrafeLocoBasicAnims",
"StrafeLoco_Opps",
"StraightenCollar",
"StraightPunch",
"Strike",
"StrikeOut",
"StrikeReversalOpps",
"Strikes",
"Strong",
"Struggle Detected",
"struggle",
"StruggleFeedback",
"StruggleOn",
"StrugglesOff",
"StubItOut",
"StuffGrap",
"StuffPooBag",
"StunControl",
"Stuners",
"Success!!",
"Success",
"SuccessHi1",
"SuccessHi2",
"SuccessHi3",
"SuccessMed1",
"SuccessMonitor",
"supermarble",
"supersling",
"superspud",
"SuperSpudG",
"SuperUppercut",
"SurprisedM1A",
"SurprisedM2A",
"SweepFloors",
"SwimAnims",
"SwimRipples",
"SwimRipplesStrong",
"Swim_Fwd",
"Swim_Slow",
"Swing",
"Swing2",
"Swing3",
"SwingLeftExec",
"SwingPunch_L",
"SwingPunch_R",
"SwingRightExec",
"Swirlie",
"SwirlTargSpeech",
"Switch",
"Switcheroo",
"Switcheroo2",
"Swng",
"Sxy_Impatient",
"S_Walk",
"TadCloseShutters",
"TadRebuff",
"TadReject",
"TadShutters",
"tag1",
"Tagged",
"Tags",
"TagSmall",
"TagSuccess",
"Take",
"Takedown",
"Takedown_miss",
"Talk",
"TalkAnims",
"Talking",
"TalkingLoops",
"TandemGrapple",
"TandemGrapple_ACTIVE",
"TANDEMHIT",
"Target",
"TargetAnimations",
"TargetBreathe",
"TargetGesture",
"Split_Body_Hits",
"TargetOrientation",
"TargetPoint",
"Idle_Check",
"P_Run",
"Idle_A",
"Idle_B",
"Idle_C",
"Idle_D",
"Walk_StartLoco",
"SaunterBasic",
"Saunter_StartLoco",
"TargetReactions",
"TargetType",
"TARGET_ABORT",
"TattooShop",
"Taunt",
"Taunt01",
"Taunt04",
"Taunt1",
"Taunt2",
"Taunt3",
"TauntLoop",
"TauntOnce",
"TauntPlayer",
"Taunts",
"TauntStats",
"Taunt_A",
"Taunt_B",
"Taunt_C",
"Taunt_Lose",
"Taunt_Shove",
"Taunt_Speech_HIGH_ENG",
"Teacher",
"TeacherChew",
"TeacherFinishClass",
"TeacherSpeaking",
"Ted01",
"teddybear",
"Tell_Off",
"Test",
"TestConv_2Ped",
"TE_Female_A",
"TE_Male_A",
"TE_Sitting",
"ThankYou",
"THE",
"THIS_IS_A_HACK",
"Threaten",
"ThroatGrab",
"ThroatGrab_Rcv",
"Throw",
"ThrowActions",
"ThrowBombs",
"ThrowFinish",
"ThrowFrisbee",
"Thrown",
"ThrownActions",
"ThrowStart",
"ThrustKick",
"Tired",
"TiredActions",
"TiredLoop",
"Tired_UBO",
"Tired_Upperbody",
"Tired_UpperBody_Spawn",
"TO",
"Tobias01",
"ToGetUp",
"Toilet",
"ToolBox",
"Tools",
"Torch",
"TorsoFront1",
"TorsoFront2",
"Toss",
"TossBrush",
"TossStinkbomb",
"TO_DOCKWORKER",
"TO_GN_WORKMAN",
"TO_INDUSTRIAL",
"TO_MILLWORKER",
"TO_Orderly",
"to_orderly2",
"TO_Siamese",
"TrainingPlayer",
"Tray_Hold",
"Tray_Scatter",
"TreadWater",
"tree",
"TreeClimb",
"TreeFall",
"TreeIdle",
"Trellis",
"Trellis_Actions",
"TrentGreet",
"Triangle",
"Triggered",
"TRIPHARASS",
"Trophy",
"TroyAttacks",
"TrueEmptyNode",
"TryClothesAnims",
"TRYING",
"TryingOn",
"TryOpen",
"Try_Clothes",
"TSGate",
"TurfBreak",
"Turn",
"Turning",
"Turning_HeadTrack",
"TurnOnSpot",
"TurnStart",
"TurnToFace",
"Turn_End",
"TutorialTags",
"twobyfour",
"UBO_Arms_Hd_Sp",
"UBO_Checks",
"UBO_Execute",
"UBO_HD_SP",
"UBO_LARM_HD_SP",
"UBO_RARM_HD_SP",
"umbrella",
"Umpire",
"unarmed",
"Unblockable",
"Unblockable2",
"Unique",
"Unlock",
"Unlocked",
"Unlocks",
"Unoccupied",
"UP",
"UpperBody",
"UpperBodyOverrides",
"UpperBody_ALL",
"UpperCut",
"UpperCutFF",
"UpperLeg",
"Use",
"Useable",
"UseMonitor",
"UseOverride",
"UseSoccerGoal2",
"UseSoccerGoal3Old",
"UseSoccerGoalEnd",
"UseSoccerGoalStart",
"UseSpudCannon",
"Vance",
"Vance01",
"Vance02",
"VanceWait",
"VandalTag",
"Vehicles",
"VFlyTrap",
"Victim",
"Victim2",
"VictimLoop",
"Victory",
"Victory_Taunt",
"Vomit",
"Vomit2",
"Vomit3",
"VomitStun",
"VTiredActions",
"Wait",
"WaitForAnims",
"WaitForInput",
"WaitForObjective",
"WaitForPlayer",
"WaitForPlayerMoving",
"WaitForVictim",
"WaitInside",
"WakeUp",
"WakeUpBank",
"WakeUp_Anywhere",
"WAKEUP_PUBLIC1",
"Wake_Up_Cam",
"Wake_Up_Cam_2",
"Walk",
"WalkBasic",
"WalkStop",
"WalkTOWall",
"Walk_Speeds",
"Walk_StartLoco",
"WallClimb",
"WallHits",
"WallSmash",
"Wall_Break",
"Wall_End",
"WALL_HIT",
"Wall_Hold",
"Wall_Idle",
"Wall_Lean",
"Wall_Smoke",
"Wall_Smoke_A",
"Wall_Smoke_B",
"Wall_Smoke_Idle",
"Wall_Smoke_Idle_Child",
"Wall_Smoke_Start",
"Wall_Smoke_Stub",
"Wall_Start",
"WantsToSmoke",
"WarmingHandsLoop",
"WarmthFactor",
"Wash01",
"WashHands",
"WaterCausticsParent",
"WaterFaucet",
"WaterPipe",
"Wave",
"WaveAtSecretary",
"WaveAtSecretary_Child",
"WaveToSec",
"WBALLOON",
"WBrush",
"WBWet",
"WB_Splash",
"WCamera",
"WDigCam",
"WDish",
"Weak",
"WeakPed",
"WEAPON",
"WeaponActions",
"WeaponAttach",
"WeaponCrouch",
"WeaponDetach",
"WeaponDrop",
"WeaponFire",
"WeaponIdle",
"WeaponInit",
"WeaponLoco",
"WeaponRemoval",
"WeaponRun",
"Weapons",
"WeaponSelect",
"WeaponSocial",
"WeaponSteal",
"WeaponStrafe",
"WeaponWalk",
"WedgieAttack",
"WedgieAttackComplete",
"WedgiePull",
"WedgieReceive",
"WeedKillerSpray2",
"Welcome",
"WFireExt",
"Wfrisbee",
"Wftball",
"WFtBomb",
"WhatsUp_Speech",
"WHatSVase",
"WHatVase",
"WheelBarrowInteract",
"Whistle",
"Windmill_L",
"Windmill_R",
"WinRaceNIS",
"with",
"WonderNIS",
"WonGame",
"Work",
"Workout",
"Workout_Child",
"Worth",
"WPCANNON",
"WProps",
"WrestlingACT",
"WrestlingNPC",
"wrong!",
"Wtennis",
"WTRAY",
"wtrpipe",
"wtrpipeB",
"wtrpipeC",
"wtrpipeD",
"w_bunchofphotos",
"W_Candy",
"w_chocbox",
"w_crab",
"W_Crutch",
"W_DeadRat",
"W_Dirt",
"W_DrugBttl",
"W_Flashlight",
"W_Fountain",
"W_Itch",
"W_MONEY",
"w_package",
"W_PGun",
"W_PRANK",
"W_ScHouse",
"W_Snowball",
"yardstick",
"Yay",
"Yrdstk_Break",
"Zoe",
"Zoe01",
"Zoe02",
"Zoe03",
"ZoeDistract",
"ZoeDistractWait",
"ZoeFailure",
"ZoeIdle",
"Zoe_01",
"Zoe_02",
"Zoe_03"
  }

  actions = {
"Act/Globals.act",
"Act/Globals/Cameras.act",
"Act/Globals/CutScene.act",
"Act/Globals/GlobalActions.act",
"Act/Globals/NPCFacial.act",
"Act/Globals/PlayerFacial.act",
"Act/Globals/SimpleLoco.act",
"Act/AI/AI.act",
"Act/AI/AI_Dog.act",
"Act/AI/AI_Rat.act",
"Act/Anim/AN_DOG.act",
"Act/Anim/AN_RAT.act",
"Act/Anim/Authority.act",
"Act/Anim/B_Striker_A.act",
"Act/Anim/CV_Female_A.act",
"Act/Anim/CV_Male_A.act",
"Act/Anim/CV_OLD.act",
"Act/Anim/DO_Grappler_A.act",
"Act/Anim/DO_Striker_A.act",
"Act/Anim/GS_Fat_A.act",
"Act/Anim/GS_Female_A.act",
"Act/Anim/GS_Male_A.act",
"Act/Anim/G_Grappler_A.act",
"Act/Anim/G_Johnny.act",
"Act/Anim/G_Melee_A.act",
"Act/Anim/G_Striker_A.act",
"Act/Anim/J_Grappler_A.act",
"Act/Anim/J_Mascot.act",
"Act/Anim/J_Melee_A.act",
"Act/Anim/J_Striker_A.act",
"Act/Anim/LE_Orderly_A.act",
"Act/Anim/N_Ranged_A.act",
"Act/Anim/N_Striker_A.act",
"Act/Anim/N_Striker_B.act",
"Act/Anim/P_Grappler_A.act",
"Act/Anim/P_Striker_A.act",
"Act/Anim/P_Striker_B.act",
"Act/Anim/TE_Female_A.act",
"Act/CameraActions.act",
"Act/HitTree.act",
"Act/Missions.act",
"Act/Player.act",
"Act/PlayerAI.act",
"Act/Vehicles.act",
"Act/WProps.act",
"Act/Weapons.act",
}
end

function load_style()
  lst = {
    {name = "Player",node = {
	  {"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Release/JAB","act/anim/Player.act"},
	  {"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Release/Cross","act/anim/Player.act"},
	  {"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Release/Hook","act/anim/Player.act"},
	  {"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Release/GutPunch","act/anim/Player.act"},
	  {"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Left5/Release/UpperCut","act/anim/Player.act"},
	  {"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Release/HeavyAttacks","act/anim/Player.act"},
	  {"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Release/Unblockable/LegKickReleaseMax","act/anim/Player.act"},
	  {"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Release/Unblockable/JackieKick","act/anim/Player.act"},
	  {"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Release/Unblockable/HighKick","act/anim/Player.act"},
	  {"/Global/Player/Attacks/Strikes/RunningAttacks/HeavyAttacks/RunShoulder","act/anim/Player.act"},
	}},
	{name = "GS_Male_A",node = {
	  {"/Global/GS_Male_A/Offense/Short/LightAttacks/SloppyJAB/SloppyCross","act/anim/GS_Male_A.act"},
	  {"/Global/GS_Male_A/Offense/Short/LightAttacks/SloppyJAB","act/anim/GS_Male_A.act"},
	  {"/Global/GS_Male_A/Offense/Short/HeavyAttacks/Shove2Hand","act/anim/GS_Male_A.act"},
	}},
	{name = "GS_Female_A",node = {
	  {"/Global/GS_Female_A/Offense/Short/Strikes/LightAttacks/Slap","act/anim/GS_Female_A.act"},
	  {"/Global/GS_Female_A/Offense/Short/Strikes/HeavyAttacks","act/anim/GS_Female_A.act"},
	}},
	{name = "Nemesis",node = {
	  {"/Global/Nemesis/Offense/Short/Strikes/LightAttacks/LeftHook/RightCross/HeavyAttacks/HeavyPunch2","Act/Anim/Nemesis.act"},
	  {"/Global/Nemesis/Offense/Short/Strikes/HeavyAttacks/HeavyPunch1","Act/Anim/Nemesis.act"},
	  {"/Global/Nemesis/Offense/Short/Strikes/HeavyAttacks/HeavyPunch2","Act/Anim/Nemesis.act"},
	  {"/Global/Nemesis/Offense/Short/Strikes/LightAttacks/JAB/HeavyAttacks/SuperUppercut/Knee","Act/Anim/Nemesis.act"},
	  {"/Global/Nemesis/Offense/Medium/Strikes/LightAttacks/OverHandR/HeavyAttacks/Knee","Act/Anim/Nemesis.act"},
	  {"/Global/Nemesis/Offense/Medium/Strikes/HeavyAttacks/JackieKick","Act/Anim/Nemesis.act"},
	}},
	{name = "B_Striker_A",node = {
	  {"/Global/B_Striker_A/Offense/Short/Strikes/LightAttacks/WindMill_R/WindMill_L","act/anim/B_Striker_A.act"},
	  {"/Global/B_Striker_A/Offense/Short/Strikes/HeavyAttacks/SwingPunch/SwingPunch_R","act/anim/B_Striker_A.act"},
	  {"/Global/B_Striker_A/Offense/Short/Strikes/HeavyAttacks/GutKick/GutKick_R","act/anim/B_Striker_A.act"},
	}},
    {name = "BOSS_Russell",node = {
	  {"/Global/BOSS_Russell/Offense/Short/Strikes/LightAttacks/OverHand","act/anim/BOSS_Russell.act"},
	  {"/Global/BOSS_Russell/Offense/Medium/Strikes/HeavyAttacks","act/anim/BOSS_Russell.act"},
	  {"/Global/BOSS_Russell/Offense/Medium/Strikes/Unblockable/DoubleAxeHandle","act/anim/BOSS_Russell.act"},
	  {"/Global/BOSS_Russell/Offense/Special/Invincible/HeadButt/HeadButt_AnticStart","act/anim/BOSS_Russell.act"},
	  {"/Global/BOSS_Russell/Defense/Evade/EvadeInterrupt/EvadeInterrupt","act/anim/BOSS_Russell.act"},
	  {"/Global/BOSS_Russell/Offense/GroundAttack/GroundStomp1","act/anim/BOSS_Russell.act"},
	}},
	{name = "Russell_102",node = {
	  {"/Global/Russell_102/Offense/Short/Strikes/LightAttacks/WindMill_R/WindMill_L/HeavyAttacks/SwingPunch_R","act/anim/Russell_102.act"},
	  {"/Global/Russell_102/Offense/Short/Medium/RisingAttacks","act/anim/Russell_102.act"},
	}},
	{name = "P_Striker_A",node = {
	  {"/Global/P_Striker_A/Offense/Short/Strikes/LightAttacks/JAB/Cross","act/anim/P_Striker_A.act"},
	  {"/Global/P_Striker_A/Offense/Short/Strikes/LightAttacks/LeftHook/FinishingCross","act/anim/P_Striker_A.act"},
	  {"/Global/P_Striker_A/Offense/Short/Strikes/HeavyAttacks/Uppercut","act/anim/P_Striker_A.act"},
	  {"/Global/P_Striker_A/Offense/Medium/HeavyAttacks","act/anim/P_Striker_A.act"},
      {"/Global/P_Striker_A/Defense/Evade/EvadeCounter/LightAttacks/EvadeBackPunch","act/anim/P_Striker_A.act"},
	}},
	{name = "P_Striker_B",node = {
	  {"/Global/P_Striker_B/Offense/Short/Strikes/LightAttacks/LeftJab/Hook","act/anim/P_Striker_B.act"},
	  {"/Global/P_Striker_B/Offense/Short/Strikes/HeavyAttacks/Hook2","act/anim/P_Striker_B.act"},
	  {"/Global/P_Striker_B/Offense/Short/Strikes/Unblockable/HeavyPunchCharge","act/anim/P_Striker_B.act"},
	  {"/Global/P_Striker_B/Offense/Short/Grapples/HeavyAttacks/Catch_Throw","act/anim/P_Striker_B.act"},
	}},
	{name = "P_Grappler_A",node = {
	  {"/Global/P_Grappler_A/Offense/Short/Strikes/LightAttacks/LeftJabHead/LeftJabBody","act/anim/P_Grappler_A.act"},
	  {"/Global/P_Grappler_A/Offense/Short/Strikes/HeavyAttacks/RightCross/LeftDown","act/anim/P_Grappler_A.act"},
	  {"/Global/P_Grappler_A/Offense/Short/Strikes/Unblockable/HeavyPunchCharge","act/anim/P_Grappler_A.act"},
	  {"/Global/P_Grappler_A/Offense/Medium/Strikes/Kick/TauntKick","act/anim/P_Grappler_A.act"},
	}},
	{name = "P_Bif",node = {
	  {"/Global/P_Bif/Offense/Short/LightAttacks/JAB/Cross","act/anim/P_Bif.act"},
	  {"/Global/P_Bif/Offense/Short/HeavyAttacks/LeftHook","act/anim/P_Bif.act"},
	  {"/Global/P_Bif/Offense/Short/HeavyAttacks/RightHook","act/anim/P_Bif.act"},
	  {"/Global/P_Bif/Offense/Medium/HeavyAttacks/GutPunch","act/anim/P_Bif.act"},
	  {"/Global/P_Bif/Offense/Medium/HeavyAttacks/StraightPunch","act/anim/P_Bif.act"},
	  {"/Global/P_Bif/Offense/Special/HeavyAttacks","act/anim/P_Bif.act"},
	}},
	{name = "BOSS_Darby",node = {
	  {"/Global/BOSS_Darby/Offense/Short/Strikes/LightAttacks/LeftJab/Hook","act/anim/BOSS_Darby.act"},
	  {"/Global/BOSS_Darby/Offense/Short/Strikes/HeavyAttacks/Hook2","act/anim/BOSS_Darby.act"},
	  {"/Global/BOSS_Darby/Offense/Medium/Medium/HeavyAttacks/JAB/Cross","act/anim/BOSS_Darby.act"},
	  {"/Global/BOSS_Darby/Offense/Short/Strikes/LightAttacks/LeftHook/FinishingCross","act/anim/BOSS_Darby.act"},
	  {"/Global/BOSS_Darby/Offense/Short/Strikes/Unblockable/HeavyPunchCharge/HeavyPunch","act/anim/BOSS_Darby.act"},
	  {"/Global/BOSS_Darby/Offense/Short/Grapples/HeavyAttacks/Catch_Throw/UpperLandGV","act/anim/BOSS_Darby.act"},
	  {"/Global/BOSS_Darby/Offense/Short/Grapples/HeavyAttacks/Catch_Throw/Finisher","act/anim/BOSS_Darby.act"},
	  {"/Global/BOSS_Darby/Offense/Special/Dash/Dash/Uppercut/ShortDarby","act/anim/BOSS_Darby.act"},
	  {"/Global/BOSS_Darby/Offense/Short","act/anim/BOSS_Darby.act"},
	  {"/Global/P_Bif/Offense/Short/LightAttacks/JAB/Cross","act/anim/P_Bif.act"},
	  {"/Global/P_Bif/Offense/Short/HeavyAttacks/LeftHook","act/anim/P_Bif.act"},
	  {"/Global/P_Bif/Offense/Short/HeavyAttacks/RightHook","act/anim/P_Bif.act"},
	  {"/Global/P_Bif/Offense/Medium/HeavyAttacks/GutPunch","act/anim/P_Bif.act"},
	  {"/Global/P_Bif/Offense/Medium/HeavyAttacks/StraightPunch","act/anim/P_Bif.act"},
	  {"/Global/P_Bif/Offense/Special/HeavyAttacks","act/anim/P_Bif.act"},
	}},
	{name = "G_Striker_A",node = {
	  {"/Global/G_Striker_A/Offense/Short/Strikes/LightAttacks/RightHook/LeftHook/RightStomach","act/anim/G_Striker_A.act"},
	  {"/Global/G_Striker_A/Offense/Short/Strikes/HeavyAttacks/HeavyKnee","act/anim/G_Striker_A.act"},
	  {"/Global/G_Striker_A/Offense/Short/Strikes/HeavyAttacks/HeavyKick","act/anim/G_Striker_A.act"},
	  {"/Global/G_Striker_A/Offense/Medium/Strikes/HeavyAttack/KickThrust","act/anim/G_Striker_A.act"},
	  {"/Global/G_Striker_A/Offense/GroundAttack/GroundPunch","act/anim/G_Striker_A.act"},
	}},
	{name = "G_Melee_A",node = {
	  {"/Global/G_Melee_A/Offense/Short/Strikes/LightAttacks/RightHook/LeftHook/RightStomach","act/anim/G_Melee_A.act"},
	  {"/Global/G_Melee_A/Offense/Medium/Strikes/HeavyAttacks/HeavyKick","act/anim/G_Melee_A.act"},
	  {"/Global/G_Melee_A/Offense/Short/Strikes/HeavyAttacks","act/anim/G_Melee_A.act"},
	  {"/Global/G_Melee_A/Offense/GroundAttack/GroundPunch","act/anim/G_Melee_A.act"},
	  {"/Global/Actions/Grapples/Front/Grapples/GrappleOpps/Melee/Greaser/Takedown","act/anim/G_Melee_A.act"},
	}},
	{name = "G_Grappler_A",node = {
	  {"/Global/G_Grappler_A/Offense/Short/Strikes/HeavyAttacks/RightHook/Uppercut","act/anim/G_Grappler_A.act"},
	  {"/Global/G_Grappler_A/Offense/Short/Strikes/HeavyAttacks/RightHook","act/anim/G_Melee_A.act"},
	  {"/Global/G_Grappler_A/Offense/Short/Strikes/HeavyAttacks/BootKick","act/anim/G_Melee_A.act"},
	  {"/Global/G_Grappler_A/Offense/Medium/Strikes/HeavyAttacks/HeavyAttacks","act/anim/G_Melee_A.act"},
	}},
	{name = "G_Ranged_A",node = {
	  {"/Global/G_Ranged_A/Offense/Short/Strikes/LightAttacks/RightHook/HeavyKnee","act/anim/G_Ranged_A.act"},
	  {"/Global/G_Ranged_A/Offense/Short/Strikes/LightAttacks/RightHook","act/anim/G_Melee_A.act"},
	  {"/Global/G_Ranged_A/Offense/Medium/Strikes/HeavyAttacks/HeavyKnee","act/anim/G_Melee_A.act"},
	}},
	{name = "Norton",node = {
	  {"/Global/Norton/Offense/Short/Swing1","act/anim/3_05_Norton.act"},
	  {"/Global/Norton/Offense/Short/Swing2","act/anim/3_05_Norton.act"},
	  {"/Global/Norton/Offense/Medium/Unblockable","act/anim/3_05_Norton.act"},
	}},
	{name = "G_Johnny",node = {
	  {"/Global/G_Johnny/Offense/Short/Strikes/LightAttacks","act/anim/G_Johnny.act"},
	  {"/Global/G_Johnny/Offense/Short/Strikes/HeavyKick/HeavyKick","act/anim/G_Johnny.act"},
	  {"/Global/G_Johnny/Offense/Medium/Strikes/HeavyAttack/HeavyKick","act/anim/G_Johnny.act"},
	  {"/Global/G_Johnny/Offense/Short/Strikes/HeavyKick","act/anim/G_Johnny.act"},
	  {"/Global/G_Johnny/Offense/Medium/Strikes/HeavyAttack","act/anim/G_Johnny.act"},
	  {"/Global/G_Johnny/Offense/Special/SpecialActions/LightAttacks","act/anim/G_Johnny.act"},
	  {"/Global/G_Johnny/Offense/Short/Strikes","act/anim/G_Johnny.act"},
	}},
	{name = "N_Striker_A",node = {
	  {"/Global/N_Striker_A/Offense/Short/Strikes/LightAttacks/NerdJab","act/anim/N_Striker_A.act"},
	  {"/Global/N_Striker_A/Offense/Short/Strikes/LightAttacks/NerdJab/NerdHook","act/anim/N_Striker_A.act"},
	  {"/Global/N_Striker_A/Offense/Short/Strikes/HeavyAttacks/FatSlap","act/anim/N_Striker_A.act"},
	  {"/Global/N_Striker_A/Offense/Short/Strikes/HeavyAttacks/FatSlap/AssThrust","act/anim/N_Striker_A.act"},
	}},
	{name = "N_Striker_B",node = {
	  {"/Global/N_Striker_B/Offense/Short/Strikes/LightAttacks/NerdJab/NerdHook","act/anim/N_Striker_B.act"},
	  {"/Global/N_Striker_B/Offense/Short/Strikes/HeavyAttacks/Flail","act/anim/N_Striker_B.act"},
	  {"/Global/N_Striker_B/Offense/Medium","act/anim/N_Striker_B.act"},
	}},
	{name = "N_Ranged_A",node = {
	  {"/Global/N_Ranged_A/Offense/Short/Strikes/LightAttacks/NerdJab/NerdHook","act/anim/N_Ranged_A.act"},
	  {"/Global/N_Ranged_A/Offense/Medium/Strikes/HeavyAttacks","act/anim/N_Ranged_A.act"},
	  {"/Global/N_Ranged_A/Defense/Flail","act/anim/N_Ranged_A.act"},
	}},
	{name = "J_Striker_A",node = {
	  {"/Global/J_Striker_A/Offense/Short/Strikes/LightAttacks/JAB","act/anim/J_Striker_A.act"},
	  {"/Global/J_Striker_A/Offense/Short/Strikes/LightAttacks/JAB/Elbow","act/anim/J_Striker_A.act"},
	  {"/Global/J_Striker_A/Offense/Short/Strikes/LightAttacks/JAB/Elbow/HeavyAttacks","act/anim/J_Striker_A.act"},
	  {"/Global/J_Striker_A/Offense/Short/Strikes/LightAttacks/JAB/Elbow/HeavyAttacks/Uppercut","act/anim/J_Striker_A.act"},
	  {"/Global/J_Striker_A/Offense/Medium/Grapples/GrapplesAtempt/Takedown","act/anim/J_Striker_A.act"},
	}},
	{name = "J_Melee_A",node = {
	  {"/Global/J_Melee_A/Offense/Short/Strikes/LightAttacks/RightHand","act/anim/J_Melee_A.act"},
	  {"/Global/J_Melee_A/Offense/Short/Strikes/LightAttacks/RightHand/LeftHand","act/anim/J_Melee_A.act"},
	  {"/Global/J_Melee_A/Offense/Medium/Strikes/HeavyAttacks/HeavyRight","act/anim/J_Melee_A.act"},
	  {"/Global/J_Melee_A/Offense/Medium/Strikes/Unblockable","act/anim/J_Melee_A.act"},
	}},
	{name = "J_Grappler_A",node = {
	  {"/Global/J_Grappler_A/Offense/Short/Strikes/HeavyAttacks","act/anim/J_Grappler_A.act"},
	  {"/Global/J_Grappler_A/Offense/Medium/Strikes/HeavyAttacks/RightPunch/Axehandle","act/anim/J_Grappler_A.act"},
	}},
	{name = "J_Ted",node = {
	  {"/Global/J_Ted/Offense/Short/Strikes/LightAttacks/JAB","act/anim/J_Ted.act"},
	  {"/Global/J_Ted/Offense/Medium/Grapples/GrapplesAtempt","act/anim/J_Ted.act"},
	}},
	{name = "DO_Striker_A",node = {
	  {"/Global/DO_Striker_A/Offense/Short","act/anim/DO_Striker_A.act"},
	  {"/Global/DO_Striker_A/Offense/Medium/HeavyAttacks","act/anim/DO_Striker_A.act"},
	}},
	{name = "DO_Edgar",node = {
	  {"/Global/DO_Edgar/Offense/Short/LightAttacks/Punch1","act/anim/DO_Edgar.act"},
	  {"/Global/DO_Edgar/Offense/Medium/HeavyAttacks","act/anim/DO_Edgar.act"},
	}},
	{name = "Crazy_Basic",node = {
	  {"/Global/Crazy_Basic/Offense/Short/Short/Strikes/LightAttacks/WindMill_R","act/anim/Crazy_Basic.act"},
	  {"/Global/Crazy_Basic/Offense/Short/Short/Strikes/LightAttacks/WindMill_R/WindMill_L","act/anim/Crazy_Basic.act"},
	  {"/Global/Crazy_Basic/Offense/Short/Short/Strikes/LightAttacks/WindMill_R/WindMill_L/HeavyAttacks/SwingPunch_R","act/anim/Crazy_Basic.act"},
	  {"/Global/Crazy_Basic/Offense/Medium","act/anim/Crazy_Basic.act"},
	}},
	{name = "others",node = {
	  {"/Global/GS_Male_A/Offense/Short/LightAttacks/SloppyJAB/SloppyCross","act/anim/GS_Male_A.act"},
	  {"/Global/GS_Male_A/Offense/Short/LightAttacks/SloppyJAB","act/anim/GS_Male_A.act"},
	  {"/Global/GS_Male_A/Offense/Short/HeavyAttacks/Shove2Hand","act/anim/GS_Male_A.act"},
	}},
  }
end

function S_SetupNode()
  anims = {
    {"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Release/JAB","act/anim/Player.act"},
	{"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Release/Cross","act/anim/Player.act"},
	{"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Release/Hook","act/anim/Player.act"},
	{"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Release/GutPunch","act/anim/Player.act"},
	{"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Left5/Release/UpperCut","act/anim/Player.act"},
	{"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Release/HeavyAttacks","act/anim/Player.act"},
	{"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Release/Unblockable/LegKickReleaseMax","act/anim/Player.act"},
	{"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Release/Unblockable/JackieKick","act/anim/Player.act"},
	{"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Release/Unblockable/HighKick","act/anim/Player.act"},
	{"/Global/Player/Attacks/Strikes/RunningAttacks/HeavyAttacks/RunShoulder","act/anim/Player.act"},
	{"/Global/BoxingPlayer/Attacks/BoxingAttacks/LightAttacks/Left1","act/anim/BoxingPlayer.act"},
	{"/Global/BoxingPlayer/Attacks/BoxingAttacks/LightAttacks/Right2","act/anim/BoxingPlayer.act"},
	{"/Global/BoxingPlayer/Attacks/BoxingAttacks/LightAttacks/Left3","act/anim/BoxingPlayer.act"},
	{"/Global/BoxingPlayer/Attacks/BoxingAttacks/LightAttacks/Right4","act/anim/BoxingPlayer.act"},
	{"/Global/BoxingPlayer/Attacks/BoxingAttacks/LightAttacks/Left5","act/anim/BoxingPlayer.act"},
	{"/Global/GS_Male_A/Offense/Short/LightAttacks/SloppyJAB/SloppyCross","act/anim/GS_Male_A.act"},
	{"/Global/GS_Male_A/Offense/Short/LightAttacks/SloppyJAB","act/anim/GS_Male_A.act"},
	{"/Global/GS_Male_A/Offense/Short/HeavyAttacks/Shove2Hand","act/anim/GS_Male_A.act"},
	{"/Global/GS_Female_A/Offense/Short/Strikes/LightAttacks/Slap","act/anim/GS_Female_A.act"},
	{"/Global/GS_Female_A/Offense/Short/Strikes/HeavyAttacks","act/anim/GS_Female_A.act"},
	{"/Global/Nemesis/Offense/Short/Strikes/LightAttacks/LeftHook/RightCross/HeavyAttacks/HeavyPunch2","Act/Anim/Nemesis.act"},
	{"/Global/Nemesis/Offense/Short/Strikes/HeavyAttacks/HeavyPunch1","Act/Anim/Nemesis.act"},
	{"/Global/Nemesis/Offense/Short/Strikes/HeavyAttacks/HeavyPunch2","Act/Anim/Nemesis.act"},
	{"/Global/Nemesis/Offense/Short/Strikes/LightAttacks/JAB/HeavyAttacks/SuperUppercut/Knee","Act/Anim/Nemesis.act"},
	{"/Global/Nemesis/Offense/Medium/Strikes/LightAttacks/OverHandR/HeavyAttacks/Knee","Act/Anim/Nemesis.act"},
	{"/Global/Nemesis/Offense/Medium/Strikes/HeavyAttacks/JackieKick","Act/Anim/Nemesis.act"},
	{"/Global/B_Striker_A/Offense/Short/Strikes/LightAttacks/WindMill_R/WindMill_L","act/anim/B_Striker_A.act"},
	{"/Global/B_Striker_A/Offense/Short/Strikes/HeavyAttacks/SwingPunch/SwingPunch_R","act/anim/B_Striker_A.act"},
	{"/Global/B_Striker_A/Offense/Short/Strikes/HeavyAttacks/GutKick/GutKick_R","act/anim/B_Striker_A.act"},
	{"/Global/BOSS_Russell/Offense/Short/Strikes/LightAttacks/OverHand","act/anim/BOSS_Russell.act"},
	{"/Global/BOSS_Russell/Offense/Medium/Strikes/HeavyAttacks","act/anim/BOSS_Russell.act"},
	{"/Global/BOSS_Russell/Offense/Medium/Strikes/Unblockable/DoubleAxeHandle","act/anim/BOSS_Russell.act"},
	{"/Global/BOSS_Russell/Offense/Special/Invincible/HeadButt/HeadButt_AnticStart","act/anim/BOSS_Russell.act"},
	{"/Global/BOSS_Russell/Defense/Evade/EvadeInterrupt/EvadeInterrupt","act/anim/BOSS_Russell.act"},
	{"/Global/BOSS_Russell/Offense/GroundAttack/GroundStomp1","act/anim/BOSS_Russell.act"},
	{"/Global/Russell_102/Offense/Short/Strikes/LightAttacks/WindMill_R/WindMill_L/HeavyAttacks/SwingPunch_R","act/anim/Russell_102.act"},
	{"/Global/Russell_102/Offense/Short/Medium/RisingAttacks","act/anim/Russell_102.act"},
	{"/Global/P_Striker_A/Offense/Short/Strikes/LightAttacks/JAB/Cross","act/anim/P_Striker_A.act"},
	{"/Global/P_Striker_A/Offense/Short/Strikes/LightAttacks/LeftHook/FinishingCross","act/anim/P_Striker_A.act"},
	{"/Global/P_Striker_A/Offense/Short/Strikes/HeavyAttacks/Uppercut","act/anim/P_Striker_A.act"},
	{"/Global/P_Striker_A/Offense/Medium/HeavyAttacks","act/anim/P_Striker_A.act"},
	{"/Global/P_Striker_A/Defense/Evade/EvadeCounter/LightAttacks/EvadeBackPunch","act/anim/P_Striker_A.act"},
	{"/Global/P_Striker_B/Offense/Short/Strikes/LightAttacks/LeftJab/Hook","act/anim/P_Striker_B.act"},
	{"/Global/P_Striker_B/Offense/Short/Strikes/HeavyAttacks/Hook2","act/anim/P_Striker_B.act"},
	{"/Global/P_Striker_B/Offense/Short/Strikes/Unblockable/HeavyPunchCharge","act/anim/P_Striker_B.act"},
	{"/Global/P_Striker_B/Offense/Short/Grapples/HeavyAttacks/Catch_Throw","act/anim/P_Striker_B.act"},
	{"/Global/P_Grappler_A/Offense/Short/Strikes/LightAttacks/LeftJabHead/LeftJabBody","act/anim/P_Grappler_A.act"},
	{"/Global/P_Grappler_A/Offense/Short/Strikes/HeavyAttacks/RightCross/LeftDown","act/anim/P_Grappler_A.act"},
	{"/Global/P_Grappler_A/Offense/Short/Strikes/Unblockable/HeavyPunchCharge","act/anim/P_Grappler_A.act"},
	{"/Global/P_Grappler_A/Offense/Medium/Strikes/Kick/TauntKick","act/anim/P_Grappler_A.act"},
	{"/Global/P_Bif/Offense/Short/LightAttacks/JAB/Cross","act/anim/P_Bif.act"},
	{"/Global/P_Bif/Offense/Short/HeavyAttacks/LeftHook","act/anim/P_Bif.act"},
	{"/Global/P_Bif/Offense/Short/HeavyAttacks/RightHook","act/anim/P_Bif.act"},
	{"/Global/P_Bif/Offense/Medium/HeavyAttacks/GutPunch","act/anim/P_Bif.act"},
	{"/Global/P_Bif/Offense/Medium/HeavyAttacks/StraightPunch","act/anim/P_Bif.act"},
	{"/Global/P_Bif/Offense/Special/HeavyAttacks","act/anim/P_Bif.act"},
	{"/Global/BOSS_Darby/Offense/Short/Strikes/LightAttacks/LeftJab/Hook","act/anim/BOSS_Darby.act"},
	{"/Global/BOSS_Darby/Offense/Short/Strikes/HeavyAttacks/Hook2","act/anim/BOSS_Darby.act"},
	{"/Global/BOSS_Darby/Offense/Medium/Medium/HeavyAttacks/JAB/Cross","act/anim/BOSS_Darby.act"},
	{"/Global/BOSS_Darby/Offense/Short/Strikes/LightAttacks/LeftHook/FinishingCross","act/anim/BOSS_Darby.act"},
	{"/Global/BOSS_Darby/Offense/Short/Strikes/Unblockable/HeavyPunchCharge/HeavyPunch","act/anim/BOSS_Darby.act"},
	{"/Global/BOSS_Darby/Offense/Short/Grapples/HeavyAttacks/Catch_Throw/UpperLandGV","act/anim/BOSS_Darby.act"},
	{"/Global/BOSS_Darby/Offense/Short/Grapples/HeavyAttacks/Catch_Throw/Finisher","act/anim/BOSS_Darby.act"},
	{"/Global/BOSS_Darby/Offense/Special/Dash/Dash/Uppercut/ShortDarby","act/anim/BOSS_Darby.act"},
	{"/Global/BOSS_Darby/Offense/Short","act/anim/BOSS_Darby.act"},
	{"/Global/G_Striker_A/Offense/Short/Strikes/LightAttacks/RightHook/LeftHook/RightStomach","act/anim/G_Striker_A.act"},
	{"/Global/G_Striker_A/Offense/Short/Strikes/HeavyAttacks/HeavyKnee","act/anim/G_Striker_A.act"},
	{"/Global/G_Striker_A/Offense/Short/Strikes/HeavyAttacks/HeavyKick","act/anim/G_Striker_A.act"},
	{"/Global/G_Striker_A/Offense/Medium/Strikes/HeavyAttack/KickThrust","act/anim/G_Striker_A.act"},
	{"/Global/G_Striker_A/Offense/GroundAttack/GroundPunch","act/anim/G_Striker_A.act"},
	{"/Global/G_Melee_A/Offense/Short/Strikes/LightAttacks/RightHook/LeftHook/RightStomach","act/anim/G_Melee_A.act"},
	{"/Global/G_Melee_A/Offense/Medium/Strikes/HeavyAttacks/HeavyKick","act/anim/G_Melee_A.act"},
	{"/Global/G_Melee_A/Offense/Short/Strikes/HeavyAttacks","act/anim/G_Melee_A.act"},
	{"/Global/G_Melee_A/Offense/GroundAttack/GroundPunch","act/anim/G_Melee_A.act"},
	{"/Global/Actions/Grapples/Front/Grapples/GrappleOpps/Melee/Greaser/Takedown","act/anim/G_Melee_A.act"},
	{"/Global/G_Grappler_A/Offense/Short/Strikes/HeavyAttacks/RightHook/Uppercut","act/anim/G_Grappler_A.act"},
	{"/Global/G_Grappler_A/Offense/Short/Strikes/HeavyAttacks/RightHook","act/anim/G_Melee_A.act"},
	{"/Global/G_Grappler_A/Offense/Short/Strikes/HeavyAttacks/BootKick","act/anim/G_Melee_A.act"},
	{"/Global/G_Grappler_A/Offense/Medium/Strikes/HeavyAttacks/HeavyAttacks","act/anim/G_Melee_A.act"},
	{"/Global/G_Ranged_A/Offense/Short/Strikes/LightAttacks/RightHook/HeavyKnee","act/anim/G_Ranged_A.act"},
	{"/Global/G_Ranged_A/Offense/Short/Strikes/LightAttacks/RightHook","act/anim/G_Melee_A.act"},
	{"/Global/G_Ranged_A/Offense/Medium/Strikes/HeavyAttacks/HeavyKnee","act/anim/G_Melee_A.act"},
	{"/Global/Norton/Offense/Short/Swing1","act/anim/3_05_Norton.act"},
	{"/Global/Norton/Offense/Short/Swing2","act/anim/3_05_Norton.act"},
	{"/Global/Norton/Offense/Medium/Unblockable","act/anim/3_05_Norton.act"},
	{"/Global/G_Johnny/Offense/Short/Strikes/LightAttacks","act/anim/G_Johnny.act"},
	{"/Global/G_Johnny/Offense/Short/Strikes/HeavyKick/HeavyKick","act/anim/G_Johnny.act"},
	{"/Global/G_Johnny/Offense/Medium/Strikes/HeavyAttack/HeavyKick","act/anim/G_Johnny.act"},
	{"/Global/G_Johnny/Offense/Short/Strikes/HeavyKick","act/anim/G_Johnny.act"},
	{"/Global/G_Johnny/Offense/Medium/Strikes/HeavyAttack","act/anim/G_Johnny.act"},
	{"/Global/G_Johnny/Offense/Special/SpecialActions/LightAttacks","act/anim/G_Johnny.act"},
	{"/Global/G_Johnny/Offense/Short/Strikes","act/anim/G_Johnny.act"},
	{"/Global/N_Striker_A/Offense/Short/Strikes/LightAttacks/NerdJab","act/anim/N_Striker_A.act"},
	{"/Global/N_Striker_A/Offense/Short/Strikes/LightAttacks/NerdJab/NerdHook","act/anim/N_Striker_A.act"},
	{"/Global/N_Striker_A/Offense/Short/Strikes/HeavyAttacks/FatSlap","act/anim/N_Striker_A.act"},
	{"/Global/N_Striker_A/Offense/Short/Strikes/HeavyAttacks/FatSlap/AssThrust","act/anim/N_Striker_A.act"},
	{"/Global/N_Striker_B/Offense/Short/Strikes/LightAttacks/NerdJab/NerdHook","act/anim/N_Striker_B.act"},
	{"/Global/N_Striker_B/Offense/Short/Strikes/HeavyAttacks/Flail","act/anim/N_Striker_B.act"},
	{"/Global/N_Striker_B/Offense/Medium","act/anim/N_Striker_B.act"},
	{"/Global/N_Ranged_A/Offense/Short/Strikes/LightAttacks/NerdJab","act/anim/N_Ranged_A.act"},
	{"/Global/N_Ranged_A/Offense/Short/Strikes/LightAttacks/NerdJab/NerdHook","act/anim/N_Ranged_A.act"},
	{"/Global/N_Ranged_A/Offense/Medium/Strikes/HeavyAttacks","act/anim/N_Ranged_A.act"},
	{"/Global/N_Ranged_A/Defense/Flail","act/anim/N_Ranged_A.act"},
	{"/Global/N_Earnest/Offense/FireSpudGun","act/anim/N_Earnest.act"},
	{"/Global/J_Striker_A/Offense/Short/Strikes/LightAttacks/JAB","act/anim/J_Striker_A.act"},
	{"/Global/J_Striker_A/Offense/Short/Strikes/LightAttacks/JAB/Elbow","act/anim/J_Striker_A.act"},
	{"/Global/J_Striker_A/Offense/Short/Strikes/LightAttacks/JAB/Elbow/HeavyAttacks","act/anim/J_Striker_A.act"},
	{"/Global/J_Striker_A/Offense/Short/Strikes/LightAttacks/JAB/Elbow/HeavyAttacks/Uppercut","act/anim/J_Striker_A.act"},
	{"/Global/J_Striker_A/Offense/Medium/Grapples/GrapplesAtempt/Takedown","act/anim/J_Striker_A.act"},
	{"/Global/J_Melee_A/Offense/Short/Strikes/LightAttacks/RightHand","act/anim/J_Melee_A.act"},
	{"/Global/J_Melee_A/Offense/Short/Strikes/LightAttacks/RightHand/LeftHand","act/anim/J_Melee_A.act"},
	{"/Global/J_Melee_A/Offense/Medium/Strikes/HeavyAttacks/HeavyRight","act/anim/J_Melee_A.act"},
	{"/Global/J_Melee_A/Offense/Medium/Strikes/Unblockable","act/anim/J_Melee_A.act"},
	{"/Global/J_Grappler_A/Offense/Short/Strikes/HeavyAttacks","act/anim/J_Grappler_A.act"},
	{"/Global/J_Grappler_A/Offense/Medium/Strikes/HeavyAttacks/RightPunch/Axehandle","act/anim/J_Grappler_A.act"},
	{"/Global/J_Ted/Offense/Short/Strikes/LightAttacks/JAB","act/anim/J_Ted.act"},
	{"/Global/J_Ted/Offense/Medium/Grapples/GrapplesAtempt","act/anim/J_Ted.act"},
	{"/Global/J_Mascot/Offense/Medium/Strikes/LightAttacks/WindMill_R","act/anim/J_Mascot.act"},
	{"/Global/DO_Striker_A/Offense/Short","act/anim/DO_Striker_A.act"},
	{"/Global/DO_Striker_A/Offense/Medium/HeavyAttacks","act/anim/DO_Striker_A.act"},
	{"/Global/DO_Grappler_A/Offense/Short","act/anim/DO_Grappler_A.act"},
	{"/Global/DO_Edgar/Offense/Short/LightAttacks/Punch1","act/anim/DO_Edgar.act"},
	{"/Global/DO_Edgar/Offense/Medium/HeavyAttacks","act/anim/DO_Edgar.act"},
	{"/Global/Crazy_Basic/Offense/Short/Short/Strikes/LightAttacks/WindMill_R","act/anim/Crazy_Basic.act"},
	{"/Global/Crazy_Basic/Offense/Short/Short/Strikes/LightAttacks/WindMill_R/WindMill_L","act/anim/Crazy_Basic.act"},
	{"/Global/Crazy_Basic/Offense/Short/Short/Strikes/LightAttacks/WindMill_R/WindMill_L/HeavyAttacks/SwingPunch_R","act/anim/Crazy_Basic.act"},
	{"/Global/Crazy_Basic/Offense/Medium","act/anim/Crazy_Basic.act"},
	{"/Global/Actions/Grapples/Front/Grapples/GrappleAttempt","Act/Globals.act"},
	{"/Global/Ambient/Scripted/Wall_Hold/GrappleAttempt/GrappleSuccess/Hold_Idle/Harassing","Globals/Ambient.act"},
	{"/Global/Actions/Grapples/Front/Grapples/GrappleMoves","Act/Globals.act"},
	{"/Global/CV_Male_A/Offense/Short/LightAttacks/SloppyJAB/SloppyCross","act/anim/CV_Male_A.act"},
	{"/Global/CV_Male_A/Offense/Short/Grapples/GrapplesAtempt","act/anim/CV_Male_A.act"},
	{"/Global/CV_Female_A/Offense/Short/LightAttacks/Slap","act/anim/CV_Female_A.act"},
	{"/Global/CV_Female_A/Offense/Short/HeavyAttacks","act/anim/CV_Female_A.act"},
	{"/Global/CV_OLD/Offense/Short/HeavyAttacks","act/anim/CV_OLD.act"},
	{"/Global/CV_Drunk/Offense/Short/Grapples/GrapplesAtempt","act/anim/CV_Drunk.act"},
	{"/Global/Actions/RisingAttacks/HeavyAttacks/RisingAttacks","Globals/G_Striker_A.act"},
  }
end

function S_SetupAnimMenu()
  siv = {
    "1.Play it right now",
	"2.Play it to all peds",
	"3.Play it when they're near me",
  }
end

function S_SetupSpeech()
  speech = {
    "ALLY_ABOUT_TO_LEAVE",
    "ALLY_ACCEPT_ALLIANCE",
    "ALLY_CHATTER",
    "ALLY_HELP_ME",
    "AMBIENT_SCENARIO",
    "ART",
    "ASS_PINCHED",
    "ASYLUM",
    "ASYLUM_PA",
    "ATTACKED",
    "BASEBALL",
    "BIKE_CRASH",
    "BIKE_SEE_TRICK",
    "BIKE_SEE_TRICK_FAIL",
    "BIKE_STEALING",
    "BIKE_STOLEN",
    "BOISTEROUS",
    "BRAG_FOUNTAIN",
    "BUMPED",
    "BUMP_FRIENDLY",
    "BUMP_IN_CAR",
    "BUMP_RUDE",
    "BUMP_RUDE_DROPOUT",
    "BUMP_RUDE_FALLEN",
    "BUMP_RUDE_GREASER",
    "BUMP_RUDE_IN_CAR",
    "BUMP_RUDE_JOCK",
    "BUMP_RUDE_NERD",
    "BUMP_RUDE_OUT_OF_CAR",
    "BUMP_RUDE_PREP",
    "BUMP_VEHICLE",
    "BURTON_COACH",
    "BUS",
    "BUSTED_CLASS",
    "BUSTING",
    "BUSTING_JIMMY",
    "BYE",
    "CALL_FOR_HELP",
    "CARNIE_FUNHOUSE_ATTRACT",
    "CARNIE_FUNHOUSE_ATTRACT_PLAYER",
    "CARNIE_FUNHOUSE_EXIT",
    "CARNIE_GAME_ATTRACT",
    "CARNIE_GAME_ATTRACT_PLAYER",
    "CARNIE_GAME_EXIT_LOSE",
    "CARNIE_GAME_EXIT_WIN",
    "CARNIE_GAME_SELL",
    "CARNIE_GOCART_ATTRACT",
    "CARNIE_GOCART_ATTRACT_PLAYER",
    "CARNIE_GOCART_EXIT_LOSE",
    "CARNIE_GOCART_EXIT_WIN",
    "CARNIE_GOCART_SELL",
    "CARNIE_HAVE_FUN",
    "CARNIE_RIDE_ATTRACT",
    "CARNIE_RIDE_ATTRACT_PLAYER",
    "CARNIE_RIDE_EXIT",
    "CARNIE_TICKETS_BROWSE",
    "CARNIE_TICKETS_NOT_ENOUGH",
    "CARNIE_TICKETS_TRADE",
    "CARNIVAL_EXIT_COMMENT",
    "CHASE",
    "CHASE_ESCAPE",
    "CHASE_OUT_OF_BREATH",
    "CHATTER",
    "CHEERLEADING",
    "CHEM",
    "CITIZEN_ARREST",
    "COMPLAIN",
    "CONFUSED",
    "CONGRATULATIONS",
    "CONVERSATION_CONTINUATION",
    --"CONVERSATION_CONTINUE",
    "CONVERSATION_END",
    "CONVERSATION_GOSSIP",
    "CONVERSATION_GOSSIP_CHAPTER_1",
    "CONVERSATION_GOSSIP_CHAPTER_2",
    "CONVERSATION_GOSSIP_CHAPTER_3",
    "CONVERSATION_GOSSIP_CHAPTER_4",
    "CONVERSATION_GOSSIP_CHAPTER_5",
    "CONVERSATION_GOSSIP_CHAPTER_6",
    "CONVERSATION_GOSSIP_PERSONAL_PRIVATE",
    "CONVERSATION_GOSSIP_PRIVATE",
    "CONVERSATION_GOSSIP_REPLY",
    "CONVERSATION_NEGATIVE_PERSONAL",
    "CONVERSATION_NEGATIVE_REPLY",
    "CONVERSATION_NEGATIVE_STATEMENT",
    "CONVERSATION_PARTING",
    "CONVERSATION_POSITIVE_PERSONAL",
    "CONVERSATION_POSITIVE_PRIVATE",
    "CONVERSATION_POSITIVE_REPLY",
    "CONVERSATION_QUESTION",
    "CONVERSATION_START",
    "ClassArt",
    "ClassBiology",
    "ClassChem",
    "ClassEnglish",
    "ClassGeography",
    "ClassMath",
    "ClassMusic",
    "ClassPhoto",
    "ClassShop",
    "DARE",
    "DEFEAT_INDIVIDUAL",
    "DEFEAT_TEAM",
    "DISGUST",
    "DONT_HIT",
    "DUNK_TANK",
    "ENGLISH",
    "FAKE_ID",
    "FIGHTING",
    "FIGHTING_DROPOUT",
    "FIGHTING_GREASER",
    "FIGHTING_JOCK",
    "FIGHTING_NERD",
    "FIGHTING_PREP",
    "FIGHT_BEATEN",
    "FIGHT_FLEE",
    "FIGHT_INITIATE",
    "FIGHT_SACKED",
    "FIGHT_SPAT_UPON",
    "FIGHT_WATCH",
    "FIGHT_WTF",
    "FIREALARM_REACTION",
    "FLEE",
    "FLUSTERED",
    "FOOD_FIGHT",
    "FOOT_STOMPED",
    "FOR_SALE",
    "FREAKSHOW_REACTION",
    "FREAK_OUT_GIRL",
    "FREAK_OUT_GIRL_DORM",
    "FREAK_SHOW",
    "GENERIC_GIFT_REQUEST",
    "GIFT_RECEIVE",
    "GIFT_RECEIVE_EXTORTION",
    "GIFT_RECEIVE_ROMANTIC",
    "GIFT_REQUEST_EXTORTION",
    "GIFT_REQUEST_GIRL",
    "GIVE",
    "GRAFFITI",
    "GREAT_ESCAPE",
    "GREET",
    "PLAYER_AFFIRMATIVE",
    "PLAYER_APOLOGY_AUTHORITY_GOOD",
    "PLAYER_APOLOGY_AUTHORITY_POOR",
    "PLAYER_APOLOGY_BEG",
    "PLAYER_APOLOGY_CHILL",
    "PLAYER_APOLOGY_GENERIC",
    "PLAYER_APOLOGY_GIRL",
    "PLAYER_APOLOGY_SMOOTH",
    "PLAYER_BEATEN",
    "PLAYER_BIKE_CRASH",
    "PLAYER_BIKE_STEALING",
    "PLAYER_BIKE_STOLEN",
    "PLAYER_BINNING",
    "PLAYER_BOOT",
    "PLAYER_CAMERA",
    "PLAYER_CAMERA_BAD",
    "PLAYER_CAMERA_GOOD",
    "PLAYER_DEFEAT_INDIVIDUAL",
    "PLAYER_DEFEAT_TEAM",
    "PLAYER_DEJECTED",
    "PLAYER_DRINK",
    "PLAYER_ENTER_RIDE",
    "PLAYER_EXCUSE",
    "PLAYER_EXIT_RIDE",
    "PLAYER_FLIRT_DEFAULT",
    "PLAYER_FLIRT_GOOD",
    "PLAYER_FLIRT_POOR",
    "PLAYER_GET_COLLECTIBLE",
    "PLAYER_GET_MONEY",
    "PLAYER_GET_WEAPON",
    "PLAYER_GIFT_GENERAL",
    "PLAYER_GIFT_GIVE_DOG",
    "PLAYER_GIFT_GIVE_EXTORTION",
    "PLAYER_GIFT_GIVE_GIRL",
    "PLAYER_GREET_ADULT_FEMALE",
    "PLAYER_GREET_ADULT_MALE",
    "PLAYER_GREET_ASSIST",
    "PLAYER_GREET_FRIENDLY_DOG",
    "PLAYER_GREET_GENERIC",
    "PLAYER_GREET_GENERIC_BOY",
    "PLAYER_GREET_GENERIC_GIRL",
    "PLAYER_GREET_HARASS",
    "PLAYER_HIT_SWITCH",
    "PLAYER_IDLE",
    "PLAYER_IDLE_CLASS",
    "PLAYER_IDLE_RAIN",
    "PLAYER_IDLE_SHIVER",
    "PLAYER_IDLE_TIRED",
    "PLAYER_IDLE_WINTER",
    "PLAYER_INFIRMARY",
    "PLAYER_JEER",
    "PLAYER_LAUGH_CRUEL",
    "PLAYER_LAUGH_FRIENDLY",
    "PLAYER_LOCKED",
    "PLAYER_LOCKERING",
    "PLAYER_MAKE_OUT",
    "PLAYER_MISCHIEVOUS",
    "PLAYER_MISSION_SUCCESS",
    "PLAYER_NEGATIVE",
    "PLAYER_OFFICE",
    "PLAYER_PRIZE_TICKETS",
    "PLAYER_STEALTH",
    "PLAYER_STEALTH_POTTY",
    "PLAYER_SUCCESS",
    "PLAYER_TAG_COMPLETE",
    "PLAYER_TAUNT",
    "PLAYER_THROW_BALL",
    "PLAYER_TIRED",
    "PLAYER_TOILET_DUNK",
    "PLAYER_TRASH_TALK",
    "PLAYER_URINATING",
    "PLAYER_VICTORY_INDIVIDUAL",
    "PLAYER_VICTORY_TEAM",
    "PLAYER_WHEE",
    "PRANK",
    "PRINCIPAL_LECTURING",
    "PRIOFF",
    "PUKE",
    "PUKE_START",
    "RAT_HIT",
    "RAT_KILLER",
    "RESPONSE_GREET_DISS",
    "RESPONSE_GREET_FRIENDLY",
    "RESPONSE_IGNORE",
    "RESPONSE_UNINTERESTED",
    "SCARED",
    "SCARED_CRY",
    "SEE_ALLY_ATTACKED",
    "SEE_BOY_IN_DORM",
    "SEE_SOMETHING_COOL",
    "SEE_SOMETHING_CRAP",
    "SEE_VANDALISM",
    "SEE_WEAPON_FIRED",
    "SHIPPING",
    "SHOP_CLASS",
    "SNOW_SHOVELLING",
    "SOLD",
    "STEALTH_CONFUSION",
    "STEALTH_DISCOVERING",
    "STEALTH_INVESTIGATING",
    "STEALTH_PURSUIT",
    "STEALTH_TARGET_LOST",
    "STINK_BOMB",
    "STORE_BYE_BUY",
    "STORE_BYE_NOBUY",
    "STORE_BYE_NO_BUY",
    "STORE_CHASE_VANDAL",
    "STORE_CLOTHES_BROWSING",
    "STORE_CLOTHING_COMMENT",
    "STORE_VIOLENCE_RESPONSE",
    "STORE_WELCOME",
    "STRANGE_HOBO",
    "SUCKING_UP",
    "TAGGING_DISAPPROVE",
    "TATTLE",
    "TATTLED",
    "TAUNT",
  }
end

function S_SetupAlly()
  al = 1
  als = {
	"1.Dismiss All Allies",
	"2.Dismiss Ally",
  }
end

function S_SetupPedEditor()
  pem = {
    "1.Populations",
	"2.Fighting System",
	"3.Voice",
	"4.Stats",
	"5.Attack Freq",
  }
  fsm = {
    {"1.Run from the fight",RunFromBattle},
	{"2.Don't fight back",DontFightBack},
	{"3.Attack each other",AttackEachOther}
  }
end

function S_SetupGirlfriends()
  peds = {
    {index = 2,fact = "STUDENT",gender = 1,name = "Zoe"},
    {index = 3,fact = "NERD",gender = 1,name = "Beatrice"},
    {index = 14,fact = "JOCK",gender = 1,name = "Mandy"},
    {index = 25,fact = "GREASER",gender = 1,name = "Lola"},
    {index = 38,fact = "PREPPY",gender = 1,name = "Pinky"},
    {index = 39,fact = "STUDENT",gender = 1,name = "Angie"},
    {index = 48,fact = "DROPOUT",gender = 1,name = "Zoe"},
    {index = 54,fact = "TEACHER",gender = 1,name = "MissPeabody"},
    {index = 58,fact = "TEACHER",gender = 1,name = "Edna"},
    {index = 59,fact = "TEACHER",gender = 1,name = "MissWinston"},
    {index = 60,fact = "TEACHER",gender = 1,name = "MrsMcRae"},
    {index = 62,fact = "TEACHER",gender = 1,name = "MrsCarvin"},
    {index = 63,fact = "TEACHER",gender = 1,name = "MsPhillips"},
    {index = 67,fact = "STUDENT",gender = 1,name = "Christy"},
    {index = 68,fact = "STUDENT",gender = 1,name = "Gloria"},
    {index = 74,fact = "STUDENT",gender = 1,name = "Eunice"},
    {index = 78,fact = "TOWNPERSON",gender = 1,name = "MsKopke"},
    {index = 79,fact = "TOWNPERSON",gender = 1,name = "MsRushinski"},
    {index = 80,fact = "TOWNPERSON",gender = 1,name = "MsIsaacs"},
    {index = 81,fact = "TOWNPERSON",gender = 1,name = "BethanyJones"},
    {index = 90,fact = "SLEEP",gender = 1,name = "Christy"},
    {index = 93,fact = "SLEEP",gender = 1,name = "Mandy"},
    {index = 94,fact = "SLEEP",gender = 1,name = "Pinky"},
    {index = 95,fact = "SLEEP",gender = 1,name = "Beatrice"},
    {index = 96,fact = "SLEEP",gender = 1,name = "Lola"},
    {index = 107,fact = "SHOPKEEP",gender = 1,name = "MissAbby"},
    {index = 137,fact = "STUDENT",gender = 1,name = "Melody"},
    {index = 138,fact = "STUDENT",gender = 1,name = "Karen"},
    {index = 140,fact = "TOWNPERSON",gender = 1,name = "Brandy"},
    {index = 143,fact = "TOWNPERSON",gender = 1,name = "Crystal"},
    {index = 166,fact = "STUDENT",gender = 1,name = "Angie"},
    {index = 167,fact = "PREPPY",gender = 1,name = "Pinky"},
    {index = 175,fact = "PREPPY",gender = 1,name = "Pinky"},
    {index = 180,fact = "STUDENT",gender = 1,name = "Angie"},
    {index = 181,fact = "STUDENT",gender = 1,name = "Christy"},
    {index = 182,fact = "PREPPY",gender = 1,name = "Pinky"},
    {index = 185,fact = "TOWNPERSON",gender = 1,name = "MrsLisburn"},
    {index = 191,fact = "TOWNPERSON",gender = 1,name = "Paris"},
    {index = 192,fact = "TOWNPERSON",gender = 1,name = "Courtney"},
    {index = 193,fact = "TOWNPERSON",gender = 1,name = "Delilah"},
    {index = 221,fact = "TEACHER",gender = 1,name = "Edna"},
    {index = 230,fact = "JOCK",gender = 1,name = "Mandy"},
    {index = 249,fact = "TEACHER",gender = 1,name = "MusicTeacher"},
    {index = 256,fact = "STUDENT",gender = 1,name = "Eunice"},
    {index = 257,fact = "STUDENT",gender = 1,name = "Melody"}
  }
end

function S_SetupPickup()
  pcss = {
    {name = "Apple",model = 310},
    {name = "Banana",model = 358},
    {name = "Baseball",model = 302},
    {name = "Basket Ball",model = 381},
    {name = "Bat",model = 300},
    {name = "Big Firework",model = 397},
    {name = "Books 1",model = 405},
    {name = "Books 2",model = 413},
    {name = "Books 3",model = 414},
    {name = "Books 4",model = 415},
    {name = "Books 5",model = 416},
    {name = "Brick",model = 311},
    {name = "Broom",model = 377},
	{name = "Camera",model = 328},
    {name = "Digital Camera",model = 426},
    {name = "Dead Rat",model = 346},
    {name = "Devil Fork",model = 409},
    {name = "Dish",model = 338},
    {name = "Egg",model = 312},
    {name = "Fire Extinguisher",model = 326},
    {name = "Fire cracker",model = 301},
    {name = "Football",model = 331},
    {name = "Football (Bomb)",model = 400},
    {name = "Frisbee",model = 335},
    {name = "Gold Pipe",model = 418},
    {name = "Itchy Powder",model = 394},
    {name = "Kick Me",model = 372},
    {name = "Marbles",model = 349},
    {name = "News Roll",model = 320},
    {name = "Pinky Wand",model = 410},
    {name = "Plate",model = 355},
    {name = "Poison Gun",model = 395},
    {name = "Rocket Launcher",model = 307},
    {name = "Rubber Band",model = 325},
    {name = "Shield",model = 387},
    {name = "Metal Plate",model = 360},
    {name = "Skateboard",model = 437},
    {name = "Sledge Hammer",model = 324},
    {name = "Slingshot",model = 303},
    {name = "Snowball",model = 313},
    {name = "Snowball 2",model = 330},
    {name = "Soccer Ball",model = 329},
    {name = "Spray Can",model = 321},
    {name = "Spud Gun",model = 305},
    {name = "Stink Bomb",model = 309},
    {name = "Super Slingshot",model = 306},
    {name = "Super Spud Gun",model = 396},
    {name = "Trash Lid",model = 315},
    {name = "Umbrella",model = 404},
    {name = "Vase 1",model = 354},
    {name = "Vase 2",model = 353},
    {name = "Vase 3",model = 345},
    {name = "Water Baloon",model = 383},
    {name = "Water Pipe",model = 342},
    {name = "Whip",model = 411},
    {name = "Wood Paddle",model = 357},
    {name = "Wood Plank",model = 323},
    {name = "Yardstick",model = 299},
  }
end

function S_CutsEdit()
  moc = {
    {"1.Load Cutscene",load_cut},
	{"2.Cutscene Actions",cut_act},
	{"3.Cutscene Audio",cut_sound},
	{"4.Play Custome Cuts",play_cc},
  }
  mof = {
	"GENERAL",
	"RANDOM",
	"3-01AA",
	"3-01AB",
	"3-01BA",
	"3-01CA",
	"3-01CB",
	"3-01DA",
	"3-01DB",
	"3-01DC",
	"2-S07",
	"3-R05A",
	"3-R05B",
	"3-R07",
	"3-S08",
	"CS_COUNTER",
	"1-1-1",
	"1-01",
	"1-02B",
	"1-02D",
	"1-02E",
	"1-03",
	"1-04",
	"1-05",
	"1-06",
	"1-06B",
	"1-07",
	"1-08",
	"1-09",
	"1-10",
	"1-11",
	"1-B",
	"1-BB",
	"1-BC",
	"2-01",
	"2-02",
	"2-03",
	"2-03b",
	"2-04",
	"2-05",
	"2-06",
	"2-07",
	"2-08",
	"2-09",
	"2-09B",
	"3-01",
	"3-03",
	"3-04",
	"3-04B",
	"3-05",
	"3-06",
	"4-01",
	"4-02",
	"4-03",
	"4-04",
	"4-05",
	"4-06",
	"5-01",
	"5-02",
	"5-02B",
	"5-03",
	"5-04",
	"5-05",
	"5-06",
	"5-07",
	"5-09",
	"5-09B",
	"6-02",
	"6-02B",
	"1-G1",
	"1-S01",
	"2-B",
	"2-BB",
	"2-0",
	"2-S02",
	"2-S04",
	"2-S05",
	"2-S05B",
	"2-S05C",
	"2-S06",
	"2-G2",
	"3-B",
	"3-BB",
	"3-BC",
	"3-0",
	"3-G3",
	"3-S03",
	"3-S10",
	"3-S11",
	"3-S11C",
	"4-B1",
	"4-B1B",
	"4-B1C",
	"4-B1D",
	"4-B2",
	"4-B2B",
	"4-G4",
	"4-S12",
	"4-S12B",
	"4-0",
	"5-0",
	"5-05B",
	"5-B",
	"5-G5",
	"6-0",
	"6-B",
	"6-BB",
	"6-BC",
	"FX-TEST",
	"5-BC",
	"3-BD",
  }
end

function StrafeSelectionMenu()
  smn = {
    "1.Button",
	"2.Replace Anim",
	"3.Button while playing anim",
	"4.After Anim",
	"5.Button after playing anim",
	"6.Add Animation",
  }
end

---------------------------------------SM_SYSTEM----------------------------------------

function READ_ME_FIRST()
  userAgreement = "DO NOT STEAL/REUPLOAD THIS MOD"
  authorMods = "Rizq Muhammad Ariiq A.K.A Altamurenza"
end

function main()
  local timer
  while not SystemIsReady() or AreaIsLoading() do
    Wait(0)
  end
  -- Load setup items:
  setup_loader()
  -- Prepare all items:
  F_RELOAD()
  
  repeat
    -- Main menu string:
	M_MainMenu(true,3.5)
	-- Frames:
    Wait(0)
  until not Alive
  F_main()
end

function F_main()
  Wait(100)
  local cho = "YES"
  repeat
    if IsButtonBeingPressed(1,0) then
	  cho = "YES"
	elseif IsButtonBeingPressed(0,0) then
	  cho = "NO"
	end
	TextPrintString("Are you sure want to restart?\n\n> "..cho.." <",0,1)
	TextPrintString("[~dleft~ NO | YES ~dright~]",0,2)
	Wait(0)
  until IsButtonBeingReleased(3,0)
  if cho == "YES" then
    --PlayerStopAllActionControllers()
    if not PedIsModel(gPlayer,0) then
      PlayerSwapModel("player")
    end
    PedSetActionTree(gPlayer,"/Global/Player","Act/Anim/Player.act")
    DisablePunishmentSystem(false)
    PedSetEffectedByGravity(gPlayer,true)
    PedSetFlag(gPlayer,24,false)
    PedSetFlag(gPlayer,58,false)
    PedSetFlag(gPlayer,9,false)
    TerminateThread("ATZ_HeadScriptA")
    TerminateThread("ATZ_Fixer")
    TerminateThread("SavedStrafe")
    TerminateThread("MovementsScript")
    TerminateThread("RespectRepeater")
    RESET_ALL_SETTINGS()
    setup_loader()
    TextPrintString("RESTARTING..",9999,1)
    Wait(math.random(1500,4000))
    F_RELOAD()
    repeat
      -- Main menu string:
	  M_MainMenu(true,3.5)
	  -- Frames:
      Wait(0)
    until not Alive -- REPEAT FOREVER (Same with "Until not Alive", but you can setting the repeat main)
    F_main()
  end
end

function setup_loader()
  L_LoadAllAnim()
  S_SetupTable()
  S_Settings()
  S_SetupCore()
  S_SetupLM()
  S_SetupActionNodeFinder() -- DaBoss MODS
  S_SetupAnim()
  S_SetupSpeech()
  S_SetupPedFinder()
  S_SetupVehicleFinder()
  S_CutsEdit()
end

function M_MainMenu(ShowMainMenu,TextTimer)
  if ShowMainMenu then
    if PedHasWeapon(gPlayer,426) then
	  HUDPhotographySetColourUpgrade(true) -- Enable coloured photo
	elseif PedHasWeapon(gPlayer,328) then
	  HUDPhotographySetColourUpgrade(false) -- Disable coloured photo
	end
	-- Unhide menu:
	if hidingMenu == "MANUAL" then
	  if IsButtonBeingReleased(14,0) then
	    if timer and GetTimer() < timer + 500 then
		  SoundPlay2D("Erand")
		  if unhideMenu == 1 then
		    unhideMenu = 0
		  elseif unhideMenu == 0 then
		    unhideMenu = 1
		  end
		else
		  timer = GetTimer()
		end
	  end
	end
	ibbp = IsButtonBeingPressed
	ibbr = IsButtonBeingReleased
	if hidingMenu == "MANUAL" then
	  -- Main Menu activated:
	  if (IsButtonBeingPressed(0,0) or faster_select(0)) and unhideMenu == 1 then
	    SoundPlay2D("NavDwn")
	    select = select - 1
        if select < 1 then select = table.getn(SetupATZ) end
	  elseif (IsButtonBeingPressed(1,0) or faster_select(1)) and unhideMenu == 1 then
	    SoundPlay2D("NavDwn")
	    select = select + 1
	    if select > table.getn(SetupATZ) then select = 1 end
	  end
	  if unhideMenu == 1 and not shared.PlayerInClothingManager and not shared.playerShopping then
	    -- Text menu:
	    -- There is 5 coulum of menu to the below:
	    if MainMenuType == "SCROLL_5" then
          if not (select == table.getn(SetupATZ) or select == 1 or select == 2 or select == table.getn(SetupATZ) - 1) then
            TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n"..SetupATZ[select - 2][1].."\n"..SetupATZ[select - 1][1].."\n:"..SetupATZ[select][1]..":\n"..SetupATZ[select + 1][1].."\n"..SetupATZ[select + 2][1].."",0,1)
	      elseif select == 1 then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n:"..SetupATZ[select][1]..":\n"..SetupATZ[select + 1][1].."\n"..SetupATZ[select + 2][1].."",0,1)
	      elseif select == 2 then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n"..SetupATZ[select - 1][1].."\n:"..SetupATZ[select][1]..":\n"..SetupATZ[select + 1][1].."\n"..SetupATZ[select + 2][1].."",0,1)
	      elseif select == table.getn(SetupATZ) - 1 then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n"..SetupATZ[select - 2][1].."\n"..SetupATZ[select - 1][1].."\n:"..SetupATZ[select][1]..":\n"..SetupATZ[select + 1][1].."",0,1)
	      elseif select == table.getn(SetupATZ) then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n"..SetupATZ[select - 2][1].."\n"..SetupATZ[select - 1][1].."\n:"..SetupATZ[select][1]..":",0,1)
	      end
	    elseif MainMenuType == "STANDARD" then
	      TextPrintString("SELECTOR MOD\n"..Version.."\n\n"..SetupATZ[select][1].."",0,1)
	    elseif MainMenuType == "SCROLL_3" then
	      if select == 1 then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n:"..SetupATZ[select][1]..":\n"..SetupATZ[select + 1][1].."",0,1)
	      elseif select == table.getn(SetupATZ) then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n"..SetupATZ[select - 1][1].."\n:"..SetupATZ[select][1]..":",0,1)
          elseif not (select == table.getn(SetupATZ) or select == 1) then
            TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n"..SetupATZ[select - 1][1].."\n:"..SetupATZ[select][1]..":\n"..SetupATZ[select + 1][1].."",0,1)
		  end
	    elseif MainMenuType == "BASIC_BIG_SIZE" then
	      TextPrintString(">"..SetupATZ[select][1].."<",0,1)
	    elseif MainMenuType == "BASIC_SMALL_SIZE" then
	      TextPrintString(">"..SetupATZ[select][1].."<",0,2)
	    elseif MainMenuType == "NEW_MENU" then
	      S_NewMenuSystem()
          if not (select == table.getn(NewSetupATZ) or select == 1 or select == 2 or select == table.getn(NewSetupATZ) - 1) then
            TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n>"..select.."."..NewSetupATZ[select][1].."<\n\n"..NewSetupATZ[select - 2][1].."\n"..NewSetupATZ[select - 1][1].."\n:"..NewSetupATZ[select][1]..":\n"..NewSetupATZ[select + 1][1].."\n"..NewSetupATZ[select + 2][1].."",0,1)
	      elseif select == 1 then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n>"..select.."."..NewSetupATZ[select][1].."<\n\n:"..NewSetupATZ[select][1]..":\n"..NewSetupATZ[select + 1][1].."\n"..NewSetupATZ[select + 2][1].."",0,1)
	      elseif select == 2 then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n>"..select.."."..NewSetupATZ[select][1].."<\n\n"..NewSetupATZ[select - 1][1].."\n:"..NewSetupATZ[select][1]..":\n"..NewSetupATZ[select + 1][1].."\n"..NewSetupATZ[select + 2][1].."",0,1)
	      elseif select == table.getn(SetupATZ) - 1 then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n>"..select.."."..NewSetupATZ[select][1].."<\n\n"..NewSetupATZ[select - 2][1].."\n"..NewSetupATZ[select - 1][1].."\n:"..NewSetupATZ[select][1]..":\n"..NewSetupATZ[select + 1][1].."",0,1)
	      elseif select == table.getn(SetupATZ) then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n>"..select.."."..NewSetupATZ[select][1].."<\n\n"..NewSetupATZ[select - 2][1].."\n"..NewSetupATZ[select - 1][1].."\n:"..NewSetupATZ[select][1]..":",0,1)
	      end
	    elseif MainMenuType == "NO_TEXT" then
	      TextPrintString("",0,1)
		end
	  end
	  -- Selector function:
	  if IsButtonBeingReleased(3,0) and unhideMenu == 1 then
	    if MainMenuType ~= "NEW_MENU" then
	      SetupATZ[select][2]()
		else
		  NewSetupATZ[select][2]()
		end
	  end
	elseif hidingMenu == "AUTO" and not shared.PlayerInClothingManager and not shared.playerShopping then
	  if (IsButtonBeingPressed(0,0) or faster_select(0)) and PlayerInAnyActivity() then
	    SoundPlay2D("NavDwn")
	    select = select - 1
        if select < 1 then select = table.getn(SetupATZ) end
	  elseif (IsButtonBeingPressed(1,0) or faster_select(1)) and PlayerInAnyActivity() then
	    SoundPlay2D("NavDwn")
	    select = select + 1
	    if select > table.getn(SetupATZ) then select = 1 end
	  end
	  if (ibbp(0,0) or faster_select(0) or ibbp(1,0) or faster_select(1) or ibbr(14,0) or AutoShowingTextAfterExitingSubMenu) then
	    -- Text menu:
	    -- There is 5 coulum of menu to the below:
	    if MainMenuType == "SCROLL_5" then
          if not (select == table.getn(SetupATZ) or select == 1 or select == 2 or select == table.getn(SetupATZ) - 1) then
            TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n"..SetupATZ[select - 2][1].."\n"..SetupATZ[select - 1][1].."\n:"..SetupATZ[select][1]..":\n"..SetupATZ[select + 1][1].."\n"..SetupATZ[select + 2][1].."",TextTimer,1)
	      elseif select == 1 then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n:"..SetupATZ[select][1]..":\n"..SetupATZ[select + 1][1].."\n"..SetupATZ[select + 2][1].."",TextTimer,1)
	      elseif select == 2 then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n"..SetupATZ[select - 1][1].."\n:"..SetupATZ[select][1]..":\n"..SetupATZ[select + 1][1].."\n"..SetupATZ[select + 2][1].."",TextTimer,1)
	      elseif select == table.getn(SetupATZ) - 1 then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n"..SetupATZ[select - 2][1].."\n"..SetupATZ[select - 1][1].."\n:"..SetupATZ[select][1]..":\n"..SetupATZ[select + 1][1].."",TextTimer,1)
	      elseif select == table.getn(SetupATZ) then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n"..SetupATZ[select - 2][1].."\n"..SetupATZ[select - 1][1].."\n:"..SetupATZ[select][1]..":",TextTimer,1)
	      end
	    elseif MainMenuType == "STANDARD" then
	      TextPrintString("SELECTOR MOD\n"..Version.."\n\n"..SetupATZ[select][1].."",TextTimer,1)
	    elseif MainMenuType == "SCROLL_3" then
	      if select == 1 then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n:"..SetupATZ[select][1]..":\n"..SetupATZ[select + 1][1].."",TextTimer,1)
	      elseif select == table.getn(SetupATZ) then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n"..SetupATZ[select - 1][1].."\n:"..SetupATZ[select][1]..":",TextTimer,1)
          elseif not (select == table.getn(SetupATZ) or select == 1) then
            TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n"..SetupATZ[select - 1][1].."\n:"..SetupATZ[select][1]..":\n"..SetupATZ[select + 1][1].."",TextTimer,1)
		  end
	    elseif MainMenuType == "BASIC_BIG_SIZE" then
	      TextPrintString(">"..SetupATZ[select][1].."<",TextTimer,1)
	    elseif MainMenuType == "BASIC_SMALL_SIZE" then
	      TextPrintString(">"..SetupATZ[select][1].."<",TextTimer,2)
	    elseif MainMenuType == "NEW_MENU" then
	      S_NewMenuSystem()
          if not (select == table.getn(NewSetupATZ) or select == 1 or select == 2 or select == table.getn(NewSetupATZ) - 1) then
            TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n>"..select.."."..NewSetupATZ[select][1].."<\n\n"..NewSetupATZ[select - 2][1].."\n"..NewSetupATZ[select - 1][1].."\n:"..NewSetupATZ[select][1]..":\n"..NewSetupATZ[select + 1][1].."\n"..NewSetupATZ[select + 2][1].."",TextTimer,1)
	      elseif select == 1 then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n>"..select.."."..NewSetupATZ[select][1].."<\n\n:"..NewSetupATZ[select][1]..":\n"..NewSetupATZ[select + 1][1].."\n"..NewSetupATZ[select + 2][1].."",TextTimer,1)
	      elseif select == 2 then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n>"..select.."."..NewSetupATZ[select][1].."<\n\n"..NewSetupATZ[select - 1][1].."\n:"..NewSetupATZ[select][1]..":\n"..NewSetupATZ[select + 1][1].."\n"..NewSetupATZ[select + 2][1].."",TextTimer,1)
	      elseif select == table.getn(SetupATZ) - 1 then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n>"..select.."."..NewSetupATZ[select][1].."<\n\n"..NewSetupATZ[select - 2][1].."\n"..NewSetupATZ[select - 1][1].."\n:"..NewSetupATZ[select][1]..":\n"..NewSetupATZ[select + 1][1].."",TextTimer,1)
	      elseif select == table.getn(SetupATZ) then
	        TextPrintString("SELECTOR MOD\n"..Version.."\n\n\n>"..select.."."..NewSetupATZ[select][1].."<\n\n"..NewSetupATZ[select - 2][1].."\n"..NewSetupATZ[select - 1][1].."\n:"..NewSetupATZ[select][1]..":",TextTimer,1)
	      end
	    elseif MainMenuType == "NO_TEXT" then
	      TextPrintString("",TextTimer,1)
		end
		AutoShowingTextAfterExitingSubMenu = false
	  end
	  -- Selector function:
	  if IsButtonBeingReleased(3,0) then
	    if MainMenuType ~= "NEW_MENU" then
	      SetupATZ[select][2]()
		else
		  NewSetupATZ[select][2]()
		end
	  end
	end
  end
end

function F_RELOAD()
  Load = 0
  FullLoaded = false
  repeat
	if Load > 100 then
	  Load = 100
	end
	Load = Load + 1
	Wait(math.random(0,70))
	if Load == 100 then
	  FullLoaded = true
	end
    TextPrintString("SELECTOR MOD\n\nLoading: "..Load.."%",1,1)
	if Load == 5 then
	  --TextPrintString("DATA: ATZ_HeadScriptA",10,2)
	  CreateThread("ATZ_HeadScriptA") -- Save your configuration without stoped whole repeat function
	elseif Load == 80 then
	  --TextPrintString("DATA: SavedStrafe",10,2)
	  CreateThread("SavedStrafe") -- Save your configuration without stoped whole repeat function
	elseif Load == 20 then
	  --TextPrintString("DATA: ATZ_Fixer",10,2)
	  CreateThread("ATZ_Fixer")
	elseif Load == 40 then
	  --TextPrintString("DATA: RespectRepeater",10,2)
	  CreateThread("RespectRepeater")
	elseif Load == 60 then
	  --TextPrintString("DATA: MovementsScript",10,2)
	  CreateThread("MovementsScript")
	end
  until FullLoaded
  Load = 0
  FullLoaded = false
  TextPrintString("",0,1)
  TextPrintString("",0,2)
end

function PlayerGetModelID()
  -- This is not really check player get model if you use another mods, this is only for this mod.
  if modelSelect == 1 then
    return 0
  else
    return modelSelect
  end
end

function PedGetModel(ped)
  -- This is the original way to check ped get model, you can use this for another mods.
  -- NOTE: Force Brute methode.
  for i = 0,258 do
    if PedIsModel(ped,i) then
	  return i
	end
  end
end

function PedGetModelID(ped)
  -- This is not really check ped get model if you use another mods, this is only for Ped Finder in Selector Mod.
  if pedGrab == 1 then
    return 0
  else
    return pedGrab
  end
end

function PlayerInAnyActivity()
  return not shared.PlayerInClothingManager and not shared.playerShopping
end

function SavedStrafe()
  -- You're only have 15 button combination in bully.
  
  diffrent_strafe = true
  
  strafedAnim = true
  
  startRecord = false
  
  savedNode = "nil"
  
  playAnim,playAct = "nil","nil"
  
  untilStrafe1 = false
  
  while savedStrafe do
    -- Targeted Ped:
    local ped = PedGetTargetPed()
	
	-- DEFAULT_KEY Detection:
    if PedMePlaying(gPlayer,"DEFAULT_KEY") and PedHasWeapon(gPlayer,-1) then
	  -- Brute-Force Method (Get all table number):
	  for slb = 1,table.getn(strafe) do
	    -- Fix bug player can't entering doors:
	    if strafe[slb].button ~= 9 then
		  -- Button Detection:
	      if diffrent_strafe then
		    -- Strafing:
			
			-- Strafe a block:
			if strafe[slb].anim == "/Global/J_Ted/Defense/Block/Block/BlockHits/Breaker" or strafe[slb].anim == "/Global/BOSS_Darby/Defense/Block/Block/BlockHits" then
			  if PedIsValid(PedGetTargetPed(gPlayer)) and PedGetFlag(PedGetTargetPed(gPlayer),11,true) and IsButtonPressed(11,0) then
			    ExecuteActionNode(gPlayer,strafe[slb].anim,strafe[slb].act)
				repeat
				  Wait(0)
				until not PedIsValid(PedGetTargetPed(gPlayer)) or not PedGetFlag(PedGetTargetPed(gPlayer),11,true)
				PlayerStopAllActionControllers()
			  end
			-- Strafe normaly:
			else
			  if IsButtonBeingPressed(strafe[slb].button,0) then
			    PedSetActionNode(gPlayer,strafe[slb].anim,strafe[slb].act)
			  end
			end
		  end
		elseif strafe[slb].button == 9 then
		  -- Button Grapple Pressed:
	      if IsButtonBeingPressed(strafe[slb].button,0) and PedIsValid(ped) then
		    -- Strafing:
	        PedSetActionNode(gPlayer,strafe[slb].anim,strafe[slb].act)
		  end
		end
	  end
	end
	-- GRAB Detection:
    if PedIsPlaying(gPlayer,"/Global/Actions/Grapples/Front/Grapples/Hold_Idle",true) then
	  -- GRAB Animation Detection:
	  if grabAnim ~= "nil" and grabAct ~= "nil" then
	    -- Strafing:
		PedSetActionNode(gPlayer,grabAnim,grabAct)
	  end
	end
	-- MOUNT Detection:
	if PedIsPlaying(gPlayer,"/Global/Actions/Grapples/Mount",true) then
	  -- MOUNT Animation Detection:
	  if mountAnim ~= "nil" and mountAct ~= "nil" then
	    -- Strafing:
		PedSetActionNode(gPlayer,mountAnim,mountAct)
	  end
	end
	-- Anim Detection:
    if strafedAnim then
	  -- Brute-Force Method (Get all table number):
	  for sld = 1,table.getn(strafeAnim) do
	    local sas = strafeAnim[sld]
	    if strafeAnim[sld].id == 0 then
	      if strafeAnim[sld].mode == "replace" then
		    if PedIsPlaying(gPlayer,strafeAnim[sld].playing,true) then
		      if strafeAnim[sld].button == "nil" then
		        PedSetActionNode(gPlayer,strafeAnim[sld].anim,strafeAnim[sld].act)
		      else
		        if IsButtonBeingPressed(strafeAnim[sld].button,0) then
			      PedSetActionNode(gPlayer,strafeAnim[sld].anim,strafeAnim[sld].act)
			    end
			  end
		    end
	      elseif strafeAnim[sld].mode == "after" then
		    if not untilStrafe and PedIsPlaying(gPlayer,strafeAnim[sld].playing,true) then
		      local before_dead = GetTimer()
			  local lose_timer = false
			  local target_anim = strafeAnim[sld].anim
			  repeat
			    -- SUSPENDER:
			    Wait(0)
			    -- PROCCESS:
		        if not PedIsPlaying(gPlayer,strafeAnim[sld].playing,true) then
			      if strafeAnim[sld].button == "nil" then
		            PedSetActionNode(gPlayer,strafeAnim[sld].anim,strafeAnim[sld].act)
				  else
				    if before_dead + 1000 <= GetTimer() then
				      lose_timer = true
					  before_dead = GetTimer()
				    else
				      if IsButtonBeingPressed(strafeAnim[sld].button,0) then
					    PedSetActionNode(gPlayer,strafeAnim[sld].anim,strafeAnim[sld].act)
				      end
					  before_dead = GetTimer()
				    end
				  end
			    end
			  until PedIsPlaying(gPlayer,target_anim,true) or lose_timer
			  untilStrafe = true
			end
		  elseif untilStrafe then
		    untilStrafe = false
		  end
		elseif sas.id ~= 0 and sas.id ~= 999 then
		  for i,ped in {PedFindInAreaXYZ(0,0,0,999999)} do
		    if PedIsValid(ped) and ped ~= gPlayer and PedIsModel(ped,sas.id) then
			  if strafeAnim[sld].mode == "replace" then
			    if PedIsPlaying(ped,sas.playing,true) then
				  PedSetActionNode(ped,sas.anim,sas.act)
				end
			  end
			end
		  end
		elseif sas.id == 999 then
		  for i,ped in {PedFindInAreaXYZ(0,0,0,999999)} do
		    if PedIsValid(ped) and ped ~= gPlayer then
			  if strafeAnim[sld].mode == "replace" then
			    if PedIsPlaying(ped,sas.playing,true) then
				  PedSetActionNode(ped,sas.anim,sas.act)
				end
			  elseif strafeAnim[sld].mode == "after" then
			    if not untilStrafe1 and PedIsPlaying(ped,strafeAnim[sld].playing,true) then
				  local target_anim1 = strafeAnim[sld].anim
				  repeat
					-- SUSPENDER:
					Wait(0)
					-- PROCCESS:
					if not PedIsPlaying(ped,strafeAnim[sld].playing,true) then
					  if strafeAnim[sld].button == "nil" then
						PedSetActionNode(ped,strafeAnim[sld].anim,strafeAnim[sld].act)
					  end
				    end
				  until PedIsPlaying(ped,target_anim1,true)
				  untilStrafe1 = true
				end
			  elseif untilStrafe1 then
				untilStrafe1 = false
			  end
			end
		  end
		end
	  end
	end
	if table.getn(ped_strafes) >= 1 then
	  for i = 1,table.getn(ped_strafes) do
	    local l = ped_strafes[i]
	    if PedIsValid(l.whom) then
	      load_style()
		  for a = 1,table.getn(lst) do
		    enemy_tar = PedGetTargetPed(l.whom)
		    if PedHasWeapon(l.whom,-1) and PedIsInCombat(l.whom) and PedIsValid(PedGetTargetPed(l.whom)) and PedGetTargetPed(enemy_tar) == l.whom and l.style == lst[a].name then
		      if l.type == "Always" then
		        if math.random(1,1000) < 800 then
			      local random_attack = math.random(1,table.getn(lst[a].node))
			      if PedMePlaying(l.whom,"DEFAULT_KEY") and distance_between_us(l.whom,PedGetTargetPed(l.whom)) then
			        PedSetActionNode(l.whom,lst[a].node[random_attack][1],lst[a].node[random_attack][2])
			      end
			    end
		      elseif l.type == "Faster" then
		        if math.random(1,1000) < 250 then
			      local random_attack = math.random(1,table.getn(lst[a].node))
			      if PedMePlaying(l.whom,"DEFAULT_KEY") and distance_between_us(l.whom,PedGetTargetPed(l.whom)) then
			        PedSetActionNode(l.whom,lst[a].node[random_attack][1],lst[a].node[random_attack][2])
			      end
			    end
			  end
			end
		  end
	    else
	      table.remove(ped_strafes,i)
		end
	  end
	else
	end
	for i,ped in {PedFindInAreaXYZ(0,0,0,999999)} do
	  if PedIsValid(ped) and ped ~= gPlayer then
	    for x = 1,table.getn(ped_mix) do
		  local m = ped_mix[x]
		  if PedIsModel(ped,m.id) then
		    if m.anim ~= nil and m.act ~= nil then
			  if PedIsValid(PedGetTargetPed(ped)) then
			    local tar = PedGetTargetPed(ped)
				if PedGetTargetPed(tar) == ped then
				  local x1,y1,z1 = PedGetPosXYZ(ped)
				  local x2,y2,z2 = PedGetPosXYZ(tar)
				  if math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) < m.range then
					if m.use_evade then
					  if ped_is_attack(tar,ped) then
					    if PedMePlaying(ped,"DEFAULT_KEY") and math.random(1,100) <= m.fre then
						  PedSetActionNode(ped,m.anim,m.act)
						end
					  end
					else
					  if PedMePlaying(ped,"DEFAULT_KEY") and PedMePlaying(tar,"DEFAULT_KEY") and math.random(1,100) <= m.fre then
					    PedSetActionNode(ped,m.anim,m.act)
					  end
					end
				  end
				end
			  end
			end
		  else
		  end
		end
	  end
	end			
	-- Script suspender:
	Wait(0)
  end
end

function ATZ_Fixer()

  -- Don't included any mods here again, because too many mods make C++ Runtime Library error.
  
  -- While "repeat" statement is running, this part doesn't effected by that or this is can be said "Always Running".

  alert = true
  
  while FixBugs do
    Version = get_timer()
    -- Fixed broken model when changing clothes and you are not in player model:
    if not PedIsModel(gPlayer,0) and shared.PlayerInClothingManager then 
	  if use_fix_model == 2 or use_fix_model == 5 or use_fix_model == 6 then
	    -- Fixing broken model
        PlayerSwapModel("player") -- Swap model to Player
	    repeat
	      Wait(0)
	    until not shared.PlayerInClothingManager -- shared.PlayerInClothingManager is mean Player whole change his clothes or selecting clothes in safehouse
	    PlayerSwapModel(saveModel) -- Back up model
	    PedSetActionTree(gPlayer,"/Global/"..saveStyle,"Act/Anim/"..saveStyle..".act") -- Back up fighting style
	  end
    end
	-- Fixed broken model when changing clothes and you are not in player model:
    if not PedIsModel(gPlayer,0) and shared.playerShopping then
	  if use_fix_model == 4 or use_fix_model == 5 or use_fix_model == 6 then
	    -- Fixing broken model
        PlayerSwapModel("player") -- Swap model to Player
	    repeat
	      Wait(0)
	    until not shared.playerShopping -- this mean player whole change his clothes in store
	    PlayerSwapModel(saveModel) -- Back up model
	    PedSetActionTree(gPlayer,"/Global/"..saveStyle,"Act/Anim/"..saveStyle..".act") -- Back up fighting style
	  end
    end
	-- Fixed ALT TAB crash while your not in Player model:
    if (IsButtonBeingReleased(4,0) or IsButtonBeingReleased(5,0)) and not PedIsModel(gPlayer,0) and GetCutsceneRunning() == 0 then
	  if use_fix_model == 3 or use_fix_model == 5 or use_fix_model == 6 then
	    local GetNumberSelectedModel = modelSelect
	    modelSelect = 1
	    PlayerSwapModel("player") -- I tried over 20 times and this way fixed crash after Alt Tab.
	    Wait(10) -- You can't get everything instantly
	    PlayerSwapModel(saveModel) -- Back up model
	    PedSetActionTree(gPlayer,"/Global/"..saveStyle,"Act/Anim/"..saveStyle..".act") -- Back up fighting style
	    modelSelect = GetNumberSelectedModel
	  end
	end
	-- Fixed menu changed while change clothes or buying clothes
	-- Fixed infinite loading after Fighting With Johnny Vincent:
	if MissionActiveSpecific("Chapt4Transition") then
	  if not PedIsModel(gPlayer,0) then
	    PlayerSwapModel("player")
		PedSetActionTree(gPlayer,"/Global/Player","Act/Anim/Player.act")
		movement = "DEFAULT"
		modelSelect = 1
		styleSelect = 1
	  end
	end
	-- Another way to finish Finding Johnny Vincent mission:
	-- I just give 1x warning, i think 1 alert is enough for everyone.
    if MissionActiveSpecific("5_03") and alert then
	  repeat
	    -- [MANUAL] Hide selector menu: 
	    unhideMenu = 0
		-- [AUTO] Hide selector menu:
		M_MainMenu(false,0)
		-- Navigate:
		if IsButtonBeingPressed(0,0) then
		  bugSelect = 1
		elseif IsButtonBeingPressed(1,0) then
		  bugSelect = 2
		end
		-- Printing Text:
		if bugSelect == 1 then
	      TextPrintString("[BUG DETECTOR]\n\nAre you sure want to force completing this mission?\n\n>YES<\nNO",0,1)
		else
		  TextPrintString("[BUG DETECTOR]\n\nAre you sure want to force completing this mission?\n\nYES\n>NO<",0,1)
		end
		-- Notice:
		TextPrintString("BUGS: Crash when you get inside asylum.",0,2)
		-- Script suspender:
		Wait(0)
	  until IsButtonBeingPressed(3,0) or GetCutsceneRunning() == 0
	  if IsButtonBeingReleased(3,0) then
	    -- If user want to force completing the mission:
	    if bugSelect == 1 then
	      -- Force complete:
	      MissionForceCompleted("5_03",true)
		  -- Add mission to completed mission list:
		  MissionSuccessCountInc("5_03")
		  -- Backup if never knockout feature is active:
		  local backup = false
		  -- Player set can knockout:
		  if playerAlly == 0 then
		    playerAlly = 1
		    -- Store backup setting:
		    backup = true
		  end
		  repeat
		    -- Force make player knockout:
		    PlayerKilled(true) -- Unused function.
		    -- Script suspender:
		    Wait(0)
		  until not MissionActiveSpecific("5_03")
		  -- Backup setting:
		  if backup then
		    -- Never knockout:
		    playerAlly = 0
		  end
		end
		-- No alerting after that:
	    alert = false
	  end
	end
	-- Fixed some cutscene bugs:
	-- Fixed area infinite loading:
	if PedIsPlaying(gPlayer,"/Global/Door/PedPropsActions",true) then
	  if areaWait + 1000 <= GetTimer() then
	    timerArea = timerArea + 1
		if timerArea > 10 then
		  restoreArea = true
		  timerArea = 0
		end
		areaWait = GetTimer()
	  end
	else
	  timerArea = 0
	  areaWait = GetTimer()
	end
	-- Restore Area after infinite loading:
	if restoreArea then
	  local resx,resy,resz = PlayerGetPosXYZ()
	  PlayerSetPosXYZ(resx,resy,resz)
	  local dest = AreaTransitionDestination()
	  PlayerStopAllActionControllers()
	  --AreaRegisterAreaScript(AreaTransitionDestination(),"AreaScripts/MainMap.lua")
	  AllowAreaTransitions(true)
	  CameraFade(500,1)
	  AreaCancelStoredTransition()
	  CameraReturnToPlayer()
	  PlayerSetControl(1)
	  find_current_error(dest,"read")
	  restoreArea = false
	end
	-- Fixed bug player can't pickep up Key-Card:
	if MissionActiveSpecific("5_07a") or MissionActiveSpecific("5_06") then
	  -- 1x Warning system:
	  local stopRemove = false
	  -- Remove item:
	  if ItemGetCurrentNum(480) == 1 and not stopRemove then
	    ItemSetCurrentNum(480,0)
		-- No warning after this:
		stopRemove = true
	  end
	end
	if not MissionActiveSpecific("5_03") then
	  if not alert then
	    alert = true
	  end
	end
	-- FIXED MISSION POTENTIALLY BUGS:
	if use_fix_model == 6 then
	  if bugged_mission_running() then
	    if MissionActiveSpecific("3_01C") then
		  ActiveScripts = false
		else
		  ActiveScripts = true
		end
	    if not PedIsModel(gPlayer,0) then
	      PlayerSwapModel("player")
		  saveModel = "player"
		  saveStyle = "Player"
		end
	  else
	    ActiveScripts = true
	  end
	end
	-- Ped can run with set AI repeated:
	if not MissionActiveSpecific("3_B") then
	  -- Fixing punch before run without bug in 3_B mission.
	  if not (PedIsModel(gPlayer,0) or saveStyle == "Player") and PedHasWeapon(gPlayer,-1) then
	    PedSetAITree(gPlayer,"/Global/PlayerAI","Act/PlayerAI.act")
	  elseif PedIsModel(gPlayer,0) and saveStyle ~= "Player" and PedHasWeapon(gPlayer,-1) then
	    PedSetAITree(gPlayer,"/Global/PlayerAI","Act/PlayerAI.act")
	  end
	else
	  if movement == "DEFAULT" then
		movement = "Authority"
	  end
	end
	-- Frames:
	Wait(0)
  end
end

function ATZ_HeadScriptA()

  -- Don't included any mods here again, because too many mods make C++ Runtime Library error.
  
  -- While "repeat" statement is running, this part doesn't effected by that or this is can be said "Always Running".

  while true do
    if ActiveScripts then
	  -- Alone In Bullworth:
	  if alonePlayer == 1 then
	    StopPedProduction(true)
	  end
	  -- Instant Kill:
	  if damageWeapon == 1 then
	    GameSetPedStat(gPlayer,31,999999999) -- Old version
	    -- Lastest version has every damage
	    for i,ped in {PedFindInAreaXYZ(0,0,0,999999)} do
	      if PedIsValid(ped) and ped ~= gPlayer then
		    if PedIsHit(ped,2) and PedGetWhoHitMeLast(ped) == gPlayer then
		      PedApplyDamage(ped,PedGetHealth(ped) + 100)
		    end
		  end
	    end
	    --ObjectFindInArea
	  end
	  -- Knockout:
	  if not clear and PedGetHealth(gPlayer) == 0 then
	    clear = true
	  end
	  if playerAlly == 0 then
	    local bustAnim,bustAct = "nil","nil"
	    bustingAnims = {
		  {"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/Adult_Takedown","Act/Globals.act"},
		  {"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/Adult_Takedown/Hold_Cycle","Act/Globals.act"},
		  {"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/EarGrab","Act/Globals.act"},
		  {"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/Punishment_Hold","Act/Globals.act"},
		  {"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/Punishment_Hold/Hold_Cycle","Act/Globals.act"},
		  {"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/Tonfa_Impale","Act/Globals.act"},
		  {"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/Tonfa_Impale/TonfaImpale","Act/Globals.act"}
	    }
	    keepIt = true
	    PedSetFlag(gPlayer,58,true) -- Never busted or Dead, but sometimes it's a buggy from this one.
	    --local KOnode,KOact = "/Global/1_07/KO_COLLAPSE","Act/Conv/1_07.act"
	    local KOnode,KOact = "/Global/HitTree/Standing/PostHit/BellyUp/BellyUpGetUp/BellyUpGetUpGetUp","Act/HitTree.act"
	    if PedGetHealth(gPlayer) == 0 and clear then
	      if PlayerGetPunishmentPoints() == 300 then
	        PedSetPunishmentPoints(gPlayer,0)
		  end
		  if keepIt then
		    for i,enemy in {PedFindInAreaXYZ(0,0,0,999999)} do
		      if PedIsValid(enemy) and enemy ~= gPlayer then
			    PedIgnoreAttacks(enemy,true)
			    PedClearHasAggressed(gPlayer)
			    PedClearHasAggressed(enemy)
			    PedSetFightingSystem(enemy,false)
			    local timer = 0
			    local t = GetTimer()
			    repeat
			      if t + 1000 <= GetTimer() then
				    timer = timer + 1
				    t = GetTimer()
				  end
				  Wait(0)
			    until timer == math.random(8,10)
			    PedSetActionNode(gPlayer,KOnode,KOact)
			    repeat
			      Wait(0)
			    until not PedIsPlaying(gPlayer,KOnode,true)
			    PedSetFlag(enemy,77,false)
			    PedSetHealth(gPlayer,PlayerGetHealth() + 30)
			    PedClearHasAggressed(gPlayer)
			    PedClearHasAggressed(enemy)
			    PedIgnoreAttacks(enemy,false)
			    PedSetFightingSystem(enemy,false)
			    clear = false
			  end
		    end
		  end
	    elseif PedGetHealth(gPlayer) ~= 0 then
	      if PlayerGetPunishmentPoints() ~= 300 then
	        for i,enemy in {PedFindInAreaXYZ(0,0,0,999999)} do
		      if PedIsValid(enemy) and enemy ~= gPlayer or enemy ~= gPlayerAllies then
		        if PedGetFlag(enemy,108,true) then
			      PedSetFlag(enemy,108,false)
			    end
		      end
		    end
		  else
		    for i,enemies in {PedFindInAreaXYZ(0,0,0,999999)} do
		      local fac = PedGetFaction(enemies)
		      if PedIsValid(enemies) and (fac == 0 or fac == 7 or fac == 8 or fac == 9 or fac == 10) and (enemies ~= gPlayer or enemies ~= gPlayerAllies) then
			    local p1,p2,p3 = PedGetPosXYZ(enemies)
			    local x,y,z = PlayerGetPosXYZ()
			    if math.abs(x - p1) + math.abs(y - p2) + math.abs(z - p3) < 2 then
			      --PedLockTarget(gPlayer,enemies)
				  for busting = 1,table.getn(bustingAnims) do
				    if PedIsPlaying(enemies,bustingAnims[busting][1],bustingAnims[busting][2]) then
				      bustAnim,bustAct = bustingAnims[busting][1],bustingAnims[busting][2]
				      if PedGetTargetPed(enemies) == gPlayer then
					    repeat
					      Wait(0)
					    until not PedIsPlaying(enemies,bustAnim,true)
					    --PedLockTarget(gPlayer,-1)
					    PlayerSetPunishmentPoints(0)
					    bustAnim,bustAct = "nil","nil"
					  end
				    end
				  end
			    else
			      PedLockTarget(gPlayer,-1)
			    end
			  end
		    end
		  end
	    end
	  end
	  -- Free Camera during cutscene:
	  if use_fc_cut then
	    if GetCutsceneRunning() ~= 0 then
	    end
	  end
	  if GetCutsceneRunning() == 0 and not cut_stop then
	    spa,spx,spy,spz = AreaGetVisible,PlayerGetPosXYZ()
	  end
	  if skip_cut then
	    if GetCutsceneRunning() ~= 0 and not cut_stop then
	      cut_stop = true
	    end
	  end
	  if cut_stop then
	    AreaForceLoadAreaByAreaTransition(true)
	    AreaDisableCameraControlForTransition(true)
	    AreaTransitionXYZ(spa,spx,spy,500)
	    AreaDisableCameraControlForTransition(false)
	    AreaForceLoadAreaByAreaTransition(false)
	    repeat
	      repeat
		    Wait(0)
	      until not IsStreamingBusy()
	      Wait(0)
	      StopCutscene()
	    until GetCutsceneRunning() == 0
	    cut_stop = false
	  end
	  if GetCutsceneRunning() == 0 and custome_cuts then
	    StartCutscene()
	    repeat
	      TextPrintString('',0,1)
	      Wait(0)
	    until GetCutsceneRunning() == 0 or IsButtonBeingPressed(7,0)
	    StopCutscene()
	    CutsceneFadeWithCamera(false)
	    CameraSetWidescreen(false)
	    CameraReturnToPlayer()
	    AreaRemoveExtraScene()
	    custome_cuts = false
	  end
	  if cuts_edit then
	    if GetCutsceneRunning() ~= 0 and start_cuts then
	      if load_cutscene ~= "GENERAL" then
		    if load_cutscene == "RANDOM" then
		      load_cutscene = mof[math.random(3,table.getn(mof))]
		    end
		  elseif cuts_action ~= "GENERAL" then
		    if cuts_action == "RANDOM" then
		      cuts_action = mof[math.random(3,table.getn(mof))]
		    end
		  elseif cuts_audio ~= "GENERAL" then
		    if cuts_audio == "RANDOM" then
		      cuts_audio = mof[math.random(3,table.getn(mof))]
		    end
		  end
	    end
	    start_cuts = false
	    repeat
	      Wait(0)
	    until GetCutsceneRunning() == 0
	  end
	  -- Rapid Fire Guns:
	  if rapidGun == 1 and not PlayerIsInAnyVehicle() and not in_other_task and not (PedMePlaying(gPlayer,"TreeCheck",false) or PedMePlaying(gPlayer,"Dead",true) or PedMePlaying(gPlayer,"Climb_ON_BOT",true) or PedMePlaying(gPlayer,"HoistUp_Spawns",true)) then
	    -- UPDATED IN RELOADED EDITION, change the weapons type to the automatic.
	    if PedHasWeapon(gPlayer,305) and IsButtonPressed(12,0) then
	      if waitSpud + 300 <= GetTimer() then
	        PedSetActionNode(gPlayer,"/Global/Gun/Gun/Actions/Controller/UpperBody/FireActions/SpudG/Release","Act/Weapons/Gun.act")
	        waitSpud = GetTimer()
	      end
	    end
	    if PedHasWeapon(gPlayer,396) and IsButtonPressed(12,0) then
	      if waitSSpud + 300 <= GetTimer() then
	        PedSetActionNode(gPlayer,"/Global/Gun/Gun/Actions/Controller/UpperBody/FireActions/SpudG/Release","Act/Weapons/Gun.act")
	        waitSSpud = GetTimer()
	      end
	    end
	    if (PedHasWeapon(gPlayer,303) or PedHasWeapon(gPlayer,306)) and IsButtonPressed(12,0) then
	      if wait_sling + 200 <= GetTimer() then
		    PedSetActionNode(gPlayer,"/Global/SlingShot/SlingShot/Actions/Controller/UpperBody/FireActions/Charge","Act/Weapons/SlingShot.act")
		    wait_sling = GetTimer()
		  end
	    end
	    if PedHasWeapon(gPlayer,307) and IsButtonPressed(12,0) then
	      if waitB + 300 <= GetTimer() then
	        PedSetActionNode(gPlayer,"/Global/Gun","Act/Weapons/Gun.act")
	        waitB = GetTimer()
	      end
	    end
	    if (PedHasWeapon(gPlayer,305) or PedHasWeapon(gPlayer,396)) and IsButtonBeingReleased(12,0) or PedIsHit(gPlayer) then
	      PlayerStopAllActionControllers()
	    end
	    if PedIsValid(PedGetTargetPed(gPlayer)) and (PedHasWeapon(gPlayer,305) or PedHasWeapon(gPlayer,305) or PedHasWeapon(gPlayer,307)) then
	      local o1,o2,o3 = PedGetPosXYZ(PedGetTargetPed(gPlayer))
		  PedFaceXYZ(gPlayer,o1,o2,o3)
	    end
	  end
	  -- Invicible:
	  if invPlayer == 1 then
	    PedSetFlag(gPlayer,9,true) -- Invicible
	    PedSetInvulnerable(gPlayer,true)
	  end
	  -- Rapid Punch:
	  if rapidPunch == 1 then
	    local ped = PedGetGrappleTargetPed(gPlayer)
        if PedIsPlaying(gPlayer,"/Global/Actions/Grapples/Mount",true) and not PedIsPlaying(gPlayer,"/Global/Actions/Grapples/GrappleReversals/MountReversals/MountReversalPunches",true) and PedIsValid(ped) then
	      local playerSpeed,pedSpeed = GameGetPedStat(gPlayer,20),GameGetPedStat(ped,20)
	      local punches = 0
	      while IsButtonPressed(6,0) and PedGetGrappleTargetPed(gPlayer) == ped do
	        local speed = speedMult
	        GameSetPedStat(ped,20,playerSpeed)
			PedSetActionNode(gPlayer,"/Global/Actions/Grapples/GrappleReversals/MountReversals/MountReversalPunches","Act/Globals.act")
            Wait(650 / speed / 2)
		    punches = punches + 1
		    Wait(650 / speed / 2)
		    punches = punches + 1
	        if PedIsPlaying(gPlayer,"/Global/Actions/Grapples/GrappleReversals/MountReversals/MountReversalPunches","Act/Globals.act") then
	          PedSetActionNode(gPlayer,"/Global/Actions/Grapples/Mount/MountIdle","Act/Globals.act")
	        end
	      end
		  GameSetPedStat(ped,20,pedSpeed)
	    elseif PedIsPlaying(gPlayer,"/Global/Actions/Grapples/Front",true) and not PedIsPlaying(gPlayer,"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/GrappleStrikes/HitA",true) and PedIsValid(ped) then
		  local playerSpeed,pedSpeed = GameGetPedStat(gPlayer,20),GameGetPedStat(ped,20)
	      local hit = 0
	      while IsButtonPressed(6,0) and PedGetGrappleTargetPed(gPlayer) == ped do
	        GameSetPedStat(ped,20,playerSpeed)
			PedSetActionNode(gPlayer,"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/GrappleStrikes/HitA", "act/anim/Player.act")
            Wait(350)
		    hit = hit + 1
	        if hit >= 4 then
	          PedSetGrappleTarget(gPlayer,ped)
			  hit = 0
	        end
			if PedGetHealth(PedGetGrappleTargetPed(gPlayer)) < 1 then
			  PlayerStopAllActionControllers()
			end
	      end
		  if IsButtonBeingReleased(6,0) then
		    PedSetActionNode(ped,"/Global/Actions/Grapples/GrappleReversals/StandingReversals/GrappleBreak/Break_GIVE","Act/Globals.act")
		  end
		  GameSetPedStat(ped,20,pedSpeed)
		end
	  end
	  -- Initialize Class (WARNING: DON'T EDIT THIS PART EXCEPT YOU KNOWS WHAT ARE YOU GONNA DO LATER):
	  if PlayerIsInClass() and initTime == 0 and (AreaGetVisible() == 17 or AreaGetVisible() == 15 or AreaGetVisible() == 6) then
	    Wait(2000) -- The Fastest initialize timer, if you change it to "1500" it'll crash your game when starting class.
	    initTime = 1
	    artClass = 0
	  elseif not PlayerIsInClass() and initTime == 1 and not (AreaGetVisible() == 17 or AreaGetVisible() == 15 or AreaGetVisible() == 6) then
	    -- Turn off anything from Class Func.
	    otherClass = 0
	    initTime = 0
	    artClass = 1
	  end
	  -- Timer Function (WARNING: DON'T EDIT THE FUNCTION OR VARIABLE, JUST EDIT NUMBER COUNT):
	  if initTime == 1 then
	    -- Infinite Timer (EDITABLE NUMBER COUNT):
	    if classTime == 1 then
	      if PlayerIsInClass() then
		    if not myTimerSet then
	          ClassMathSetTimer(999999999) -- Class Math timer
	          ClassEnglishSetTimer(999999999) -- Class English timer
	          ClassGeographySetTimer(999999999) -- Class Geography timer
	          ClassBiologySetTimer(999999999) -- Class Biology timer
		    end
		  end
	    -- Class Editor (EDITABLE NUMBER COUNT BY "STimeCycle.lur"):
	    elseif myTimerSet and not ArtClassIsActive() and (AreaGetVisible() == 6 or AreaGetVisible() == 15) then
	      if otherClass == 0 then
		    ClassMathSetTimer(mcts) -- Class Math timer
	        ClassEnglishSetTimer(ects) -- Class English timer
	        ClassGeographySetTimer(gcts) -- Class Geography timer
	        ClassBiologySetTimer(bcts) -- Class Biology timer
		    otherClass = 1
		  end
	    -- Class Editor (NON-EDITABLE PART, CAUSE IT'S VERY VERY STABLE VERSION THAT I CAN DO):
	    elseif ArtClassIsActive() and AreaGetVisible() == 17 then
	      -- Be aware to edit this part, update 5 is easily to crash version, if you don't understand this script please don't edit.
	      if artClass == 0 then
	        MGCA_SetPlayerSpeed(acpss)
	        MGCA_SetEnemySpeed(0,acmes)
		    MGCA_SetEnemySpeed(1,acmes)
		    MGCA_SetEnemySpeed(2,acmes)
		    MGCA_SetEnemySpeed(3,acmes)
		    MGCA_SetEnemySpeed(4,acmes)
		    MGCA_SetExploderTimeOut(aets)
		    MGCA_SetExploderDebrisCount(aeds)
		    MGCA_SetExploderDebrisSpeed(acmes)
		    MGCA_SetSetPowerUpClearRadius(acrs)
		    artClass = 1
		    if artClass > 1 then
		      artClass = 1
		    end
		  end
	    end
	  end
	  if NearPlayer then
	    for i,ped in {PedFindInAreaXYZ(0,0,0,999999)} do
	      for a = 1,table.getn(nearPlayerEffect) do
		    local nfe = nearPlayerEffect[a]
			if PedIsValid(ped) and ped ~= gPlayer then
		      local x,y,z = PlayerGetPosXYZ()
			  local x1,y1,z1 = PedGetPosXYZ(ped)
			  if nfe[1] ~= nil and nfe[2] ~= nil and nfe[3] ~= nil then
			    -- Input:
		        if math.abs(x - x1) + math.abs(y - y1) + math.abs(z - z1) < nfe[3] then
			      --table.insert(nearPlayerPed,ped)
				  if not PedIsPlaying(ped,nfe[1],true) and PedGetHealth(ped) > 1 then
				    PedSetActionNode(ped,nfe[1],nfe[2])
				  end
				else
				  if PedIsPlaying(ped,nfe[1],true) then
				    if PedGetHealth(ped) > 1 then
					  PedSetActionNode(ped,"/Global","Act/Globals.act")
					else
				      PedPlayHitReaction(ped)
					end
				  end
			    end
			  end
		    end
		  end
	    end
	  end
	  -- Faction Editor:
	  if replaceFightingStyle then
	    for i,ped in {PedFindInAreaXYZ(0,0,0,999999)} do
	      for n = 1,table.getn(replaceStyle) do
		    -- Replace Style:
		    if PedIsValid(ped) and ped ~= gPlayer and replaceStyle[n].style ~= "nil" then
		      if replaceStyle[n].faction == 0 then
		        if PedIsPlaying(ped,"/Global/Authority",true) and PedGetFaction(ped,0) then
			      PedSetActionNode(ped,"/Global/Player","Act/Anim/Player.act")
			      PedSetActionTree(ped,"/Global/"..replaceStyle[n].style,"Act/Anim/"..replaceStyle[n].style..".act")
			    end
		      elseif replaceStyle[n].faction == 1 then
		        if PedIsPlaying(ped,"/Global/N_Striker_A",true) or PedIsPlaying(ped,"/Global/N_Striker_B",true) or PedIsPlaying(ped,"/Global/N_Ranged_A",true) and PedGetFaction(ped,1) then
			      PedSetActionNode(ped,"/Global/Player","Act/Anim/Player.act")
			      PedSetActionTree(ped,"/Global/"..replaceStyle[n].style,"Act/Anim/"..replaceStyle[n].style..".act")
			    end
		      elseif replaceStyle[n].faction == 2 or PedIsModel(ped,JocksID) then
		        if PedIsPlaying(ped,"/Global/J_Striker_A",true) or PedIsPlaying(ped,"/Global/J_Melee_A",true) or PedIsPlaying(ped,"/Global/J_Grappler_A",true) and PedGetFaction(ped,2) then
			      PedSetActionNode(ped,"/Global/Player","Act/Anim/Player.act")
			      PedSetActionTree(ped,"/Global/"..replaceStyle[n].style,"Act/Anim/"..replaceStyle[n].style..".act")
			    end
		      elseif replaceStyle[n].faction == 3 or PedIsModel(ped,DropoutID) then
		        if PedIsPlaying(ped,"/Global/DO_Striker_A",true) or PedIsPlaying(ped,"/Global/DO_Melee_A",true) or PedIsPlaying(ped,"/Global/DO_Grappler_A",true) and PedGetFaction(ped,3) then
			      PedSetActionNode(ped,"/Global/Player","Act/Anim/Player.act")
			      PedSetActionTree(ped,"/Global/"..replaceStyle[n].style,"Act/Anim/"..replaceStyle[n].style..".act")
			    end
		      elseif replaceStyle[n].faction == 4 or PedIsModel(ped,JocksID) then
		        if PedIsPlaying(ped,"/Global/G_Striker_A",true) or PedIsPlaying(ped,"/Global/G_Melee_A",true) or PedIsPlaying(ped,"/Global/G_Grappler_A",true) and PedGetFaction(ped,4) then
			      PedSetActionNode(ped,"/Global/Player","Act/Anim/Player.act")
			      PedSetActionTree(ped,"/Global/"..replaceStyle[n].style,"Act/Anim/"..replaceStyle[n].style..".act")
			    end
		      elseif replaceStyle[n].faction == 5 or PedIsModel(ped,PrepiesID) then
		        if PedIsPlaying(ped,"/Global/P_Striker_A",true) or PedIsPlaying(ped,"/Global/P_Striker_B",true) or PedIsPlaying(ped,"/Global/P_Grappler_A",true) and PedGetFaction(ped,5) then
			      PedSetActionNode(ped,"/Global/Player","Act/Anim/Player.act")
			      PedSetActionTree(ped,"/Global/"..replaceStyle[n].style,"Act/Anim/"..replaceStyle[n].style..".act")
			    end
		      elseif replaceStyle[n].faction == 6 then
		        if PedIsPlaying(ped,"/Global/GS_Male_A",true) or PedIsPlaying(ped,"/Global/GS_Fat_A",true) or PedIsPlaying(ped,"/Global/GS_Female_A",true) and PedGetFaction(ped,6) then
			      PedSetActionNode(ped,"/Global/Player","Act/Anim/Player.act")
			      PedSetActionTree(ped,"/Global/"..replaceStyle[n].style,"Act/Anim/"..replaceStyle[n].style..".act")
			    end
		      elseif replaceStyle[n].faction == 7 then
		        if PedIsPlaying(ped,"/Global/Authority",true) and PedGetFaction(ped,7) then
			      PedSetActionNode(ped,"/Global/Player","Act/Anim/Player.act")
			      PedSetActionTree(ped,"/Global/"..replaceStyle[n].style,"Act/Anim/"..replaceStyle[n].style..".act")
			    end
		      elseif replaceStyle[n].faction == 8 then
		        if PedIsPlaying(ped,"/Global/Authority",true) or PedIsPlaying(ped,"/Global/TE_Female_A",true) or PedIsPlaying(ped,"/Global/TE_Secretary",true) and PedGetFaction(ped,8) then
			      PedSetActionNode(ped,"/Global/Player","Act/Anim/Player.act")
			      PedSetActionTree(ped,"/Global/"..replaceStyle[n].style,"Act/Anim/"..replaceStyle[n].style..".act")
			    end
		      elseif replaceStyle[n].faction == 9 then
		        if PedIsPlaying(ped,"/Global/CV_Male_A",true) and PedGetFaction(ped,9) then
			      PedSetActionNode(ped,"/Global/Player","Act/Anim/Player.act")
			      PedSetActionTree(ped,"/Global/"..replaceStyle[n].style,"Act/Anim/"..replaceStyle[n].style..".act")
			    end
		      elseif replaceStyle[n].faction == 10 then
		        if PedIsPlaying(ped,"/Global/Authority",true) or PedIsPlaying(ped,"/Global/CV_Male_A",true) or PedIsPlaying(ped,"/Global/GS_Male_A",true) and PedGetFaction(ped,10) then
			      PedSetActionNode(ped,"/Global/Player","Act/Anim/Player.act")
			      PedSetActionTree(ped,"/Global/"..replaceStyle[n].style,"Act/Anim/"..replaceStyle[n].style..".act")
			    end
		      elseif replaceStyle[n].faction == 11 or PedIsModel(ped,BulliesID) then
		        if PedIsPlaying(ped,"/Global/B_Striker_A",true) and PedGetFaction(ped,11) then
			      PedSetActionNode(ped,"/Global/Player","Act/Anim/Player.act")
			      PedSetActionTree(ped,"/Global/"..replaceStyle[n].style,"Act/Anim/"..replaceStyle[n].style..".act")
			    end
			  end
		    end
		  end
	    end
	  end
	  if ReplaceFactionModel then
	    for i,ped in {PedFindInAreaXYZ(0,0,0,999999)} do
	      if PedIsValid(ped) and ped ~= gPlayer or ped ~= Player2 then
		    local DF = DetectFaction
		    local DM = FactionModel
		    for DFMS = 1,table.getn(DM) do
		      for d = 2,8 do
		        if DM[DFMS][d] ~= "nil" then
			      if PedIsModel(ped,NerdID) or PedGetFaction(ped,1) then
			        PedSwapModel(ped,DM[DFMS][math.random(2,8)])
			      end
			      if PedIsModel(ped,DropoutID) or PedGetFaction(ped,3) then
			       PedSwapModel(ped,DM[DFMS][math.random(2,8)])
			      end
			      if PedIsModel(ped,GreasersID) or PedGetFaction(ped,4) then
			        PedSwapModel(ped,DM[DFMS][math.random(2,8)])
			      end
			      if PedIsModel(ped,PrepiesID) or PedGetFaction(ped,5) then
			        PedSwapModel(ped,DM[DFMS][math.random(2,8)])
			      end
			      if PedIsModel(ped,JocksID) or PedGetFaction(ped,2) then
				    PedSwapModel(ped,DM[DFMS][math.random(2,8)])
			      end
			      if PedIsModel(ped,BulliesID) or PedGetFaction(ped,11) then
				    PedSwapModel(ped,DM[DFMS][math.random(2,8)])
				  end
			    end
			  end
		    end
		  end
	    end
	  end
	  -- Burn with colour:
	  if burn1 == 1 then
	    EffectSetGymnFireOn(true)
	  end
	  -- Burn (just effect):
	  if burn2 == 1 then
	    EffectSetGymnFireAlpha(true)
	  end
	  -- Control Player:
	  if playerControl then
	    PlayerSetControl(1)
	  end
	  -- Max Punishment Points:
	  if PlayerGetPunishmentPoints() > mapp then
	    -- mapp = MaxPunishmentPoints
	    PlayerSetPunishmentPoints(mapp)
	  end
	  -- Min Punishment Points:
	  if PlayerGetPunishmentPoints() < mipp then
	    -- mipp = MinPunishmentPoints
	    PlayerSetMinPunishmentPoints(mipp)
	    PlayerSetPunishmentPoints(mipp)
	  end
	  -- Game Speed:
	  if GameSpeed then
	    -- "GameSpeed" variable just looping before "for" cause this'll not work if you use "for" after "while" section.
	    for i,ped in {PedFindInAreaXYZ(0,0,0,999999)} do
	      if playerGameSpeedEffect == 0 then
            if PedIsValid(ped) and ped ~= gPlayer then
	          GameSetPedStat(ped,20,gameSpeed)
		    end
	      else
	        if PedIsValid(ped) then
		      GameSetPedStat(ped,20,gameSpeed)
		    end
		  end
          if PedIsValid(ped) and PedIsInAnyVehicle(ped) then
		    local v_speed = gameSpeed * 1.2 / 100
			if playerGameSpeedEffect == 0 then
			  if ped ~= gPlayer then
		        if v_speed > 1 then
		          VehicleSetAccelerationMult(PedGetLastVehicle(ped),v_speed)
		        else
		          VehicleSetAccelerationMult(PedGetLastVehicle(ped),0)
				end
			  end
			else
			  if v_speed > 1 then
		        VehicleSetAccelerationMult(PedGetLastVehicle(ped),v_speed)
		      else
		        VehicleSetAccelerationMult(PedGetLastVehicle(ped),0)
				VehicleStop(PedGetLastVehicle(ped))
			  end
		    end
		  end
	    end
	  end
	  if fightingSystem then
	    for i,pedFS in {PedFindInAreaXYZ(0,0,0,9999999)} do
	      if PedIsValid(pedFS) and pedFS ~= gPlayer and pedFS ~= gPlayerAllies then
		    if pedRun then
		      PedSetFlag(pedFS,77,true)
		    elseif not pedRun then
		      PedSetFlag(pedFS,77,false)
		    elseif pedDFB then
		      PedSetFlag(pedFS,108,true)
		    elseif not pedDFB then
		      PedSetFlag(pedFS,108,false)
		    elseif pedAEO then
		      PedSetFlag(pedFS,33,true)
		    elseif not pedAEO then
		      PedSetFlag(pedFS,33,false)
		    end
		    if shutUp then
		      PedSetFlag(pedFS,129,true)
			  SoundStopCurrentSpeechEvent(pedFS)
		    elseif not shutUp then
		      PedSetFlag(pedFS,129,false)
		    end
		    if kissAllGirls then
		      if PedIsFemale(pedFS) then
			    PedSetFlag(pedFS,84,true)
			  end
		    elseif not kissAllGirls then
		      if PedIsFemale(pedFS) then
			    PedSetFlag(pedFS,84,false)
			  end
		    end
		    if kissAllBoys then
		      if not PedIsFemale(pedFS) then
			    PedSetFlag(pedFS,84,true)
			  end
		    elseif not kissAllBoys then
		      if not PedIsFemale(pedFS) then
			    PedSetFlag(pedFS,84,false)
			  end
		    end
		  end
	    end
	  end
	  -- No Punishments:
	  if noPunishment == 1 then
	    DisablePunishmentSystem(true)
	    PedSetPunishmentPoints(gPlayer,0)
	    shared.gGirlsDormWarning = false
	  end
	  -- Infinite Ammo:
	  if inAmmo == 1 then
	    PedSetFlag(gPlayer,24,true)
	    if PedGetWeapon(gPlayer) ~= -1 and IsButtonBeingReleased(12,0) then
		  GiveAmmoToPlayer(PedGetWeapon(gPlayer),50,false)
	    end
	  end
	  -- Infinite Carnival Tickets:
	  if inTickets == 1 then
	    ItemSetCurrentNum(495,9999)
	  end
	  -- Freeze Time:
	  if timeFreeze == 1 then
	    PauseGameClock()
	  end
	  -- Infinite Health:
	  if inHealth == 1 then
	    PedSetHealth(gPlayer,500)
	    PedSetMaxHealth(gPlayer,PlayerGetHealth())
	    if PedIsValid(Player2) then
	      PedSetHealth(Player2,500)
	    end
	    if PedIsValid(Player3) then
	      PedSetHealth(Player3,500)
	    end
	    PedSetNoDamageNextFall(gPlayer,true)
	  end
	  -- Infinite Money:
	  if inMoney == 1 then
	    PlayerSetMoney(999999.99)
	  end
	  -- Eagle Eye:
	  if eagleEye == 1 then
	    local x,y,z = PlayerGetPosXYZ()
	    CameraSetXYZ(x,y,z + 15)
	    CameraLookAtXYZ(x,y,z)
	  end
	  -- Far Vision:
	  if farVision == 1 then
	    local x,y,z = PlayerGetPosXYZ()
	    CameraSetXYZ(x + 25,y + 25,z + 15)
	    CameraLookAtXYZ(x,y,z)
	  end
	  -- FPS [BETA]:
	  if fpsCam == 1 then
	  end
	  -- Panoramic:
	  if tps == 1 then
	  end
	  -- Widescreen:
	  if nearPlayer == 1 then
	    CameraSetWidescreen(true)
	  end
	  -- Blinded:
	  if blind == 1 then
	    EffectBlindedbyMud(true)
	  end
	  -- Others:
	  MainATZB() -- Vehicle Sync
	  MainATZC() -- Fighting Style
	  LocalMultiplayerATZ() -- Local Multiplayer Mod
	  -- Frames:
	end
	Wait(0)
  end
end

function MovementsScript()
  while getMovements do
	--Player1 Movement:
	if movement ~= "DEFAULT" and not in_other_task then
	  -- DEFAULT = Default Movement from Fighting Style
	  local defkey = PedMePlaying(gPlayer,"DEFAULT_KEY")
	  -- Run Detection:
	  if IsButtonBeingPressed(7,0) then
	    sprintPressed = sprintPressed + 1
		lastSprint = GetTimer()
	  elseif GetTimer() >= lastSprint + 400 then
	    sprintPressed = 0
	  end
	  -- Sprint Detection:
	  if IsButtonBeingReleased(7,0) then
	    lastRun = GetTimer()
	  end
	  -- Doing Movement:
	  if PlayerIsFree() and not PedGetFlag(gPlayer,2,true) and not PlayerIsInAnyVehicle() then
	    sensitivity = 0.1
		-- Button Movement Detection [W][A][S][D]:
	    if sensitivity <= math.abs(GetStickValue(16,0)) + math.abs(GetStickValue(17,0)) and not IsButtonPressed(10,0) then
		  -- Sign:
		  moving = true
		  --local treeMoves = PedGetActionTree(gPlayer)
		  -- Moving:
		  if sprintPressed > 1 then
		    if not GreaseMovement() then
		      PedSetActionNode(gPlayer,"/Global/"..movement.."/Default_KEY/ExecuteNodes/Free/SprintBasic","Act/Anim/"..movement..".act")
			else
			  PedSetActionNode(gPlayer,"/Global/P_Striker_A/Default_KEY/ExecuteNodes/Free/SprintBasic","Act/Anim/P_Striker_A.act")
			end
		  elseif IsButtonPressed(7,0) or GetTimer() < lastRun + 200 then
		    PedSetActionNode(gPlayer,"/Global/"..movement.."/Default_KEY/ExecuteNodes/Free/RunBasic","Act/Anim/"..movement..".act")
		  else
		    PedSetActionNode(gPlayer,"/Global/"..movement.."/Default_KEY/ExecuteNodes/Free/WalkBasic","Act/Anim/"..movement..".act")
		  end
		  -- Jump:
		  if IsButtonBeingPressed(8,0) then
		    PedSetActionNode(gPlayer,"/Global/Player/JumpActions/Jump", "Act/Anim/Player.act")
		  end
		  -- Grapple while running:
		  if IsButtonBeingPressed(9,0) and PedIsValid(PedGetTargetPed(gPlayer)) then
		    PedSetActionNode(gPlayer,"/Global/Actions/Grapples/RunningTakedown","Act/Globals.act")
		  end
		  -- Running Attacks:
		  if IsButtonBeingPressed(6,0) and PedIsPlaying(gPlayer,"/Global/"..movement.."/Default_KEY/ExecuteNodes/Free/RunBasic",true) then
		    PedSetActionNode(gPlayer,"/Global/Actions/Offense/RunningAttacks/RunningAttacksDirect","Act/Globals.act")
		  elseif IsButtonBeingPressed(6,0) and PedIsPlaying(gPlayer,"/Global/"..movement.."/Default_KEY/ExecuteNodes/Free/SprintBasic",true) then
		    PedSetActionNode(gPlayer,"/Global/Player/Attacks/Strikes/RunningAttacks/HeavyAttacks/RunShoulder","Act/Player.act")
		  end
		  local target = PedGetTargetPed(gPlayer)
          if PedIsValid(target) and IsButtonPressed(10,0) then
		    if PedIsPlaying(gPlayer,"/Global/"..movement.."/Default_KEY/ExecuteNodes/Free/WalkBasic",true) then
		      local t1,t2,t3 = PedGetPosXYZ(target)
		      PedFaceXYZ(gPlayer,t1,t2,t3)
		    end
	      end
		elseif moving then
		  -- Stoping Player:
		  moving = false
		  PedSetActionNode(gPlayer,"/Global/"..saveStyle,"Act/Anim/"..saveStyle..".act")
		end
	  end
	  -- Targeting ped:
	end
	-- Player2 Movement:
	if movement2 ~= "NONE" and PedIsValid(Player2) then
	  -- NONE = Default Movement from Fighting Style
	  local defkey1 = PedMePlaying(Player2,"DEFAULT_KEY")
	  -- Run Detection:
	  if IsButtonBeingPressed(7,1) then
	    sprintPressed1 = sprintPressed1 + 1
		lastSprint1 = GetTimer()
	  elseif GetTimer() >= lastSprint1 + 400 then
	    sprintPressed1 = 0
	  end
	  -- Sprint Detection:
	  if IsButtonBeingReleased(7,1) then
	    lastRun1 = GetTimer()
	  end
	  -- Doing Movement:
	  if PedIsFree(Player2) and not PedGetFlag(Player2,2,true) then
	    sensitivity1 = 0.1
		-- Stick Movement [ANALOG]:
	    if sensitivity1 <= math.abs(GetStickValue(16,1)) + math.abs(GetStickValue(17,1)) then
		  -- Sign:
		  moving2 = true
		  --local treeMoves = PedGetActionTree(gPlayer)
		  -- Moving:
		  if sprintPressed1 > 1 then
		    if not GreaseMovement2() then
		      PedSetActionNode(Player2,"/Global/"..movement2.."/Default_KEY/ExecuteNodes/Free/SprintBasic","Act/Anim/"..movement2..".act")
			else
			  PedSetActionNode(Player2,"/Global/P_Striker_A/Default_KEY/ExecuteNodes/Free/SprintBasic","Act/Anim/P_Striker_A.act")
			end
		  elseif IsButtonPressed(7,1) or GetTimer() < lastRun1 + 200 then
		    PedSetActionNode(Player2,"/Global/"..movement2.."/Default_KEY/ExecuteNodes/Free/RunBasic","Act/Anim/"..movement2..".act")
		  else
		    PedSetActionNode(Player2,"/Global/"..movement2.."/Default_KEY/ExecuteNodes/Free/WalkBasic","Act/Anim/"..movement2..".act")
		  end
		  -- Jump:
		  if IsButtonBeingPressed(8,1) then
		    PedSetActionNode(Player2,"/Global/Player/JumpActions/Jump", "Act/Anim/Player.act")
		  end
		  -- Grapple while running:
		  if IsButtonBeingPressed(9,1) and PedIsValid(PedGetTargetPed(Player2)) then
		    PedSetActionNode(Player2,"/Global/Actions/Grapples/RunningTakedown","Act/Globals.act")
		  end
		  -- Running Attacks:
		  if IsButtonBeingPressed(6,1) and PedIsPlaying(Player2,"/Global/"..movement2.."/Default_KEY/ExecuteNodes/Free/RunBasic",true) then
		    PedSetActionNode(Player2,"/Global/Actions/Offense/RunningAttacks/RunningAttacksDirect","Act/Globals.act")
		  elseif IsButtonBeingPressed(6,1) and PedIsPlaying(Player2,"/Global/"..movement2.."/Default_KEY/ExecuteNodes/Free/SprintBasic",true) then
		    PedSetActionNode(Player2,"/Global/Player/Attacks/Strikes/RunningAttacks/HeavyAttacks/RunShoulder","Act/Player.act")
		  end
		elseif moving2 then
		  -- Stoping Player:
		  moving2 = false
		  PedSetActionNode(Player2,"/Global/Player","Act/Anim/Player.act")
		  --PedSetActionNode(gPlayer,"/Global/Player","Act/Player.act")
		end
	  end
	  -- Targeting ped:
      if IsButtonPressed(10,1) then
	    local x1,y1,z1 = PedGetPosXYZ(Player2)
		for i,target1 in {PedFindInAreaXYZ(0,0,0,999999)} do
		  if target1 ~= Player2 then
		    local t1,t2,t3 = PedGetPosXYZ(target1)
		    if math.abs(t1 - x1) + math.abs(t2 - y1) + math.abs(t3 - z1) < 5 then
			  PedLockTarget(Player2,target1)
			else
			  PedLockTarget(Player2,-1)
			end
		  end
		end
	  elseif IsButtonBeingReleased(10,1) then
	    PedLockTarget(Player2,-1)
	  end
	end
	-- Suspend script:
	Wait(0)
  end
end

function RespectRepeater()
  while myRespect do
	if myRespect then
	  for f = 0,11 do
	    if GetFactionRespect(f,13) == 100 then
		  if PedGetTypeToTypeAttitude(f,13) ~= 4 then
		    PedSetDefaultTypeToTypeAttitude(f,13,4)
		  end
		elseif GetFactionRespect(f,13) == 0 then
		  if PedGetTypeToTypeAttitude(f,13) ~= 0 then
		    PedSetDefaultTypeToTypeAttitude(f,13,0)
		  end
		elseif GetFactionRespect(f,13) ~= 0 or GetFactionRespect(f,13) ~= 100 and GetFactionRespect(f,12) <= 50 then
		  if PedGetTypeToTypeAttitude(f,13) ~= 2 then
		    PedSetDefaultTypeToTypeAttitude(f,13,2)
		  end
		elseif GetFactionRespect(f,13) ~= 0 or GetFactionRespect(f,13) ~= 100 and GetFactionRespect(f,12) > 51 then
		  if PedGetTypeToTypeAttitude(f,13) ~= 3 then
		    PedSetDefaultTypeToTypeAttitude(f,13,3)
		  end
		end
	  end
	  for i,v in {PedFindInAreaXYZ(0,0,0,999999)} do
	    for faction = 0,11 do
		  if PedIsValid(v) and PedGetFaction(v,faction) then
		    if GetFactionRespect(PedGetFaction(v),13) == 100 then
			  if PedGetPedToTypeAttitude(v,13) ~= 4 then
			    PedSetPedToTypeAttitude(v,13,4)
			  end
			  if PedGetEmotionTowardsPed(v,gPlayer) ~= 8 then
			    PedSetEmotionTowardsPed(v,gPlayer,8)
			  end
		    elseif GetFactionRespect(PedGetFaction(v),13) == 0 then
			  PedSetPedToTypeAttitude(v,13,1)
			  if PedGetPedToTypeAttitude(v,13) ~= 1 then
			    PedSetPedToTypeAttitude(v,13,1)
			  end
			  if PedGetEmotionTowardsPed(v,gPlayer) ~= 2 then
			    PedSetEmotionTowardsPed(v,gPlayer,2)
			  end
			end
		  end
		end
	  end
	end
	Wait(0)
  end
end

function ATZ_Another()
  -- Hidup (INDONESIAN) = Alive (ENGLISH)
  local hidup = true
  S_SetupCore()
  if hidup then
    SoundPlay2D("RightBtn")
	Wait(0)
    repeat
	  if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    addSelect = addSelect - 1
		if not MissionActive() then
          if addSelect < 1 then addSelect = (size(adds) - 1) end
		else
		  if addSelect < 1 then addSelect = size(adds) end
		end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    addSelect = addSelect + 1
		if not MissionActive() then
          if addSelect > (size(adds) - 1) then addSelect = 1 end
		else
		  if addSelect > size(adds) then addSelect = 1 end
		end
	  end
	  if not MissionActive() then
	    if addSelect >= 25 then addSelect = 25 end
	  end
	  if IsButtonBeingPressed(3,0) then
	    if addSelect == 1 then
		  SoundPlay2D("RightBtn")
		  Wait(100)
		  repeat
			local ped = PedGetTargetPed()
			if IsButtonBeingPressed(3,0) and PedIsValid(ped) and ped ~= gPlayer then
			  local ped = PedGetTargetPed()
			  local bak_tree = ped_get_action_tree(ped,1)
			  PedSetControllerID(ped,0)
			  PedLockTarget(gPlayer,ped)
			  PedSetActionTree(ped,"/Global/Player","Act/Player.act")
			  PedSetAITree(ped,"/Global/PlayerAI","Act/PlayerAI.act")
			  CameraFollowPed(ped)
			  CameraAllowScriptedChange(true)
			  CameraAllowChange(true)
			  SoundSetAudioFocusCamera(true)
			  in_other_task = true
			  repeat
			    local defkeyped = PedMePlaying(ped,"DEFAULT_KEY")
			    if IsButtonBeingPressed(7,0) and defkeyped then
				  PedSetActionNode(ped,"/Global/G_Johnny/Default_KEY/ExecuteNodes/Free/SprintBasic","Act/Anim/G_Johnny.act")
				elseif (IsButtonBeingReleased(7,0) or PedIsDead(ped)) and PedIsPlaying(ped,"/Global/G_Johnny/Default_KEY/ExecuteNodes/Free/SprintBasic","Act/Anim/G_Johnny.act") then
				  PedSetActionNode(ped,"/Global/Player","Act/Player.act")
				end
				if IsButtonPressed(10,0) then
				  for i,v in {PedFindInAreaXYZ(0,0,0,99999)} do
				    if PedIsValid(v) and v ~= ped then
					  local x2,y2,z2 = PedGetPosXYZ(v)
					  local x1,y1,z1 = PedGetPosXYZ(ped)
					  if math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) < 3 then
					    PedLockTarget(ped,v)
					  else
					    PedLockTarget(ped,-1)
					  end
					end
				  end
				end
				import_action_controller(ped,0)
			    TextPrintString("Control Ped\n[CONTROLLING]",0,1)
				TextPrintString("[Back to player ~LOOK_BACK~]",0,2)
			    Wait(0)
			  until PedIsDead(ped) or IsButtonBeingPressed(14,0)
			  in_other_task = false
			  PedSetControllerID(ped,-1)
			  if PedIsValid(ped) and not PedIsDead(ped) then
			    PedSetActionTree(ped,"/Global/"..bak_tree,"Act/Anim/"..bak_tree..".act")
			    PedSetAITree(ped,"/Global/AI","Act/AI/AI.act")
				PedMakeAmbient(ped)
			  end
			  PedLockTarget(gPlayer,-1)
			  PlayerSwapModel(saveModel)
			  PlayerStopAllActionControllers()
			  CameraFollowPed(gPlayer)
			  CameraAllowScriptedChange(true)
			  CameraAllowChange(true)
			  CameraReturnToPlayer()
			  PedSetControllerID(gPlayer,0)
			  SoundSetAudioFocusPlayer()
			  --AreaTransitionXYZ(AreaGetVisible(),PlayerGetPosXYZ())
			end
			TextPrintString("Control Ped\n\n<"..GetName()..">",0,1)
			if showText then
			  TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~LOOK_BACK~ Exit to Add-On Menu]\n[~ddown~ Control]",0,2)
			end
			Wait(0)
		  until IsButtonBeingReleased(14,0)
		  SoundPlay2D("WrongBtn")
		elseif addSelect == 2 then
		  SoundPlay2D("RightBtn")
		  Wait(100)
		  repeat
			if IsButtonBeingPressed(0,0) then
			  SoundPlay2D("NavUp")
			  vgSelect = vgSelect - 1
			  if vgSelect < 1 then vgSelect = table.getn(vgs) end
			elseif IsButtonBeingPressed(1,0) then
			  SoundPlay2D("NavUp")
			  vgSelect = vgSelect + 1
			  if vgSelect > table.getn(vgs) then vgSelect = 1 end
			end
			if IsButtonBeingPressed(3,0) then
			  local ped = GetTarget()
			  local x,y,z = PlayerGetPosXYZ()
			  if vgSelect == 1 then
			    Wait(100)
				repeat
				  if IsButtonBeingPressed(0,0) or faster_select(0) then
				    SoundPlay2D("NavUp")
					lmSelect = lmSelect - 1
					if lmSelect < 1 then lmSelect = table.getn(lms) end
				  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
					SoundPlay2D("NavUp")
					lmSelect = lmSelect + 1
					if lmSelect > table.getn(lms) then lmSelect = 1 end
				  end
				  if IsButtonBeingPressed(3,0) then
					local ped = GetTarget()
					local x,y,z = PlayerGetPosXYZ()
					if not PedIsValid(Player2) and not PedIsValid(Player3) then
					  Player2 = PedCreateXYZ(2,x + 2,y + 2,z)
					  PedSwapModel(Player2,"player")
					  PedSetActionTree(Player2,"/Global/Player","Act/Anim/Player.act")
					  PedSetAITree(Player2,"/Global/PlayerAI","Act/PlayerAI.act")
					  PedSetInfiniteSprint(Player2, true)
					  PedRecruitAlly(gPlayer,Player2)
					  PedSetControllerID(Player2,1)
					  PedSetFaction(Player2, 13)
				    end
				  elseif IsButtonBeingPressed(2,0) then
				    if PedIsValid(Player2) then
				      PedDelete(Player2)
					end
					if VehicleIsValid(VehicleForPlayer2) then
					  VehicleDelete(VehicleForPlayer2)
					elseif VehicleIsValid(VehicleForPlayer3) then
					  VehicleDelete(VehicleForPlayer3)
					end
				  end
				  TextPrintString("Local Multiplayer Mod\n[Create Player]\n\nPlayer 2: "..Player2Valid().."\nPlayer 3: "..Player3Valid(),0,1)
				  if showText then
				    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~LOOK_BACK~ Exit]\n[Delete All ~dup~|~ddown~ Select]",0,2)
				  end
				  Wait(0)
				until IsButtonBeingReleased(14,0)
				SoundPlay2D("WrongBtn")
			  elseif vgSelect == 2 then
			    Wait(100)
				repeat
				  if IsButtonPressed(0,1) or IsButtonPressed(0,2) then
				    SoundPlay2D("NavUp")
					modelSelect = modelSelect - 1
					if modelSelect < 1 then modelSelect = table.getn(models) end
				  elseif IsButtonPressed(1,1) or IsButtonPressed(1,2) then
					SoundPlay2D("NavUp")
					modelSelect = modelSelect + 1
					if modelSelect > table.getn(models) then modelSelect = 1 end
				  end
				  if IsButtonBeingPressed(3,1) then
				    PedSwapModel(Player2,models[modelSelect].model)
					PedSetActionTree(Player2,"/Global/Player","Act/Anim/Player.act")
					PedSetAITree(Player2,"/Global/PlayerAI","Act/PlayerAI.act")
					PedSetInfiniteSprint(Player2, true)
				  elseif IsButtonBeingPressed(3,2) then
				    PedSwapModel(Player3,models[modelSelect].model)
					PedSetActionTree(Player3,"/Global/Player","Act/Anim/Player.act")
					PedSetAITree(Player3,"/Global/PlayerAI","Act/PlayerAI.act")
					PedSetInfiniteSprint(Player3, true)
				  end
				  TextPrintString("Local Multiplayer Mod\n[Model Selector]\n\n>"..models[modelSelect].name.."<",0,1)
				  if showText then
				    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~LOOK_BACK~ Exit]\n[~ddown~ Select]",0,2)
				  end
				  Wait(0)
				until IsButtonBeingReleased(14,0)
				SoundPlay2D("WrongBtn")
			  elseif vgSelect == 3 then
			    Wait(100)
				S_SetupMovementClone()
				repeat
				  if IsButtonBeingPressed(0,1) or IsButtonBeingPressed(0,2) then
				    SoundPlay2D("NavUp")
					msc = msc - 1
					if msc < 1 then msc = table.getn(smoc) end
				  elseif IsButtonBeingPressed(1,1) or IsButtonBeingPressed(1,2) then
					SoundPlay2D("NavUp")
					msc = msc + 1
					if msc > table.getn(smoc) then msc = 1 end
				  end
				  if IsButtonBeingPressed(3,1) then
					movement2 = smoc[msc]
					PedSetInfiniteSprint(Player2, true)
				  elseif IsButtonBeingPressed(3,2) then
					movement3 = smoc[msc]
					PedSetInfiniteSprint(Player3, true)
				  end
				  TextPrintString("Local Multiplayer Mod\n[Movement Style]\n\n>"..smoc[msc].."<",0,1)
				  if showText then
				    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~LOOK_BACK~ Exit]\n[~ddown~ Select]",0,2)
				  end
				  Wait(0)
				until IsButtonBeingReleased(14,0)
				SoundPlay2D("WrongBtn")
			  elseif vgSelect == 4 then
			    Wait(100)
				repeat
				  if IsButtonBeingPressed(0,0) or faster_select(0) then
					SoundPlay2D("NavUp")
					cvtSelect = cvtSelect - 1
					if cvtSelect < 1 then cvtSelect = size(cvts) end
				  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
					SoundPlay2D("NavUp")
					cvtSelect = cvtSelect + 1
					if cvtSelect > size(cvts) then cvtSelect = 1 end
				  end
				  if IsButtonBeingPressed(3,1) then
					local x,y,z = PedGetPosXYZ(Player2)
					if VehicleIsValid(VehicleForPlayer2) and PedIsInVehicle(Player2,VehicleForPlayer2) then
					  PedWarpOutOfCar(Player2,VehicleForPlayer2)
					  Wait(100)
					  VehicleDelete(VehicleForPlayer2)
					elseif VehicleIsValid(VehicleForPlayer2) and not PedIsInVehicle(Player2,VehicleForPlayer2) then
					  VehicleDelete(VehicleForPlayer2)
					end
					VehicleForPlayer2 = VehicleCreateXYZ(cvts[cvtSelect][1],x + 2,y + 2,z)
				  elseif IsButtonBeingPressed(3,2) then
					local x,y,z = PedGetPosXYZ(Player3)
					if VehicleIsValid(VehicleForPlayer3) and PedIsInVehicle(Player3,VehicleForPlayer3) then
					  PedWarpOutOfCar(Player3,VehicleForPlayer3)
					  Wait(100)
					  VehicleDelete(VehicleForPlayer3)
					elseif VehicleIsValid(VehicleForPlayer3) and not PedIsInVehicle(Player3,VehicleForPlayer3) then
					  VehicleDelete(VehicleForPlayer3)
					end
					VehicleForPlayer3 = VehicleCreateXYZ(cvts[cvtSelect][1],x + 2,y + 2,z)
				  end
				  TextPrintString("Local Multiplayer Mod\n[Vehicle Selector]\n\n>"..cvts[cvtSelect][2].."<",0,1)
				  TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~LOOK_BACK~ Exit]\n[~ddown~ Select]",0,2)
				  Wait(0)
				until IsButtonBeingReleased(14,0)
				SoundPlay2D("WrongBtn")
			  end
			end
			if vgSelect == 1 then
		      TextPrintString("Local Multiplayer Mod\n\n:"..vgs[vgSelect]..":\n"..vgs[vgSelect + 1].."\n"..vgs[vgSelect + 2].."\n"..vgs[vgSelect + 3].."",0,1)
			elseif vgSelect == 2 then
		      TextPrintString("Local Multiplayer Mod\n\n"..vgs[vgSelect - 1].."\n:"..vgs[vgSelect]..":\n"..vgs[vgSelect + 1].."\n"..vgs[vgSelect + 2].."",0,1)
			elseif vgSelect == 3 then
		      TextPrintString("Local Multiplayer Mod\n\n"..vgs[vgSelect - 2].."\n"..vgs[vgSelect - 1].."\n:"..vgs[vgSelect]..":\n"..vgs[vgSelect + 1].."",0,1)
			elseif vgSelect == 4 then
		      TextPrintString("Local Multiplayer Mod\n\n"..vgs[vgSelect - 3].."\n"..vgs[vgSelect - 2].."\n"..vgs[vgSelect - 1].."\n:"..vgs[vgSelect]..":",0,1)
			end
			if showText then
			  TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~LOOK_BACK~ Exit to Add-On Menu]\n[~ddown~ Select]",0,2)
		    end
			Wait(0)
		  until IsButtonBeingReleased(14,0)
		  SoundPlay2D("WrongBtn")
		elseif addSelect == 3 then
		  SoundPlay2D("RightBtn")
		  Wait(100)
		  showNode = true
		  repeat
		    local ped = PedGetTargetPed()
		    if not PedIsValid(ped) then
			  ped = gPlayer
		    end
			if IsButtonBeingPressed(3,0) then
			  showNode = not showNode
			  if showNode then
				TextPrintString("Show action nodes",2,2)
			  else
				TextPrintString("Don't show action nodes",2,2)
			  end
			end
		    if showNode then
			  local node,act = PedGetActionNode(ped)
			  TextPrintString(PedGetName(ped)..'\n'..node..'\n'..act,1,2)
		    end
			Wait(0)
		  until IsButtonBeingReleased(14,0)
		  SoundPlay2D("WrongBtn")
		elseif addSelect == 4 then
		  SoundPlay2D("RightBtn")
		  Wait(100)
		  repeat
		    local a = AreaGetVisible()
		    local x,y,z = PlayerGetPosXYZ()
			TextPrintString("Coord Finder\n\nArea: "..a.."\nX: "..x.."\nY: "..y.."\nZ: "..z.."",0,1)
			Wait(0)
		  until IsButtonBeingReleased(14,0)
		  SoundPlay2D("WrongBtn")
		elseif addSelect == 5 then
		  SoundPlay2D("RightBtn")
		  Wait(100)
		  repeat
		    local ped = PedGetTargetPed()
			if IsButtonBeingPressed(3,0) then
			  if PedIsValid(PedGetAllyFollower(gPlayer)) and not PedIsDead(PedGetAllyFollower(gPlayer)) then
			    PedRecruitAlly(PedGetAllyFollower(gPlayer),ped)
				PedGuardPed(ped,gPlayer)
			  elseif not PedIsValid(PedGetAllyFollower(gPlayer)) then
			    PedRecruitAlly(gPlayer,ped)
				PedGuardPed(ped,gPlayer)
			  end
			end
			TextPrintString("Recruit Ally\n\n<"..GetName()..">",0,1)
			if showText then
			  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[~ddown~ Recruit]",0,2)
			end
			Wait(0)
		  until IsButtonBeingReleased(14,0)
		  SoundPlay2D("WrongBtn")
		elseif addSelect == 6 then
		  SoundPlay2D("RightBtn")
		  Wait(100)
		  repeat
		    local ped = PedGetTargetPed()
			if IsButtonBeingPressed(3,0) then
			  PedDelete(ped)
			end
			TextPrintString("Delete Ped\n\n<"..GetName()..">",0,1)
			if showText then
			  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[~ddown~ Delete]",0,2)
			end
			Wait(0)
		  until IsButtonBeingReleased(14,0)
		  SoundPlay2D("WrongBtn")
		elseif addSelect == 7 then
		  SoundPlay2D("RightBtn")
		  Wait(100)
		  repeat
			if IsButtonBeingPressed(2,0) then
			  BlipRemove(blipPos)
			  posa,posx,posy,posz = AreaGetVisible(),PlayerGetPosXYZ()
			  blipPos = BlipAddXYZ(posx,posy,posz,1,0,10)
			elseif IsButtonBeingPressed(3,0) then
			  if posa ~= 999 then
				AreaTransitionXYZ(posa,posx,posy,posz)
			  end
			end
			TextPrintString("Save Position\n\nArea: "..posa.."\nX: "..posx.."\nY: "..posy.."\nZ: "..posz,0,1)
			if showText then
			  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[Save Pos ~dup~|~ddown~ Teleport]",0,2)
			end
			Wait(0)
		  until IsButtonBeingReleased(14,0)
		  SoundPlay2D("WrongBtn")
		elseif addSelect == 8 then
		  SoundPlay2D("RightBtn")
		  Wait(100)
		  repeat
			if IsButtonBeingPressed(3,0) then
			  SoundPlay2D("ButtonUp")
			  AreaSetAllDoorsUnlocked()
			elseif IsButtonBeingPressed(2,0) then
			  SoundPlay2D("ButtonUp")
			  AreaSetAllDoorsLocked()
			end
			TextPrintString("Area Doors\n\nLock All Doors ~dup~\nUnlock All Doors ~ddown~",0,1)
			if showText then
			  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]",0,2)
			end
			Wait(0)
		  until IsButtonBeingReleased(14,0)
		  SoundPlay2D("WrongBtn")
		elseif addSelect == 9 then
		  SoundPlay2D("RightBtn")
		  Wait(100)
		  repeat
		    local ped = GetTarget()
			TextPrintString("Weapon ID\n\nWeapon ID:\n"..PedGetWeapon(gPlayer),0,1)
			if showText then
			  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[~ddown~ Find]",0,2)
			end
			Wait(0)
		  until IsButtonBeingReleased(14,0)
		  SoundPlay2D("WrongBtn")
		elseif addSelect == 10 then
		  SoundPlay2D("RightBtn")
		  Wait(100)
		  repeat
			if IsButtonBeingPressed(0,0) then
			  SoundPlay2D("NavUp")
			  rtSelect = rtSelect - 1
			  if rtSelect < 1 then rtSelect = table.getn(rts) end
			elseif IsButtonBeingPressed(1,0) then
			  SoundPlay2D("NavUp")
			  rtSelect = rtSelect + 1
			  if rtSelect > table.getn(rts) then rtSelect = 1 end
			end
			if IsButtonBeingPressed(3,0) then
			  if rtSelect == 1 or rtSelect == 2 then
			    Wait(100)
				repeat
				  if IsButtonBeingPressed(0,0) or faster_select(0) then
					SoundPlay2D("NavUp")
					ghSelect = ghSelect - 1
					if ghSelect < 1 then ghSelect = table.getn(ghs) end
				  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
					SoundPlay2D("NavUp")
					ghSelect = ghSelect + 1
					if ghSelect > table.getn(ghs) then ghSelect = 1 end
				  end
				  if IsButtonBeingPressed(3,0) then
				    if rtSelect == 1 then
				      Wait(100)
					  repeat
					    if IsButtonBeingPressed(0,0) or faster_select(0) then
						  SoundPlay2D("NavUp")
						  vwSelect = vwSelect - 1
						  if vwSelect < 1 then vwSelect = table.getn(vws) end
					    elseif IsButtonBeingPressed(1,0) or faster_select(0) then
						  SoundPlay2D("NavUp")
						  vwSelect = vwSelect + 1
						  if vwSelect > table.getn(vws) then vwSelect = 1 end
					    end
					    TextPrintString("Collectibles\n["..ghs[ghSelect][2].."]\n\n"..vws[vsSelect],0,1)
					    TextPrintString("[~ddown~ Select]\n[Navigate ~dleft~ or ~dright~]",0,2)
					    Wait(0)
					  until IsButtonBeingPressed(3,0)
					  if vwSelect == 1 then
					    CollectiblesSetTypeAvailable(ghs[ghSelect][1],true)
					  elseif vwSelect == 2 then
					    CollectiblesSetTypeAvailable(ghs[ghSelect][1],false)
					  end
					elseif rtSelect == 2 then
				      CollectiblesSetAllAsCollected(ghs[ghSelect][1])
				    end
				  end
				  TextPrintString("Collectibles\n[Spawn/Remove]\n\n"..ghs[ghSelect][2],0,1)
				  if showText then
				    TextPrintString("[~LOOK_BACK~ Exit|~ddown~ Select]\n[Navigate ~dleft~ or ~dright~]",0,2)
				  end
				  Wait(0)
				until IsButtonBeingPressed(14,0)
				SoundPlay2D("WrongBtn")
			  end
			end
		    TextPrintString("Collectibles\n\n>"..rts[rtSelect].."<",0,1)
			if showText then
			  TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~LOOK_BACK~ Exit to Add-On Menu]\n[~ddown~ Select]",0,2)
		    end
			Wait(0)
		  until IsButtonBeingReleased(14,0)
		  SoundPlay2D("WrongBtn")
		elseif addSelect == 11 then
		  if autoShot == 1 then
		    TextPrintString("You must turn off Rapid Fire Brockets before entering this menu",2,1)
			Wait(2000)
		  else
		    SoundPlay2D("RightBtn")
		    Wait(100)
		    repeat
			  if IsButtonBeingPressed(3,0) and rapidGun == 0 then
			    rapidGun = 1
			  elseif IsButtonBeingPressed(3,0) and rapidGun == 1 then
			    rapidGun = 0
			  end
		      TextPrintString("Rapid Fire Guns\n\n"..GetGuns(),0,1)
		      Wait(0)
		    until IsButtonBeingReleased(14,0)
		    SoundPlay2D("WrongBtn")
		  end
		elseif addSelect == 12 then
		  SoundPlay2D("RightBtn")
		  Wait(100)
		  repeat
			if IsButtonBeingPressed(3,0) and rapidPunch == 0 then
			  rapidPunch = 1
			elseif IsButtonBeingPressed(3,0) and rapidPunch == 1 then
			  rapidPunch = 0
			end
		    TextPrintString("Rapid Punchs\n\n"..GetPunchs(),0,1)
		    Wait(0)
		  until IsButtonBeingReleased(14,0)
		  SoundPlay2D("WrongBtn")
		elseif addSelect == 13 then
		  SoundPlay2D("RightBtn")
		  Wait(100)
		  repeat
			if IsButtonBeingPressed(0,0) then
			  SoundPlay2D("NavUp")
			  hjSelect = hjSelect - 1
			  if hjSelect < 1 then hjSelect = table.getn(hjs) end
			elseif IsButtonBeingPressed(1,0) then
			  SoundPlay2D("NavUp")
			  hjSelect = hjSelect + 1
			  if hjSelect > table.getn(hjs) then hjSelect = 1 end
			end
			if IsButtonBeingPressed(3,0) then
			  if hjSelect == 1 then
			    if eagleEye == 0 then
			      eagleEye = 1
				elseif eagleEye == 1 then
				  eagleEye = 0
				  CameraReturnToPlayer()
				end
			  end
			  if hjSelect == 2 then
			    if farVision == 0 then
				  farVision = 1
				elseif farVision == 1 then
				  farVision = 0
				  CameraReturnToPlayer()
				end
			  elseif hjSelect == 3 then
			    if nearPlayer == 0 then
				  nearPlayer = 1
				elseif nearPlayer == 1 then
				  nearPlayer = 0
				  CameraSetWidescreen(false)
				end
			  elseif hjSelect == 4 then
				FreeCam()
			  elseif hjSelect == 5 then
			    if fpsCam == 0 then
				  fpsCam = 1
				elseif fpsCam == 1 then
				  fpsCam = 0
				  CameraReturnToPlayer()
				end
			  elseif hjSelect == 6 then
			    if tps == 0 then
				  tps = 1
				elseif tps == 1 then
				  tps = 0
				  CameraReturnToPlayer()
				end
			  end
			end
		    TextPrintString("Camera Style\n\n"..hjs[hjSelect],0,1)
			if showText then
			  TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~LOOK_BACK~ Exit]\n[~ddown~ Select]",0,2)
		    end
			Wait(0)
		  until IsButtonBeingReleased(14,0)
		  SoundPlay2D("WrongBtn")
		elseif addSelect == 14 then
		  SoundPlay2D("RightBtn")
		  Wait(100)
		  repeat
			if IsButtonBeingPressed(0,0) or faster_select(0) then
			  SoundPlay2D("NavUp")
			  opSelect = opSelect - 1
			  if opSelect < 1 then opSelect = table.getn(ops) end
			elseif IsButtonBeingPressed(1,0) or faster_select(1) then
			  SoundPlay2D("NavUp")
			  opSelect = opSelect + 1
			  if opSelect > table.getn(ops) then opSelect = 1 end
			end
			if IsButtonBeingPressed(3,0) then
			  if opSelect == 1 then
			    if blind == 0 then
			      blind = 1
				elseif blind == 1 then
				  blind = 0
				  EffectBlindedbyMud(false)
				end
			  elseif opSelect == 2 then
			    if burn1 == 0 then
				  burn1 = 1
				elseif burn1 == 1 then
				  burn1 = 0
				  EffectSetGymnFireOn(false)
				end
			  elseif opSelect == 3 then
			    if burn2 == 0 then
				  burn2 = 1
				elseif burn2 == 1 then
				  burn2 = 0
				  EffectSetGymnFireAlpha(false)
				end
			  end
			end
		    TextPrintString("Camera Effect\n\n"..ops[opSelect],0,1)
		    Wait(0)
		  until IsButtonBeingReleased(14,0)
		  SoundPlay2D("WrongBtn")
		elseif addSelect == 15 then
		  SoundPlay2D("RightBtn")
		  Wait(100)
		  repeat
		    if IsButtonBeingPressed(0,0) or faster_select(0) then
			  gameSpeed = gameSpeed - 1
			  if gameSpeed < 0 then
			    gameSpeed = 0
			  end
			elseif IsButtonBeingPressed(1,0) or faster_select(0) then
			  gameSpeed = gameSpeed + 1
			  if gameSpeed > 500 then
			    gameSpeed = 500
			  end
			end
			TextPrintString("Game Speed\n\nSpeed: "..gameSpeed,0,1)
			if showText then
			  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[Navigate: ~dleft~ or ~dright~]",0,2)
			end
			Wait(0)
		  until IsButtonBeingReleased(14,0)
		  SoundPlay2D("WrongBtn")
		elseif addSelect == 16 then
		  PedFinder()
		elseif addSelect == 17 then
		  DismissAlly()
		elseif addSelect == 18 then
		  class_editor()
		elseif addSelect == 19 then
		  PedEditor()
		elseif addSelect == 20 then
		  FactionEditor()
		elseif addSelect == 21 then
		  VehicleThief()
		elseif addSelect == 22 then
		  FreeMoves()
		elseif addSelect == 23 then
		  cutscene_editor()
		elseif addSelect == 24 then
		  fight_maker()
		elseif addSelect == 25 then
		  ped_duplicator()
		elseif addSelect == 26 then
		  if MissionActive() then
		    skip_current_mission()
		    --SoundPlayMissionEndMusic(true, 10)
		    --MissionSucceed(false,true,true)
		  else
		    get_error(1)
		  end
		end
	  end
	  if MissionActive() then
	    if addSelect == 1 then
	      TextPrintString("OTHERS MOD\n\n>"..adds[addSelect].."<\n"..adds[addSelect + 1].."\n"..adds[addSelect + 2].."",0,1)
	    elseif addSelect == table.getn(adds) then
	      TextPrintString("OTHERS MOD\n\n"..adds[addSelect - 2].."\n"..adds[addSelect - 1].."\n>"..adds[addSelect].."<",0,1)
	    elseif not (addSelect == table.getn(adds) or addSelect == 1) then
	      TextPrintString("OTHERS MOD\n\n"..adds[addSelect - 1].."\n>"..adds[addSelect].."<\n"..adds[addSelect + 1].."",0,1)
	    end
	  else
	    if addSelect == 1 then
	      TextPrintString("OTHERS MOD\n\n>"..adds[addSelect].."<\n"..adds[addSelect + 1].."\n"..adds[addSelect + 2].."",0,1)
	    elseif addSelect == 25 then
	      TextPrintString("OTHERS MOD\n\n"..adds[addSelect - 2].."\n"..adds[addSelect - 1].."\n>"..adds[addSelect].."<",0,1)
	    elseif not (addSelect == 25 or addSelect == 1) then
	      TextPrintString("OTHERS MOD\n\n"..adds[addSelect - 1].."\n>"..adds[addSelect].."<\n"..adds[addSelect + 1].."",0,1)
	    end
	  end
	  if showText then
	    TextPrintString("[Number: "..addSelect..".]\n[Navigate: ~dleft~ or ~dright~|~LOOK_BACK~ Exit]\n[~ddown~ Open]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	Wait(100)
	F_AutoTextPrint()
  end
end

function ATZ_Config()
  -- Hidup (INDONESIAN) = Alive (ENGLISH)
  local hidup = true
  if hidup then
	SoundPlay2D("RightBtn")
	Wait(100)
	repeat
	  if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    SettingSelect = SettingSelect - 1
        if SettingSelect < 1 then SettingSelect = table.getn(SettingATZ) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    SettingSelect = SettingSelect + 1
	    if SettingSelect > table.getn(SettingATZ) then SettingSelect = 1 end
	  end
	  if SettingSelect == 1 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[1].."\n>"..UseTarget().."<",999999999,1)
		if IsButtonBeingReleased(3,0) and useTargetSetting == 0 then
		  SoundPlay2D("ButtonUp")
		  useTargetSetting = 1
		  useTarget = true
		elseif IsButtonBeingReleased(3,0) and useTargetSetting == 1 then
		  SoundPlay2D("ButtonDown")
		  useTargetSetting = 0
		  useTarget = false
		end
	  elseif SettingSelect == 2 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[2].."\n>"..GetFreeze().."<",999999999,1)
		if IsButtonBeingReleased(3,0) and timeFreeze == 1 then
		  timeFreeze = 0
		  UnpauseGameClock()
		elseif IsButtonBeingReleased(3,0) and timeFreeze == 0 then
		  timeFreeze = 1
		  PauseGameClock()
		end
	  elseif SettingSelect == 3 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[3].."\n>"..GetHealth().."<",999999999,1)
		if IsButtonBeingReleased(3,0) and inHealth == 1 then
		  inHealth = 0
		  PedSetNoDamageNextFall(gPlayer,false)
		elseif IsButtonBeingReleased(3,0) and inHealth == 0 then
		  inHealth = 1
		end
	  elseif SettingSelect == 4 then
		TextPrintString("(SETTINGS)\n\n"..SettingATZ[4].."\n>"..UsePoints().."<",999999999,1)
		if IsButtonBeingReleased(3,0) and noPunishment == 0 then
		  SoundPlay2D("ButtonUp")
		  noPunishment = 1
		  PedSetFlag(gPlayer,117,false)
		elseif IsButtonBeingReleased(3,0) and noPunishment == 1 then
		  SoundPlay2D("ButtonDown")
		  noPunishment = 0
		  PedSetFlag(gPlayer,117,true)
		  DisablePunishmentSystem(false)
		  shared.gGirlsDormWarning = true
		end
	  elseif SettingSelect == 5 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[5].."\n>"..GetAmmo().."<",999999999,1)
		if IsButtonBeingReleased(3,0) and inAmmo == 0 then
		  SoundPlay2D("ButtonUp")
		  inAmmo = 1
		elseif IsButtonBeingReleased(3,0) and inAmmo == 1 then
		  SoundPlay2D("ButtonDown")
		  inAmmo = 0
		  PedSetFlag(gPlayer,24,false)
		end
	  elseif SettingSelect == 6 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[6].."\n>"..GetMoney().."<",999999999,1)
		if IsButtonBeingReleased(3,0) and inMoney == 0 then
		  SoundPlay2D("ButtonUp")
		  inMoney = 1
		elseif IsButtonBeingReleased(3,0) and inMoney == 1 then
		  SoundPlay2D("ButtonDown")
		  inMoney = 0
		end
	  elseif SettingSelect == 7 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[7].."\n>"..GetDamage().."<",999999999,1)
		if IsButtonBeingReleased(3,0) and damageWeapon == 0 then
		  SoundPlay2D("ButtonUp")
		  damageWeapon = 1
		  GameSetPedStat(gPlayer,31,999999)
		elseif IsButtonBeingReleased(3,0) and damageWeapon == 1 then
		  SoundPlay2D("ButtonDown")
		  damageWeapon = 0
		  GameSetPedStat(gPlayer,31,100)
		end
	  elseif SettingSelect == 8 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[8].."\n>"..GetAlone().."<",999999999,1)
		if IsButtonBeingReleased(3,0) and alonePlayer == 0 then
		  SoundPlay2D("ButtonUp")
		  AreaClearSpawners()
		  AreaClearDockers()
		  AreaClearAllPeds()
		  AreaClearPatrolPaths()
		  alonePlayer = 1
		elseif IsButtonBeingReleased(3,0) and alonePlayer == 1 then
		  SoundPlay2D("ButtonDown")
		  alonePlayer = 0
		  StopPedProduction(false)
		end
	  elseif SettingSelect == 9 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[9].."\n>"..GetAlly().."<",999999999,1)
		if IsButtonBeingReleased(3,0) and playerAlly == 0 then
		  SoundPlay2D("ButtonUp")
		  playerAlly = 1
		  PedSetFlag(gPlayer,58,false)
		elseif IsButtonBeingReleased(3,0) and playerAlly == 1 then
		  SoundPlay2D("ButtonDown")
		  playerAlly = 0
		  PedSetFlag(gPlayer,58,true)
		end
	  elseif SettingSelect == 10 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[10].."\n>"..UseGravity().."<",999999999,1)
		if IsButtonBeingReleased(3,0) and gravityPlayer == 0 then
		  SoundPlay2D("ButtonUp")
		  gravityPlayer = 1
		  PedSetEffectedByGravity(gPlayer,false)
		elseif IsButtonBeingReleased(3,0) and gravityPlayer == 1 then
		  SoundPlay2D("ButtonDown")
		  gravityPlayer = 0
		  PedSetEffectedByGravity(gPlayer,true)
		end
	  elseif SettingSelect == 11 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[11].."\n>"..GetInv().."<",999999999,1)
		if IsButtonBeingReleased(3,0) and invPlayer == 0 then
		  SoundPlay2D("ButtonUp")
		  invPlayer = 1
		  PedSetFlag(gPlayer,9,true)
		elseif IsButtonBeingReleased(3,0) and invPlayer == 1 then
		  SoundPlay2D("ButtonDown")
		  invPlayer = 0
		  PedSetFlag(gPlayer,9,false)
		  PedSetInvulnerable(gPlayer,false)
		end
	  elseif SettingSelect == 12 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[12].."\n>"..GetClass().."<",999999999,1)
		if IsButtonBeingReleased(3,0) and classTime == 0 then
		  SoundPlay2D("ButtonUp")
		  classTime = 1
		  myTimerSet = false
		elseif IsButtonBeingReleased(3,0) and classTime == 1 then
		  SoundPlay2D("ButtonDown")
		  classTime = 0
		  myTimerSet = true
		end
	  elseif SettingSelect == 13 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[13].."\n>"..GetCo().."<",999999999,1)
		if IsButtonBeingReleased(3,0) and mapCo == 0 then
		  SoundPlay2D("ButtonUp")
		  mapCo = 1
		  CollectibleOnMapEnable(0,true)
		  CollectibleOnMapEnable(1,true)
		  CollectibleOnMapEnable(2,true)
		  CollectibleOnMapEnable(3,true)
		  CollectibleOnMapEnable(4,true)
		  CollectibleOnMapEnable(5,true)
		elseif IsButtonBeingReleased(3,0) and mapCo == 1 then
		  SoundPlay2D("ButtonDown")
		  mapCo = 0
		  CollectibleOnMapEnable(0,false)
		  CollectibleOnMapEnable(1,false)
		  CollectibleOnMapEnable(2,false)
		  CollectibleOnMapEnable(3,false)
		  CollectibleOnMapEnable(4,false)
		  CollectibleOnMapEnable(5,false)
		end
	  elseif SettingSelect == 14 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[14].."\n>"..GetTickets().."<",0,1)
		if IsButtonBeingReleased(3,0) and inTickets == 0 then
		  SoundPlay2D("ButtonUp")
		  inTickets = 1
		  ItemSetCurrentNum(495,9999)
		elseif IsButtonBeingReleased(3,0) and inTickets == 1 then
		  SoundPlay2D("ButtonDown")
		  inTickets = 0
		end
	  elseif SettingSelect == 15 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[15].."\n>"..GetGameSpeed().."<",0,1)
		if IsButtonBeingReleased(3,0) and playerGameSpeedEffect == 0 then
		  SoundPlay2D("ButtonUp")
		  playerGameSpeedEffect = 1
		elseif IsButtonBeingReleased(3,0) and playerGameSpeedEffect == 1 then
		  SoundPlay2D("ButtonDown")
		  playerGameSpeedEffect = 0
		  GameSetPedStat(gPlayer,20,100)
		end
	  elseif SettingSelect == 16 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[16].."\n>"..GetKissGirls().."<",0,1)
		if IsButtonBeingReleased(3,0) and kissAllGirls then
		  SoundPlay2D("ButtonUp")
		  kissAllGirls = false
		elseif IsButtonBeingReleased(3,0) and not kissAllGirls then
		  SoundPlay2D("ButtonDown")
		  kissAllGirls = true
		end
	  elseif SettingSelect == 17 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[17].."\n>"..GetKissBoys().."<",0,1)
		if IsButtonBeingReleased(3,0) and kissAllBoys then
		  SoundPlay2D("ButtonUp")
		  kissAllBoys = false
		elseif IsButtonBeingReleased(3,0) and not kissAllBoys then
		  SoundPlay2D("ButtonDown")
		  kissAllBoys = true
		end
	  elseif SettingSelect == 18 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[18].."\n>"..GetControl().."<",0,1)
		if IsButtonBeingReleased(3,0) and playerControl then
		  SoundPlay2D("ButtonUp")
		  playerControl = false
		elseif IsButtonBeingReleased(3,0) and not playerControl then
		  SoundPlay2D("ButtonDown")
		  playerControl = true
		end
	  elseif SettingSelect == 19 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[19].."\n>"..GetNa().."<",0,1)
		if IsButtonBeingReleased(3,0) and showText then
		  SoundPlay2D("ButtonUp")
		  showText = false
		elseif IsButtonBeingReleased(3,0) and not showText then
		  SoundPlay2D("ButtonDown")
		  showText = true
		end
	  elseif SettingSelect == 20 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[20].."\n>"..GetMenu().."<",0,1)
		if IsButtonBeingReleased(3,0) then
		  SoundPlay2D("ButtonUp")
		  menu = menu + 1
		  if menu > 6 then
		    menu = 1
		  end
		end
	  elseif SettingSelect == 21 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[21].."\n>"..GetHidingMenu().."<",0,1)
		if IsButtonBeingReleased(3,0) then
		  SoundPlay2D("ButtonUp")
		  hideMenu = hideMenu + 1
		  if hideMenu > 2 then
		    hideMenu = 1
		  end
		end
	  elseif SettingSelect == 22 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[22].."\n>"..fix_model_set().."<",0,1)
		if IsButtonBeingReleased(3,0) then
		  SoundPlay2D("ButtonUp")
		  fix_model_option = fix_model_option + 1
		  if fix_model_option > 6 then
		    fix_model_option = 1
		  end
		end
	  elseif SettingSelect == 23 then
	    TextPrintString("(SETTINGS)\n\n"..SettingATZ[23].."\n>"..skip_cuts().."<",0,1)
		if IsButtonBeingReleased(3,0) then
		  SoundPlay2D("ButtonUp")
		  if skip_cut then
		    skip_cut = false
		  else
		    skip_cut = true
		  end
		end
	  end
	  if showText then
	    TextPrintString("[Exit ~LOOK_BACK~]\n[Navigate: ~dleft~ or ~dright~]\n[Select: ~ddown~]",0,2)
	  end
	  Wait(0)
	until IsButtonBeingReleased(14,0)
	SoundPlay2D("WrongBtn")
	Wait(100)
	F_AutoTextPrint()
  end
end

function MainATZB() -- Take the vehicle back.
  -- PedInRectangle is more easier to take back vehicle rather than PedIsInAreaXYZ
  if VehicleIsValid(VehicleForPlayer) then
    local t,g,m = VehicleGetPosXYZ(VehicleForPlayer)
	local r1 = t + 3
	local r2 = g + 3
	local r3 = t - 3
	local r4 = g - 3
    if PedInRectangle(gPlayer,r1,r2,r3,r4) then
	  local glvp1 = VehicleForPlayer
	  if VehicleIsModel(glvp1,275) or VehicleIsModel(glvp1,276) or VehicleIsModel(glvp1,277) or VehicleIsModel(glvp1,278) or VehicleIsModel(glvp1,279) or VehicleIsModel(glvp1,280) or VehicleIsModel(glvp1,281) or VehicleIsModel(glvp1,282) or VehicleIsModel(glvp1,283) then
	    if IsButtonBeingReleased(9,0) and not PlayerIsInAnyVehicle() then
	      PedPutOnBike(gPlayer,VehicleForPlayer)
		elseif IsButtonBeingPressed(9,0) and PedIsInVehicle(gPlayer,VehicleForPlayer) then
		  PedSetActionNode(gPlayer,"/Global/Vehicles/Bikes/Ground/Dismount/GetOff","Act/Vehicles.act")
		  Wait(500)
	    end
	  elseif VehicleIsModel(glvp1,284) or VehicleIsModel(glvp1,286) or VehicleIsModel(glvp1,288) or VehicleIsModel(glvp1,289) or VehicleIsModel(glvp1,290) or VehicleIsModel(glvp1,291) or VehicleIsModel(glvp1,292) or VehicleIsModel(glvp1,293) or VehicleIsModel(glvp1,294) or VehicleIsModel(glvp1,295) or VehicleIsModel(glvp1,296) or VehicleIsModel(glvp1,297) then
	    if IsButtonBeingReleased(9,0) and not PlayerIsInAnyVehicle() then
	      PedWarpIntoCar(gPlayer,VehicleForPlayer)
		end
	  elseif VehicleIsModel(glvp1,285) or VehicleIsModel(glvp1,287) or VehicleIsModel(glvp1,298) then
	    if IsButtonBeingReleased(9,0) and not PlayerIsInAnyVehicle() then
	      PedWarpIntoCar(gPlayer,VehicleForPlayer)
		elseif IsButtonBeingPressed(9,0) and PedIsInVehicle(gPlayer,VehicleForPlayer) then
		  local x,y,z = VehicleGetPosXYZ(VehicleForPlayer)
		  VehicleStop(VehicleForPlayer)
		  PedWarpOutOfCar(gPlayer,VehicleForPlayer)
		  Wait(50)
		  PedSetPosXYZ(gPlayer,x + 2,y + 2,z)
		  Wait(500)
		end
	  end
	end
	if PedIsInVehicle(gPlayer,VehicleForPlayer) then
	  if IsButtonBeingPressed(8,0) then
	    if siren == 0 then
	      VehicleEnableSiren(VehicleForPlayer,true)
		  siren = 1
		elseif siren == 1 then
		  VehicleEnableSiren(VehicleForPlayer,false)
		  siren = 0
		end
	  end
	end
  end
  if VehicleIsValid(VehicleForPlayer2) then
    local a,s,d = VehicleGetPosXYZ(VehicleForPlayer2)
	local t1 = a + 3
	local t2 = s + 3
	local t3 = a - 3
	local t4 = s - 3
    if PedInRectangle(Player2,t1,t2,t3,t4) then
	  local glvp2 = VehicleForPlayer2
	  if VehicleIsModel(glvp2,275) or VehicleIsModel(glvp2,276) or VehicleIsModel(glvp2,277) or VehicleIsModel(glvp2,278) or VehicleIsModel(glvp2,279) or VehicleIsModel(glvp2,280) or VehicleIsModel(glvp2,281) or VehicleIsModel(glvp2,282) or VehicleIsModel(glvp2,283) then
	    if IsButtonBeingReleased(9,1) and not PedIsInAnyVehicle(Player2) then
	      PedPutOnBike(Player2,VehicleForPlayer2)
		elseif IsButtonBeingPressed(9,1) and PedIsInVehicle(Player2,VehicleForPlayer2) then
		  PedSetActionNode(Player2,"/Global/Vehicles/Bikes/Ground/Dismount/GetOff","Act/Vehicles.act")
		end
	  elseif VehicleIsModel(glvp2,284) or VehicleIsModel(glvp2,286) or VehicleIsModel(glvp2,288) or VehicleIsModel(glvp2,289) or VehicleIsModel(glvp2,290) or VehicleIsModel(glvp2,291) or VehicleIsModel(glvp2,292) or VehicleIsModel(glvp2,293) or VehicleIsModel(glvp2,294) or VehicleIsModel(glvp2,295) or VehicleIsModel(glvp2,296) or VehicleIsModel(glvp2,297) then
	    if IsButtonBeingReleased(9,1) and not PedIsInAnyVehicle(Player2) then
	      PedWarpIntoCar(Player2,VehicleForPlayer2)
		end
	  elseif VehicleIsModel(glvp2,285) or VehicleIsModel(glvp2,287) or VehicleIsModel(glvp2,298) then
	    if IsButtonBeingReleased(9,1) and not PedIsInAnyVehicle(Player2) then
	      PedWarpIntoCar(Player2,VehicleForPlayer2)
		elseif IsButtonBeingPressed(9,1) and PedIsInVehicle(Player2,VehicleForPlayer2) then
		  local x1,y1,z1 = VehicleGetPosXYZ(VehicleForPlayer2)
		  VehicleStop(VehicleForPlayer2)
		  PedWarpOutOfCar(Player2,VehicleForPlayer2)
		  PedSetPosXYZ(gPlayer,x1 + 2,y1 + 2,z1)
		  Wait(100)
		end
	  end
	end
	if PedIsInVehicle(Player2,VehicleForPlayer2) then
	  if IsButtonBeingPressed(8,1) then
	    if siren2 == 0 then
	      VehicleEnableSiren(VehicleForPlayer2,true)
		  siren2 = 1
		elseif siren2 == 1 then
		  VehicleEnableSiren(VehicleForPlayer2,false)
		  siren2 = 0
		end
	  end
	end
  end
  for i = 1,table.getn(betak) do 
    if VehicleIsValid(betak[i].v) then
      local v = betak[i].v
      local t,g,m = VehicleGetPosXYZ(v)
	  local r1 = t + 3
	  local r2 = g + 3
	  local r3 = t - 3
	  local r4 = g - 3
      if PedInRectangle(gPlayer,r1,r2,r3,r4) then
	    local glvp1 = v
	    if VehicleIsModel(glvp1,275) or VehicleIsModel(glvp1,276) or VehicleIsModel(glvp1,277) or VehicleIsModel(glvp1,278) or VehicleIsModel(glvp1,279) or VehicleIsModel(glvp1,280) or VehicleIsModel(glvp1,281) or VehicleIsModel(glvp1,282) or VehicleIsModel(glvp1,283) then
	      if IsButtonBeingReleased(9,0) and not PlayerIsInAnyVehicle() then
	        PedPutOnBike(gPlayer,v)
		  elseif IsButtonBeingPressed(9,0) and PedIsInVehicle(gPlayer,v) then
		    PedSetActionNode(gPlayer,"/Global/Vehicles/Bikes/Ground/Dismount/GetOff","Act/Vehicles.act")
		    Wait(500)
	      end
	    elseif VehicleIsModel(glvp1,284) or VehicleIsModel(glvp1,286) or VehicleIsModel(glvp1,288) or VehicleIsModel(glvp1,289) or VehicleIsModel(glvp1,290) or VehicleIsModel(glvp1,291) or VehicleIsModel(glvp1,292) or VehicleIsModel(glvp1,293) or VehicleIsModel(glvp1,294) or VehicleIsModel(glvp1,295) or VehicleIsModel(glvp1,296) or VehicleIsModel(glvp1,297) then
	      if IsButtonBeingReleased(9,0) and not PlayerIsInAnyVehicle() then
	        PedWarpIntoCar(gPlayer,v)
		  end
	    elseif VehicleIsModel(glvp1,285) or VehicleIsModel(glvp1,287) or VehicleIsModel(glvp1,298) then
	      if IsButtonBeingReleased(9,0) and not PlayerIsInAnyVehicle() then
	        PedWarpIntoCar(gPlayer,v)
		  elseif IsButtonBeingPressed(9,0) and PedIsInVehicle(gPlayer,v) then
		    local x,y,z = VehicleGetPosXYZ(v)
		    VehicleStop(v)
		    PedWarpOutOfCar(gPlayer,v)
		    Wait(50)
		    PedSetPosXYZ(gPlayer,x + 2,y + 2,z)
		    Wait(500)
		  end
	    end
	  end
	  if PedIsInVehicle(gPlayer,v) then
	    if IsButtonBeingPressed(8,0) then
	      if siren == 0 then
	        VehicleEnableSiren(v,true)
		    siren = 1
		  elseif siren == 1 then
		    VehicleEnableSiren(v,false)
		    siren = 0
		  end
		end
	  end
	end
  end
end

function MainATZC()
  if not PedIsModel(gPlayer,0) and PedHasWeapon(gPlayer,-1) and saveStyle ~= "Player" then
    local doAnim = 0
	local defkey = PedMePlaying(gPlayer,"DEFAULT_KEY")
	local ped = PedGetTargetPed()
    if not PedIsFemale(gPlayer) and not IsAdultMale() and not IsPrefect() and not IsOrderly() and not IsTeacherMale() then
	  if defkey then
		local x1,y1,z1 = PlayerGetPosXYZ()
		local x2,y2,z2 = PedGetPosXYZ(ped)
	    if IsButtonBeingPressed(9,0) and PedIsValid(ped) then
	      PedSetActionNode(gPlayer,"/Global/Actions/Grapples/Front/Grapples/GrappleAttempt","Act/Globals.act")
		elseif PedIsValid(ped) then
		  if PedGetHealth(ped) > 25 then
		    if math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) > 2 then
		      if IsButtonBeingPressed(8,0) then
		        PedSetActionNode(gPlayer,"/Global/1_02/TauntOnce","Act/Conv/1_02.act")
			    SoundPlayAmbientSpeechEvent(gPlayer,"TAUNT")
			  end
		    elseif math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) < 2 then
		      if IsButtonBeingPressed(8,0) then
		        ExecuteActionNode(gPlayer,"/Global/Player/Social_Actions/HarassMoves/Shove_Still/Shove","Act/Player.act")
			    SoundPlayAmbientSpeechEvent(gPlayer,"TAUNT")
			  end
			end
		  elseif PedGetHealth(ped) < 25 then
		    if math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) < 2 then
			  if IsButtonBeingPressed(8,0) then
			    PedSetGrappleTarget(gPlayer,ped)
			    PedSetActionNode(gPlayer,"/Global/Ambient/SocialAnims/SocialHumiliateAttack/AnimLoadTrigger","Act/Anim/Ambient.act")
			  end
			end
		  end
	    end
	  end
	elseif (IsStudentFemale() or IsAdultFemale()) and defkey and saveStyle == "GS_Female_A" or saveStyle == "CV_Female_A" then
	  local x1,y1,z1 = PlayerGetPosXYZ()
	  local x2,y2,z2 = PedGetPosXYZ(ped)
	  if IsButtonBeingPressed(9,0) and PedIsFemale(ped) and PedIsValid(ped) then
	    if math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) < 2 then
		  PedSetGrappleTarget(gPlayer,ped)
	      PedSetActionNode(gPlayer,"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/GirlFight/GirlFight_START","act/anim/GS_Female_A.act")
		end
	  elseif math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) > 2 and PedIsValid(ped) then
		if IsButtonBeingPressed(8,0) then
		  PedSetActionNode(gPlayer,"/Global/1_02/TauntOnce","Act/Conv/1_02.act")
		  SoundPlayAmbientSpeechEvent(gPlayer,"TAUNT")
		end
	  end
	elseif IsTeacherFemale() and defkey and saveStyle == "TE_Female_A" or saveStyle == "TE_Secretary" then
	  if IsButtonBeingPressed(9,0) and PedIsValid(ped) and PedHasWeapon(gPlayer,-1) then
	    if math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) < 2 then
		  PedSetGrappleTarget(gPlayer,ped)
	      PedSetActionNode(gPlayer,"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/EarGrab","Act/Globals.act")
		end
	  end
	elseif IsAdultMale() and defkey and saveStyle == "GS_Male_A" or saveStyle == "CV_Male_A" then
	  local x1,y1,z1 = PlayerGetPosXYZ()
	  local x2,y2,z2 = PedGetPosXYZ(ped)
	  if IsButtonBeingPressed(9,0) and PedIsValid(ped) and PedHasWeapon(gPlayer,-1) then
	    if math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) < 2 then
		  PedSetGrappleTarget(gPlayer,ped)
		end
	    PedSetActionNode(gPlayer,"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/Adult_Takedown","Act/Globals.act")
	  elseif math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) < 2 and PedIsValid(ped) then
	    if IsButtonBeingPressed(8,0) then
		  PedSetActionNode(gPlayer,"/Global/Player/Social_Actions/HarassMoves/Shove_Still/Shove","Act/Player.act")
		  SoundPlayAmbientSpeechEvent(gPlayer,"TAUNT")
		end
	  elseif math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) > 2 and PedIsValid(ped) then
	    if IsButtonBeingPressed(8,0) then
		  PedSetActionNode(gPlayer,"/Global/Ambient/Reactions/HumiliationReact/Laughing/Guy_Laugh/Laugh02","Act/Anim/Ambient.act")
		  SoundPlayAmbientSpeechEvent(gPlayer,"PLAYER_LAUGH_CRUEL")
		end
	  end
	elseif (IsPrefect() or IsOrderly() or IsTeacherMale()) and defkey and PlayerHasAuthorityAct()  then
	  local x1,y1,z1 = PlayerGetPosXYZ()
	  local x2,y2,z2 = PedGetPosXYZ(ped)
	  if IsButtonBeingPressed(9,0) and PedIsValid(ped) then
	    PedSetActionNode(gPlayer,"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/Tonfa_Impale/TonfaImpale","Act/Globals.act")
	  elseif math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) < 2 and PedIsValid(ped) then
	    if IsButtonBeingPressed(8,0) then
		  PedSetActionNode(gPlayer,"/Global/Player/Social_Actions/HarassMoves/Shove_Still/Shove","Act/Player.act")
		  SoundPlayAmbientSpeechEvent(gPlayer,"TAUNT")
		end
	  elseif math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) > 2 and PedIsValid(ped) then
	    if IsButtonBeingPressed(8,0) then
		  PedSetActionNode(gPlayer,"/Global/1_02/TauntOnce","Act/Conv/1_02.act")
		  SoundPlayAmbientSpeechEvent(gPlayer,"TAUNT")
		end
	  end
	end
	for i = 1,table.getn(strafe) do
	  if IsButtonBeingPressed(15,0) and defkey and not PedGetFlag(gPlayer,2,true) and strafe[i].button ~= 15 then
	    PedSetFlag(gPlayer,2,true)
	  elseif IsButtonBeingPressed(15,0) and PedGetFlag(gPlayer,2,true) then
	    PedSetFlag(gPlayer,2,false)
	  end
	end
  elseif not PedIsModel(gPlayer,0) and (saveStyle == "Player" or PedHasWeapon(gPlayer) ~= -1) then
    local doAnim = 0
	local defkey = PedMePlaying(gPlayer,"DEFAULT_KEY")
	local ped = PedGetTargetPed()
    if not PedIsFemale(gPlayer) and not IsAdultMale() and not IsPrefect() and not IsOrderly() and not IsTeacherMale() then
	  if defkey then
		local x1,y1,z1 = PlayerGetPosXYZ()
		local x2,y2,z2 = PedGetPosXYZ(ped)
		if PedIsValid(ped) then
		  if PedGetHealth(ped) > 25 then
		    if math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) > 2 then
		      if IsButtonBeingPressed(8,0) and not SoundSpeechPlaying(gPlayer,"TAUNT") then
			    SoundPlayAmbientSpeechEvent(gPlayer,"TAUNT")
		      elseif IsButtonBeingPressed(7,0) and not SoundSpeechPlaying(gPlayer,"GREET") then
			    SoundPlayAmbientSpeechEvent(gPlayer,"GREET")
			  end
		    elseif math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) < 2 then
		      if IsButtonBeingPressed(8,0) and not SoundSpeechPlaying(gPlayer,"TAUNT") then
			    SoundPlayAmbientSpeechEvent(gPlayer,"TAUNT")
		      elseif IsButtonBeingPressed(7,0) and not SoundSpeechPlaying(gPlayer,"GREET") then
			    SoundPlayAmbientSpeechEvent(gPlayer,"GREET")
			  end
			end
		  end
		end
	  end
	elseif (IsStudentFemale() or IsAdultFemale()) and defkey then
	  local x1,y1,z1 = PlayerGetPosXYZ()
	  local x2,y2,z2 = PedGetPosXYZ(ped)
	  if math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) > 2 and PedIsValid(ped) then
		if IsButtonBeingPressed(8,0) and not SoundSpeechPlaying(gPlayer,"TAUNT") then
		  SoundPlayAmbientSpeechEvent(gPlayer,"TAUNT")
		elseif IsButtonBeingPressed(7,0) and not SoundSpeechPlaying(gPlayer,"GREET") then
		  SoundPlayAmbientSpeechEvent(gPlayer,"GREET")
		end
	  end
	elseif IsAdultMale() and defkey then
	  local x1,y1,z1 = PlayerGetPosXYZ()
	  local x2,y2,z2 = PedGetPosXYZ(ped)
	  if math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) < 2 and PedIsValid(ped) then
	    if IsButtonBeingPressed(8,0) and not SoundSpeechPlaying(gPlayer,"TAUNT") then
		  SoundPlayAmbientSpeechEvent(gPlayer,"TAUNT")
		elseif IsButtonBeingPressed(7,0) and not SoundSpeechPlaying(gPlayer,"GREET") then
		  SoundPlayAmbientSpeechEvent(gPlayer,"GREET")
		end
	  elseif math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) > 2 and PedIsValid(ped) then
	    if IsButtonBeingPressed(8,0) and not SoundSpeechPlaying(gPlayer,"PLAYER_LAUGH_CRUEL") then
		  SoundPlayAmbientSpeechEvent(gPlayer,"PLAYER_LAUGH_CRUEL")
		elseif IsButtonBeingPressed(7,0) and not SoundSpeechPlaying(gPlayer,"GREET") then
		  SoundPlayAmbientSpeechEvent(gPlayer,"GREET")
		end
	  end
	elseif (IsPrefect() or IsOrderly() or IsTeacherMale()) and defkey then
	  local x1,y1,z1 = PlayerGetPosXYZ()
	  local x2,y2,z2 = PedGetPosXYZ(ped)
	  if math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) < 2 and PedIsValid(ped) then
	    if IsButtonBeingPressed(8,0) and not SoundSpeechPlaying(gPlayer,"TAUNT") then
		  SoundPlayAmbientSpeechEvent(gPlayer,"TAUNT")
		elseif IsButtonBeingPressed(7,0) and not SoundSpeechPlaying(gPlayer,"GREET") then
		  SoundPlayAmbientSpeechEvent(gPlayer,"GREET")
		end
	  elseif math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) > 2 and PedIsValid(ped) then
	    if IsButtonBeingPressed(8,0) and not SoundSpeechPlaying(gPlayer,"TAUNT")then
		  SoundPlayAmbientSpeechEvent(gPlayer,"TAUNT")
		elseif IsButtonBeingPressed(7,0) and not SoundSpeechPlaying(gPlayer,"GREET") then
		  SoundPlayAmbientSpeechEvent(gPlayer,"GREET")
		end
	  end
	end
  end
end

function fix_model_set()
  local fix_model_string = {
    "Nothing",
    "Only when clothing manager",
	"Only when alt tab",
	"Only when shopping",
	"When clothing manager and shopping",
	"Use all setting",
  }
  use_fix_model = fix_model_option
  return fix_model_string[fix_model_option]
end

function FreeMoves()
	local t
	local on = true
	local cp,ch = 0,PedGetHeading(gPlayer)
	local dist = 100
	local show = "Clear"
	local fc = false
	local ix,iy,iz = nil,nil,nil
	local pause = false
	local mode = "nil"
	local stat = "RUN"
	local ppx,ppy,ppz = 0,0,0
	local rotation = 0
	SoundPlay2D("RightBtn")
	Wait(200)
	ToggleHUDComponentVisibility(4,false)
	ToggleHUDComponentVisibility(11,false)
	ToggleHUDComponentVisibility(0,false)
	repeat
		Wait(0)
		if on then
			if not PlayerIsInAnyVehicle() then
				mode = "PLAYER"
				if not pause then
					PlayerSetControl(0)
					PedSetEffectedByGravity(gPlayer,false)
					if not PedIsPlaying(gPlayer,"/Global/1_06/HoboFly",true) then
						PedSetActionNode(gPlayer,"/Global/1_06/HoboFly","Act/Conv/1_06.act")
					end
					if PedIsValid(rat) then
						PedDelete(rat)
					end
					dist = dist + (GetStickValue(0,0)-GetStickValue(1,0))
					cp = cp + GetStickValue(19,0)/20
					ch = ch + GetStickValue(18,0)/20
					local ppx,ppy,ppz = PlayerGetPosXYZ()
					local speed = IsButtonPressed(7,0) and 7 or IsButtonPressed(6,0) and 0.05 or 1
					local x1,y1 = F_GetForwardDir2D(ch,GetStickValue(17,0)/10*speed)
					local x2,y2 = F_GetForwardDir2D(ch+math.pi/2,GetStickValue(16,0)/10*speed)
					local z = (GetStickValue(12,0)-GetStickValue(10,0))/10*speed
					ppx,ppy,ppz = ppx+x1+x2,ppy+y1+y2,ppz+z
					PlayerFaceHeading(ch)
					PlayerSetPosSimple(ppx,ppy,ppz)
					local cx,cy,cz = F_GetForwardDir3D(cp,ch,-dist*0.04)
					local setx,sety,setz = ix or ppx+cx,iy or ppy+cy,iz or ppz+cz+1.5
					local facex,facey,facez = ix and ix - cx or ppx,iy and iy - cy or ppy,iz and iz - cz or ppz+1.5
					CameraSetXYZ(setx,sety,setz,facex,facey,facez)
				else
					PedSetEffectedByGravity(gPlayer,true)
				end
			elseif PlayerIsInAnyVehicle() then
				mode = "VEHICLE"
				if not pause then
					if not PedIsValid(rat) then
						local x,y,z = PlayerGetPosXYZ()
						rat = PedCreateXYZ(136,x,y,z + 20)
						PedSetControllerID(rat,5)
						PedSetEffectedByGravity(rat,false)
						PedSetAlpha(rat,0)
						PedSetPosXYZ(rat,x,y,z + 5)
						rotation = 0
						cp,ch = 0,PedGetHeading(rat)
					end
					PedSetFlag(rat,20,true)
					PedSetFlag(rat,23,true)
					GameSetPedStat(rat,20,0)
					PlayerSetControl(0)
					PedSetAsleep(rat,true)
					PedSetEffectedByGravity(gPlayer,true)
					PedSetEffectedByGravity(rat,false)
					for i,p in {PedFindInAreaXYZ(0,0,0,999999)} do
						if PedIsValid(p) and p ~= gPlayer then
							if PedGetTargetPed(p) == gPlayer then
								local x,y,z = PlayerGetPosXYZ()
								local q,w,e = PedGetPosXYZ(p)
								local Abs = math.abs
								if Abs(x - q) + Abs(y - w) + Abs(z - e) < 25 then
									PedDontCleanup(p)
								else
									PedDelete(p)
								end
							end
						end
					end
					dist = dist + (GetStickValue(0,0)-GetStickValue(1,0))
					cp = cp + GetStickValue(19,0)/20
					ch = ch + GetStickValue(18,0)/20
					ppx,ppy,ppz = PedGetPosXYZ(rat)
					speed = IsButtonPressed(7,0) and 8 or IsButtonPressed(6,0) and 0.05 or 1
					x1,y1 = F_GetForwardDir2D(ch,GetStickValue(17,0)/10*speed)
					x2,y2 = F_GetForwardDir2D(ch+math.pi/2,GetStickValue(16,0)/10*speed)
					z = (GetStickValue(12,0)-GetStickValue(10,0))/10*speed
					ppx,ppy,ppz = ppx+x1+x2,ppy+y1+y2,ppz+z
		  
					if bb(2,0) then
						rotation = rotation - GetStickValue(2,0)*4.5
						if rotation < 0 then rotation = 360 end
						if rotation > 360 then rotation = 0 end
						VehicleFaceHeading(PedGetLastVehicle(gPlayer),rotation)
					end
		  
					PedSetPosXYZ(rat,ppx,ppy,ppz)
					PedSetPosXYZ(gPlayer,ppx,ppy,ppz - 4.5)
					local cx,cy,cz = F_GetForwardDir3D(cp,ch,-dist*0.04)
					local setx,sety,setz = ix or ppx+cx,iy or ppy+cy,iz or ppz+cz-3
					local facex,facey,facez = ix and ix - cx or ppx,iy and iy - cy or ppy,iz and iz - cz or ppz-3
					CameraSetXYZ(setx,sety,setz,facex,facey,facez)
				else
					if PedIsValid(rat) then
						PedDelete(rat)
					end
					PedSetEffectedByGravity(gPlayer,true)
				end
			end
			if br(3,0) then
				if pause then
					pause = false
					in_other_task = true
					stat = "RUN"
				else
					pause = true
					in_other_task = false
					stat = "PAUSE"
					CameraReturnToPlayer()
					PlayerSetControl(1)
					if mode == "PLAYER" then
						PlayerStopAllActionControllers()
					end
				end
				SoundPlay2D("RightBtn")
				Wait(100)
			end
			if bp(8,0) and not pause then
				if show == "textOne" then
					show = "textTwo"
				elseif show == "textTwo" then
					show = "textThree"
				elseif show == "textThree" then
					show = "Clear"
				else
					show = "textOne"
				end
			end
			if show == "textOne" then
				TextPrintString("MODE: "..mode.."\nSTATUS: "..stat,1,2)
			elseif show == "textTwo" then
				TextPrintString("| Pos: "..ppx.." , "..ppy.." , "..ppz.." |\n| Area: "..AreaGetVisible().." |",1,2)
			elseif show == "textThree" then
				if mode == "PLAYER" then
					TextPrintString("| Zoom: ~dleft~ or ~dright~ | Height: ~FIRE_WEAPON~ or \r |\n| Pause/Unpause: ~ddown~ | Text: ~JUMP~ |",1,2)
				else
					TextPrintString("| Zoom: ~dleft~ or ~dright~ | Height: ~FIRE_WEAPON~ or \r |\n| Pause/Unpause: ~ddown~ | Text: ~JUMP~ |\n| Rotate: ~dup~ |",1,2)
				end
			end
	    end
	until br(14,0) and pause
	CameraReturnToPlayer()
	PlayerSetControl(1)
	PlayerStopAllActionControllers()
	PedSetEffectedByGravity(gPlayer,true)
	SoundPlay2D("WrongBtn")
	ToggleHUDComponentVisibility(4,true)
	ToggleHUDComponentVisibility(11,true)
	ToggleHUDComponentVisibility(0,true)
	Wait(100)
end

function FreeCam()
	kick = false
	w = 1
	-- Setup variables:
	local t
	local on = false
	local cp,ch = 0,0
	local dist = 100
	local show = false
	local fc,fcx,fcy,fcz = false
	on = true
	
	free = true
	
	loop = true
	
	r = 1  
	
	SoundPlay2D("RightBtn")
	
	ToggleHUDComponentVisibility(4,false)
	ToggleHUDComponentVisibility(11,false)
	ToggleHUDComponentVisibility(0,false)
	
	in_other_task = true
	
	-- Main loop:
	repeat
		-- Wait (suspend script):
		Wait(0)
		-- Focus on camera:
		SoundSetAudioFocusCamera()
		if on then
			PlayerSetControl(0)
			dist = dist + (GetStickValue(0,0)-GetStickValue(1,0))
			cp = cp + GetStickValue(19,0)/20
			ch = ch + GetStickValue(18,0)/20
			local px,py,pz = PlayerGetPosXYZ()
			local speed = IsButtonPressed(7,0) and 7 or IsButtonPressed(6,0) and 0.05 or 1
			local x1,y1 = F_GetForwardDir2D(ch,GetStickValue(17,0)/10*speed)
			local x2,y2 = F_GetForwardDir2D(ch+math.pi/2,GetStickValue(16,0)/10*speed)
			local z = (GetStickValue(12,0)-GetStickValue(10,0))/10*speed
			if loop and r ~= 5 then
				-- Toggle free cam:
				fc = not fc
				if fc then
					-- Initialize free camera:
					local cx,cy,cz = F_GetForwardDir3D(cp,ch,-dist*0.04)
					fcx,fcy,fcz = px+cx,py+cy,pz+cz+1.5
					r = 5
				else
					-- Turn off free camera:
					fc,fcx,fcy,fcz = false,nil,nil,nil
				end
			elseif fc then
				-- Move free camera:
				fcx,fcy,fcz = fcx+x1+x2,fcy+y1+y2,fcz+z
			else
				-- Move player:
				px,py,pz = px+x1+x2,py+y1+y2,pz+z
				
				-- Set position:
				PlayerFaceHeading(ch)
				PlayerSetPosSimple(px,py,pz)
			end
			
			-- Set camera:
			local cx,cy,cz = F_GetForwardDir3D(cp,ch,-dist*0.04)
			local camx,camy,camz = fcx or px+cx,fcy or py+cy,fcz or pz+cz+1.5
			local lookx,looky,lookz = fcx and fcx - cx or px,fcy and fcy - cy or py,fcz and fcz - cz or pz+1.5
			CameraSetXYZ(camx,camy,camz,lookx,looky,lookz)
		end
	until IsButtonBeingPressed(14,0)
	PlayerSetControl(1)
	SoundSetAudioFocusPlayer()
	CameraReturnToPlayer()
	in_other_task = false
	PlayerStopAllActionControllers()
	ToggleHUDComponentVisibility(4,true)
	ToggleHUDComponentVisibility(11,true)
	ToggleHUDComponentVisibility(0,true)
	SoundPlay2D("WrongBtn")
	Wait(100)
end

function skip_cuts()
  if skip_cut then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function fc_cut()
  if use_fc_cut then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function play_cc()
  able_to_play = false
  if load_cutscene == "GENERAL" or cuts_audio == "GENERAL" or cuts_audio == "GENERAL" then
    TextPrintString("ERROR: CUTSCENE DOESN'T EXIST",2,1)
	Wait(1500)
	able_to_play = false
  else
    able_to_play = true
  end
  if able_to_play then
    S_CutsEdit()
    if load_cutscene ~= "RANDOM" then
      LoadCutscene(load_cutscene, false)
    else
      LoadCutscene(mof[math.random(3,table.getn(mof))], false)
    end
    if cuts_action ~= "RANDOM" then
      CutSceneSetActionNode(cuts_action)
    else
      CutSceneSetActionNode(mof[math.random(3,table.getn(mof))])
    end
    if cuts_audio ~= "RANDOM" then
      LoadCutsceneSound(cuts_audio)
    else
      LoadCutsceneSound(mof[math.random(3,table.getn(mof))])
    end
    repeat
      Wait(0)
    until IsCutsceneLoaded()
    custome_cuts = true
  end
end

function distance_between_us(ped1,ped2)
  local x,y,z = PedGetPosXYZ(ped1)
  local a,b,c = PedGetPosXYZ(ped2)
  return math.abs(x - a) + math.abs(y - b) + math.abs(z - c) < 2
end

function create_ped(n,i,s,x,y,z)
  n = PedCreateXYZ(i,x + 1,y,z)
  PedSetActionTree(n,"/Global/"..s,"Act/Anim/"..s..".act")
  PedSetAITree(n,"/Global/AI","Act/AI/AI.act")
  PedMakeAmbient(n)
end

function get_error(t_time)
  TextPrintString("ERROR: ACTION FAILED",t_time,1)
  Wait(t_time*1000)
end

function F_GetForwardDir2D(h,dist)
  return -math.sin(h)*dist,math.cos(h)*dist
end

function F_GetForwardDir3D(p,h,dist)
  return math.cos(p)*-math.sin(h)*dist,math.cos(p)*math.cos(h)*dist,math.sin(p)*dist
end

function ped_get_action_tree(ped,mode)
  S_SetupCore()
  for option = 1,table.getn(styles) do
    if mode == 0 then
	  if PedIsPlaying(ped,"/Global/"..styles[option],true) then
	    return styles[option]
	  end
	elseif mode == 1 then
	  PedStop(ped)
	  if PedIsPlaying(ped,"/Global/"..styles[option],true) then
	    return styles[option]
	  end
	end
  end
  return "Player"
end

function create_custom_ped(x,y,z)
  S_SetupCore()
  if pedSelect == 1 then
	custom_ped = PedCreateXYZ(2,x + 2,y + 2,z)
	PedSwapModel(custom_ped,"player")
  elseif pedSelect ~= 1 then
	custom_ped = PedCreateXYZ(pedSelect,x + 2,y + 2,z)
  end
  PedSetActionTree(custom_ped,"/Global/"..peds[pedSelect].style,"Act/Anim/"..peds[pedSelect].style..".act")
  PedSetAITree(custom_ped,"/Global/AI","Act/AI/AI.act")
  PedSetInfiniteSprint(custom_ped, true)
  PedDontCleanup(custom_ped)
  PedMakeAmbient(custom_ped)
  if fgSelect == 2 then
    local leader = gPlayer
    while PedHasAllyFollower(leader) do
      leader = PedGetAllyFollower(leader)
      Wait(0)
    end
	PedRecruitAlly(leader,custom_ped)
  elseif fgSelect == 3 then
	PedAttackPlayer(custom_ped,3)
  end
  createPed = createPed + 1
end

function ArtClassIsActive()
  return MissionActiveSpecific("C_ART_1") or MissionActiveSpecific("C_ART_2") or MissionActiveSpecific("C_ART_3") or MissionActiveSpecific("C_ART_4") or MissionActiveSpecific("C_ART_5")
end

function PlayerIsInClass()
  return MissionActiveSpecific("C_English_1") or MissionActiveSpecific("C_English_2") or MissionActiveSpecific("C_English_3") or MissionActiveSpecific("C_English_4") or MissionActiveSpecific("C_English_5") or MissionActiveSpecific("C_ART_1") or MissionActiveSpecific("C_ART_2") or MissionActiveSpecific("C_ART_3") or MissionActiveSpecific("C_ART_4") or MissionActiveSpecific("C_ART_5") or MissionActiveSpecific("C_Math_1") or MissionActiveSpecific("C_Math_2") or MissionActiveSpecific("C_Math_3") or MissionActiveSpecific("C_Math_4") or MissionActiveSpecific("C_Math_5") or MissionActiveSpecific("C_Biology_1") or MissionActiveSpecific("C_Biology_2") or MissionActiveSpecific("C_Biology_3") or MissionActiveSpecific("C_Biology_4") or MissionActiveSpecific("C_Biology_5") or MissionActiveSpecific("C_Geography_1") or MissionActiveSpecific("C_Geography_2") or MissionActiveSpecific("C_Geography_3") or MissionActiveSpecific("C_Geography_4") or MissionActiveSpecific("C_Geography_5")
end

function IsTeacherFemale()
  return PedIsModel(gPlayer,54) or PedIsModel(gPlayer,58) or PedIsModel(gPlayer,59) or PedIsModel(gPlayer,60) or PedIsModel(gPlayer,62) or PedIsModel(gPlayer,63) or PedIsModel(gPlayer,58) or PedIsModel(gPlayer,221)
end

function IsAdultFemale()
  return PedIsModel(gPlayer,78) or PedIsModel(gPlayer,79) or PedIsModel(gPlayer,80) or PedIsModel(gPlayer,81) or PedIsModel(gPlayer,120) or PedIsModel(gPlayer,143) or PedIsModel(gPlayer,191) or PedIsModel(gPlayer,192) or PedIsModel(gPlayer,193)
end

function IsStudentFemale()
  return PedIsModel(gPlayer,2) or PedIsModel(gPlayer,3) or PedIsModel(gPlayer,14) or PedIsModel(gPlayer,25) or PedIsModel(gPlayer,38) or PedIsModel(gPlayer,39) or PedIsModel(gPlayer,48) or PedIsModel(gPlayer,67) or PedIsModel(gPlayer,90) or PedIsModel(gPlayer,93) or PedIsModel(gPlayer,94) or PedIsModel(gPlayer,95) or PedIsModel(gPlayer,96) or PedIsModel(gPlayer,166) or PedIsModel(gPlayer,167) or PedIsModel(gPlayer,175) or PedIsModel(gPlayer,180) or PedIsModel(gPlayer,181) or PedIsModel(gPlayer,182) or PedIsModel(gPlayer,230)
end

function IsAdultMale()
  return PedIsModel(gPlayer,56) or PedIsModel(gPlayer,76) or PedIsModel(gPlayer,77) or PedIsModel(gPlayer,84) or PedIsModel(gPlayer,86) or PedIsModel(gPlayer,89) or PedIsModel(gPlayer,100) or PedIsModel(gPlayer,101) or PedIsModel(gPlayer,103) or PedIsModel(gPlayer,104) or PedIsModel(gPlayer,105) or PedIsModel(gPlayer,108) or PedIsModel(gPlayer,113) or PedIsModel(gPlayer,114) or PedIsModel(gPlayer,115) or PedIsModel(gPlayer,116) or PedIsModel(gPlayer,123) or PedIsModel(gPlayer,124) or PedIsModel(gPlayer,127) or PedIsModel(gPlayer,128) or PedIsModel(gPlayer,144) or PedIsModel(gPlayer,148) or PedIsModel(gPlayer,149) or PedIsModel(gPlayer,152) or PedIsModel(gPlayer,156) or PedIsModel(gPlayer,187) or PedIsModel(gPlayer,190) or PedIsModel(gPlayer,194) or PedIsModel(gPlayer,195) or PedIsModel(gPlayer,222) or PedIsModel(gPlayer,223) or PedIsModel(gPlayer,237) or PedIsModel(gPlayer,236) or PedIsModel(gPlayer,252) or PedIsModel(gPlayer,253) or PedIsModel(gPlayer,254)
end

function IsPrefect()
  return PedIsModel(gPlayer,49) or PedIsModel(gPlayer,50) or PedIsModel(gPlayer,51) or PedIsModel(gPlayer,52)
end

function IsOrderly()
  return PedIsModel(gPlayer,53) or PedIsModel(gPlayer,158)
end

function IsTeacherMale()
  return PedIsModel(gPlayer,55) or PedIsModel(gPlayer,56) or PedIsModel(gPlayer,57) or PedIsModel(gPlayer,61) or PedIsModel(gPlayer,64) or PedIsModel(gPlayer,65) or PedIsModel(gPlayer,229) or PedIsModel(gPlayer,248) or PedIsModel(gPlayer,249)
end

function PlayerHasAuthorityAct()
  return saveStyle == "Authority" or saveStyle == "LE_Orderly_A"
end

function ped_set_custom_tree(ped,style)
  if style == "3_05_Norton" then
    if not PedHasWeapon(ped,324) then
	  PedSetWeapon(ped,324,1)
	end
	while not PedHasWeapon(ped,324) do
	  Wait(0)
	end
    PedSetActionTree(ped,"/Global/Norton","Act/Anim/"..style..".act")
  else
    PedSetActionTree(ped,"/Global/"..style,"Act/Anim/"..style..".act")
  end
end

function WaitUntil(b,c)
  while not IsButtonBeingReleased(b,c) do
    Wait(0)
  end
end

function AreaSetAllDoorsUnlocked()
  AreaSetDoorLocked(TRIGGER._DT_ischool_AuditorDoorL, false)
  AreaSetDoorLocked(TRIGGER._DT_ischool_AuditorDoorL, false)
  AreaSetDoorLocked(TRIGGER._DT_iSafeDrop_DoorL, false)
  AreaSetDoorLocked(TRIGGER._5_03_Control_Room_Door, false)
  AreaSetDoorLocked(TRIGGER._DT_TINDUST_CHEMEX_DOOR, false)
  AreaSetDoorLocked(TRIGGER._DT_Observatory, false)
  AreaSetDoorLocked(TRIGGER._DT_ASYLUM_FRONT_DOOR, false)
  AreaSetDoorLocked(TRIGGER._DT_classr_doorL, false)
  AreaSetDoorLocked(TRIGGER._DT_classr_doorL, false)
  AreaSetDoorLocked(TRIGGER._DT_classr2_doorL, false)
  AreaSetDoorLocked(TRIGGER._DT_ChemPlant_DoorL, false)
  AreaSetDoorLocked(TRIGGER._3_S11_Path1_Door1, false)
  AreaSetDoorLocked(TRIGGER._3_S11_Path1_Door3, false)
  AreaSetDoorLocked(TRIGGER._3_S11_Path2_Door1, false)
  AreaSetDoorLocked(TRIGGER._3_S11_Path2_Door2, false)
  AreaSetDoorLocked(TRIGGER._5_03_Rec_Room, false)
  AreaSetDoorLocked(TRIGGER._5_03_Patient_Room1, false)
  AreaSetDoorLocked(TRIGGER._5_03_Patient_Room2, false)
  AreaSetDoorLocked(TRIGGER._5_03_Patient_Room3, false)
  AreaSetDoorLocked(TRIGGER._DT_ASYLUM_BACK_EXIT, false)
  AreaSetDoorLocked(TRIGGER._DT_ASYLUM_FRONT_DOOR, false)
  AreaSetDoorLocked(TRIGGER._DT_ASYLUM_SIDE_EXIT, false)
  AreaSetDoorLocked(TRIGGER._DT_ischool_RoofDoor, false)
  AreaSetDoorLocked(TRIGGER._DT_ischool_RoofDoor, false)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Staff, false)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Staff, false)
  AreaSetDoorLocked(TRIGGER._DT_ISCHOOL_BIO, false)
  AreaSetDoorLocked(TRIGGER._DT_ISCHOOL_BIO, false)
  AreaSetDoorLocked(TRIGGER._DT_iSafeDrop_DoorL, false)
  AreaSetDoorLocked(TRIGGER._DT_tind_SafeDrop, false)
  AreaSetDoorLocked(TRIGGER._DT_tschool_SafeJock, false)
  AreaSetDoorLocked(TRIGGER._DT_iSafeGrsr_DoorL, false)
  AreaSetDoorLocked(TRIGGER._DT_tpoor_SafeGreaser, false)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Art, false)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Art, false)
  AreaSetDoorLocked(TRIGGER._DT_ischool_AuditorBalc, false)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Classroom, false)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Classroom, false)
  AreaSetDoorLocked(TRIGGER._DT_tschool_SchoolSideDoorL, false)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Door01, false)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Door01, false)
  AreaSetDoorLocked(TRIGGER._DT_Janitor_SchoolExit, false)
  AreaSetDoorLocked(TRIGGER._DT_Janitor_MainExit, false)
  AreaSetDoorLocked(TRIGGER._DT_ASYLUM_FRONT_DOOR, false)
  AreaSetDoorLocked(TRIGGER._DT_ASYLUM_SIDE_EXIT, false)
  AreaSetDoorLocked(TRIGGER._DT_classr_doorL, false)
  AreaSetDoorLocked(TRIGGER._DT_classr_doorL, false)
  AreaSetDoorLocked(TRIGGER._DT_ChemPlant_DoorL, false)
  AreaSetDoorLocked(TRIGGER._DT_ChemPlant_DoorL, false)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Classroom, false)
  AreaSetDoorLocked(TRIGGER._DT_ISCHOOL_CHEM, false)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Janitor, false)
  AreaSetDoorLocked(TRIGGER._DT_ischool_PrincipalDoorL, false)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Classroom, false)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Art, false)
  AreaSetDoorLocked(TRIGGER._DT_Tenement_Window, false)
  AreaSetDoorLocked(TRIGGER._DT_Tenement_Window, false)
  AreaSetDoorLocked(TRIGGER._DT_ASYLUM_BACK_EXIT, false)
  AreaSetDoorLocked(TRIGGER._DT_ASYLUM_BACK_EXIT, false)
  AreaSetDoorLocked(TRIGGER._DT_iSafeNerd_DoorL, false)
  AreaSetDoorLocked(TRIGGER._DT_iSafeNerd_DoorL, false)
  AreaSetDoorLocked(TRIGGER._5_03_Control_Orderly_Path, false)
  AreaSetDoorLocked(TRIGGER._3_S11_Asylum_Gate_Warning, false)
  AreaSetDoorLocked(TRIGGER._3_S11_Asylum_Gate_Warning2, false)
  AreaSetDoorLocked(TRIGGER._ASYLUM_FRONT_GATE_DOOR, false)
  AreaSetDoorLocked(TRIGGER._ASYLUM_FRONT_DOOR_R, false)
  AreaSetDoorLocked(TRIGGER._DT_tschool_SchoolSideDoorL, false)
  AreaSetDoorLocked(TRIGGER._DT_tschool_SchoolSideDoorL, false)
  AreaSetDoorLocked(TRIGGER._5_B_DEBUG_STAGE4, false)
  AreaSetDoorLocked(TRIGGER._5_B_EDGARMOVETO, false)
  AreaSetDoorLocked(TRIGGER._ChemPlantLower, false)
  AreaSetDoorLocked(TRIGGER._ChemPlantStairTunnel, false)
  AreaSetDoorLocked(TRIGGER._DT_TSCHOOL_ROOFDOOR, false)
  AreaSetDoorLocked(TRIGGER._DT_ISCHOOL_ROOFDOOR, false)
  AreaSetDoorLocked(TRIGGER._ISCHOOL_DOOR25, false)
  AreaSetDoorLocked(TRIGGER._DT_gym_doorL,false)
end

function RESET_ALL_SETTINGS()
Version = "- 1.0 BETA -"
size = table.getn
useTarget = true
useTargetSetting = 1
timeFreeze = 0
noPunishment = 0
inAmmo = 0
valueHealth = 100
propCreate = 0
damageWeapon = 0
inHealth = 0
inMoney = 0
volAudio = 1
valueSpeed = 100
unhideMenu = 0
alonePlayer = 0
playerPoint = 0
playerAlly = 1
gravityPlayer = 0
classTime = 0
classGrade = 1
invPlayer = 0
initTime = 0
mapCo = 0
useOutfit = 0
createPed = 0
createPlayer = 0
cght = 0
controlID = 0
posa,posx,posy,posz = 999,999,999,999
siren = 0
siren2 = 0
siren3 = 0
inTickets = 0
saveModel = "player"
saveStyle = "Player"
autoShot = 0
rapidGun = 0
rapidPunch = 0
RepeatMain = 0
clothSelector = 0
eagleEye = 0
farVision = 0
nearPlayer = 0
blind = 0
burn1,burn2 = 0,0
playerGameSpeedEffect = 0
addSelect = 1
vgSelect = 1
hjSelect = 1
opSelect = 1
ghSelect = 1
vdSelect = 1
bnSelect = 1
asSelect = 1
uiSelect = 1
vwSelect = 1
rtSelect = 1
ewSelect = 1
gySelect = 1
zSelect = 1
zaSelect = 1
cgSelect = 1
xSelect = 1
kSelect = 1
cSelect = 1
modelSelect = 1
pedSelect = 1
fgSelect = 2
xfSelect = 1
xsSelect = 1
styleSelect = 1
frtSelect = 1
cbSelect = 1
cvSelect = 1
cvbSelect = 1
cwSelect = 1
modeSelect = 1
cwrSelect = 1 -- Outfit Selector select
cvtSelect = 1 -- Vehicle Selector select
frSelect = 1 -- Hair Selector select
speechSelect = 1 -- Speech Select
gameSpeed = 100 -- Game Speed
pedGrab = 1 -- Ped Grab select
vGrab = 1 -- Vehicle Grab (unused)
fors = 1 -- Special Select
vsrt = 1 -- Vehicle Thief
pedGetGrabed = {} -- unused
cl = 1 -- Class Editor select
myTimerSet = true -- Toggle custom timer
mcts = 100 -- Math Class Timer
bcts = 100 -- Biology Class Timer
ects = 100 -- English Class Timer
gcts = 100 -- Geography Class Timer
acpss = 0.5 -- Art Class Player Speed
acmes = 1 -- Art Class Enemies Speed
ecacs = false -- unused
bcacs = false -- unused
gcacs = false -- unused
mcacs = false -- unused
artClass = 1 -- Art Class Toggle
otherClass = 1 -- Another Class toggle
aets = 20 -- Art Enemies Timer
aeds = 25 -- Art Enemies Debris Count
acrs = 5 -- Art Class Radius
pun = 1 -- Punishment Selector select
mapp = 300 -- Max Punishment Points
mipp = 0 -- Minimum Punishment Points
maxPoints = 0 -- Max Points
minPoints = 0 -- Min Points
cut = 1 -- Cutscene Selector select
it = 1 -- Item Selector select
allowArtSetting = 0 -- unused
pe = 1 -- Ped Editor
stses = 1 -- "strafe selection" select
kissAllGirls = false -- Toggle Kiss All Girls
kissAllBoys = false -- Toggle Kiss All Boys
pedRun = false -- Tonggle Ped Run
pedDFB = false -- Toggle Ped Dont Fight Back
pedAEO = false -- Toggle Ped Attack Each Other
fs = 1 -- Fighting System select
shutUp = false -- Tonggle Ped Voice
st = 1 -- Strafe Selector select
sq = 1 --  unused
button1 = 0 -- unused
fpsCam = 0 -- unused
tps = 0 -- unused
freeCam = false -- Toggle Free camera
sprintPressed = 0 -- Sprint detection
lastSprint = GetTimer()
lastRun = GetTimer()
sprintPressed1 = 0 -- Sprint detection
lastSprint1 = GetTimer()
lastRun1 = GetTimer()
fas = 1 -- faction selector select
ss = 1 -- Strafe Selector?
ms = 1 -- Movement Style select 
playerControl = false -- Toggle Always Control Player
strafe = {} -- Animation storage
strafeAnim = {} -- Animation storafe (for anim detection)
slb = 1 -- Strafe select
pcs = 1 -- Pickup Selector select
table.insert(strafe,{anim = "nil",act = "nil",button = nil}) -- Don't let strafe empty
table.insert(strafeAnim,{anim = "nil",act = "nil",playing = "nil",mode = "nil",button = "nil"}) -- Don't let strafe empty
grabAnim,grabAct = "nil","nil" -- Grab animation
mountAnim,mountAct = "nil","nil" -- Mount animation
bugSelect = 1 -- Bug detection select
GameSpeed = false -- Toggle Game Speed
myRespect = true -- NOTE: DON'T CHANGE THIS VARIABLE
fightingSystem = true -- NOTE: DON'T EDIT THIS
savedStrafe = true -- NOTE: DON'T CHANGE THIS VARIABLE
FixBugs = true -- NOTE: DON'T CHANGE THIS VARIABLE
ActiveScripts = true -- NOTE: DON'T CHANGE THIS VARIABLE
ActiveScripts2 = true -- NOTE: DON'T CHANGE THIS VARIABLE
getMovements = true -- NOTE: DON'T CHANGE THIS VARIABLE
moving = false -- Movement moving detection
moving2 = false
moving3 = false
strafingStyle = false
strafing = false -- Movement strafing detection
showText = false -- Navigate control text
MainMenuType = "NEW_MENU" -- Main Menu style (SCROLL_5,SCROLL_3,STANDARD,BASIC_BIG_SIZE,BASIC_SMALL_SIZE)
movement = "DEFAULT"
movement2 = "DEFAULT"
movement3 = "DEFAULT"
msc = 1
menu = 1
hidingMenu = "AUTO" -- MANUAL or AUTO
AutoShowingTextAfterExitingSubMenu = false
hideMenu = 1
ssms = 1
ibbp = IsButtonBeingPressed
ibbr = IsButtonBeingReleased
replaceFightingStyle = true
replaceStyle = {}
sels = 1
createdPed = {}
ReplaceFactionModel = true
DetectFaction = {}
FactionModel = {}
ReplacedModel = true
modelInsert = {}
--TextTimer = 3
NerdID = {3,4,5,6,7,8,9,10,11}
BulliesID = {75,85,99,102,145,146,147}
JocksID = {12,13,14,15,16,17,18,19,20}
PrepiesID = {30,31,32,33,34,35,36,37,38,40}
GreasersID = {21,22,23,24,25,26,27,28,29}
DropoutID = {41,42,43,44,45,46,47,48,91,2}
table.insert(DetectFaction,{faction = nil})
table.insert(FactionModel,{"nil","nil","nil","nil","nil","nil","nil","nil","nil","nil"})
table.insert(replaceStyle,{faction = nil,style = "nil"})
vrst = 1
sivs = 1
br = IsButtonBeingReleased
bp = IsButtonBeingPressed
bb = IsButtonPressed
betak = {}
table.insert(betak,{v = "nil"})
nearPlayerEffect = {}
nearPlayerPed = {}
NearPlayer = false
StrafeButton = {}
effect = {}
clear = false
waitSSpud = GetTimer()
waitSpud = GetTimer()
waitB = GetTimer()
waitPunch = GetTimer()
untilStrafe = false
waitArea = GetTimer()
timerArea = 0
restoreArea = false
nextCombo = true
cWait = GetTimer()
speedMult = 1
gPlayerAllies = {
  "fPlayer2",
  "fPlayer3",
  "fPlayer4",
  "fPlayer5",
  "fPlayer6",
  "fPlayer7",
  "fPlayer8",
  "fPlayer9",
  "fPlayer10",
  "fPlayer11",
}
t = 2
cp,ch = 0,PedGetHeading(gPlayer)
speedMult = 1
cpF,chF = 0,PedGetHeading(gPlayer)
distF = 0
fcF = false
ixF,iyF,izF = nil,nil,nil
cpT,chT = 0,PedGetHeading(gPlayer)
distT = 140
fcT = false
ixT,iyT,izT = nil,nil,nil
fix_model_option = 6
use_fix_model = 5
use_fc_cut = false
skip_cut = false
cut_stop = false
custome_cuts = false
edit_xml = false
spa,spx,spy,spz = 0,0,0,0
cen = 1
ces = 1
cec = 1
ceo = 1
load_cutscene = "GENERAL"
cuts_action = "GENERAL"
cuts_audio = "GENERAL"
cuts_edit = true
wait_sling = GetTimer()
ped_cr = {}
treat_ped = true
ped_mix = {}
use_ped_mix = true
cls = 1
until_move = false
pg = 1
pt = 1
ped_strafes = {}
in_other_task = false
sc = 1
cwt = 1
end

function AreaSetAllDoorsLocked()
  AreaSetDoorLocked(TRIGGER._DT_ischool_AuditorDoorL, true)
  AreaSetDoorLocked(TRIGGER._DT_ischool_AuditorDoorL, true)
  AreaSetDoorLocked(TRIGGER._DT_iSafeDrop_DoorL, true)
  AreaSetDoorLocked(TRIGGER._5_03_Control_Room_Door, true)
  AreaSetDoorLocked(TRIGGER._DT_TINDUST_CHEMEX_DOOR, true)
  AreaSetDoorLocked(TRIGGER._DT_Observatory, true)
  AreaSetDoorLocked(TRIGGER._DT_ASYLUM_FRONT_DOOR, true)
  AreaSetDoorLocked(TRIGGER._DT_classr_doorL, true)
  AreaSetDoorLocked(TRIGGER._DT_classr_doorL, true)
  AreaSetDoorLocked(TRIGGER._DT_classr2_doorL, true)
  AreaSetDoorLocked(TRIGGER._DT_ChemPlant_DoorL, true)
  AreaSetDoorLocked(TRIGGER._3_S11_Path1_Door1, true)
  AreaSetDoorLocked(TRIGGER._3_S11_Path1_Door3, true)
  AreaSetDoorLocked(TRIGGER._3_S11_Path2_Door1, true)
  AreaSetDoorLocked(TRIGGER._3_S11_Path2_Door2, true)
  AreaSetDoorLocked(TRIGGER._5_03_Rec_Room, true)
  AreaSetDoorLocked(TRIGGER._5_03_Patient_Room1, true)
  AreaSetDoorLocked(TRIGGER._5_03_Patient_Room2, true)
  AreaSetDoorLocked(TRIGGER._5_03_Patient_Room3, true)
  AreaSetDoorLocked(TRIGGER._DT_ASYLUM_BACK_EXIT, true)
  AreaSetDoorLocked(TRIGGER._DT_ASYLUM_FRONT_DOOR, true)
  AreaSetDoorLocked(TRIGGER._DT_ASYLUM_SIDE_EXIT, true)
  AreaSetDoorLocked(TRIGGER._DT_ischool_RoofDoor, true)
  AreaSetDoorLocked(TRIGGER._DT_ischool_RoofDoor, true)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Staff, true)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Staff, true)
  AreaSetDoorLocked(TRIGGER._DT_ISCHOOL_BIO,true)
  AreaSetDoorLocked(TRIGGER._DT_ISCHOOL_BIO,true)
  AreaSetDoorLocked(TRIGGER._DT_iSafeDrop_DoorL, true)
  AreaSetDoorLocked(TRIGGER._DT_tind_SafeDrop, true)
  AreaSetDoorLocked(TRIGGER._DT_tschool_SafeJock, true)
  AreaSetDoorLocked(TRIGGER._DT_iSafeGrsr_DoorL, true)
  AreaSetDoorLocked(TRIGGER._DT_tpoor_SafeGreaser, true)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Art, true)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Art, true)
  AreaSetDoorLocked(TRIGGER._DT_ischool_AuditorBalc, true)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Classroom, true)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Classroom, true)
  AreaSetDoorLocked(TRIGGER._DT_tschool_SchoolSideDoorL, true)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Door01, true)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Door01, true)
  AreaSetDoorLocked(TRIGGER._DT_Janitor_SchoolExit, true)
  AreaSetDoorLocked(TRIGGER._DT_Janitor_MainExit, true)
  AreaSetDoorLocked(TRIGGER._DT_ASYLUM_FRONT_DOOR, true)
  AreaSetDoorLocked(TRIGGER._DT_ASYLUM_SIDE_EXIT, true)
  AreaSetDoorLocked(TRIGGER._DT_classr_doorL, true)
  AreaSetDoorLocked(TRIGGER._DT_classr_doorL, true)
  AreaSetDoorLocked(TRIGGER._DT_ChemPlant_DoorL, true)
  AreaSetDoorLocked(TRIGGER._DT_ChemPlant_DoorL, true)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Classroom, true)
  AreaSetDoorLocked(TRIGGER._DT_ISCHOOL_CHEM, true)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Janitor, true)
  AreaSetDoorLocked(TRIGGER._DT_ischool_PrincipalDoorL, true)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Classroom, true)
  AreaSetDoorLocked(TRIGGER._DT_ischool_Art, true)
  AreaSetDoorLocked(TRIGGER._DT_Tenement_Window, true)
  AreaSetDoorLocked(TRIGGER._DT_Tenement_Window, true)
  AreaSetDoorLocked(TRIGGER._DT_ASYLUM_BACK_EXIT, true)
  AreaSetDoorLocked(TRIGGER._DT_ASYLUM_BACK_EXIT, true)
  AreaSetDoorLocked(TRIGGER._DT_iSafeNerd_DoorL, true)
  AreaSetDoorLocked(TRIGGER._DT_iSafeNerd_DoorL, true)
  AreaSetDoorLocked(TRIGGER._5_03_Control_Orderly_Path, true)
  AreaSetDoorLocked(TRIGGER._3_S11_Asylum_Gate_Warning, true)
  AreaSetDoorLocked(TRIGGER._3_S11_Asylum_Gate_Warning2, true)
  AreaSetDoorLocked(TRIGGER._ASYLUM_FRONT_GATE_DOOR, true)
  AreaSetDoorLocked(TRIGGER._ASYLUM_FRONT_DOOR_R, true)
  AreaSetDoorLocked(TRIGGER._DT_tschool_SchoolSideDoorL, true)
  AreaSetDoorLocked(TRIGGER._DT_tschool_SchoolSideDoorL, true)
  AreaSetDoorLocked(TRIGGER._5_B_DEBUG_STAGE4, true)
  AreaSetDoorLocked(TRIGGER._5_B_EDGARMOVETO, true)
  AreaSetDoorLocked(TRIGGER._ChemPlantLower, true)
  AreaSetDoorLocked(TRIGGER._ChemPlantStairTunnel, true)
  AreaSetDoorLocked(TRIGGER._DT_TSCHOOL_ROOFDOOR, true)
  AreaSetDoorLocked(TRIGGER._DT_ISCHOOL_ROOFDOOR, true)
  AreaSetDoorLocked(TRIGGER._ISCHOOL_DOOR25, true)
  AreaSetDoorLocked(TRIGGER._DT_gym_doorL,true)
end

function L_LoadAllAnim()
  LoadAnimationGroup("Authority")
  LoadAnimationGroup("Boxing")
  LoadAnimationGroup("B_Striker")
  LoadAnimationGroup("CV_Female")
  LoadAnimationGroup("CV_Male")
  LoadAnimationGroup("DO_Edgar")
  LoadAnimationGroup("DO_Grap")
  LoadAnimationGroup("DO_StrikeCombo")
  LoadAnimationGroup("DO_Striker")
  LoadAnimationGroup("F_Adult")
  LoadAnimationGroup("F_BULLY")
  LoadAnimationGroup("F_Crazy")
  LoadAnimationGroup("F_Douts")
  LoadAnimationGroup("F_Girls")
  LoadAnimationGroup("F_Greas")
  LoadAnimationGroup("F_Jocks")
  LoadAnimationGroup("F_Nerds")
  LoadAnimationGroup("F_OldPeds")
  LoadAnimationGroup("F_Pref")
  LoadAnimationGroup("F_Preps")
  LoadAnimationGroup("G_Grappler")
  LoadAnimationGroup("G_Johnny")
  LoadAnimationGroup("G_Striker")
  LoadAnimationGroup("Grap")
  LoadAnimationGroup("J_Damon")
  LoadAnimationGroup("J_Grappler")
  LoadAnimationGroup("J_Melee")
  LoadAnimationGroup("J_Ranged")
  LoadAnimationGroup("J_Striker")
  LoadAnimationGroup("LE_Orderly")
  LoadAnimationGroup("Nemesis")
  LoadAnimationGroup("N_Ranged")
  LoadAnimationGroup("N_Striker")
  LoadAnimationGroup("N_Striker_A")
  LoadAnimationGroup("N_Striker_B")
  LoadAnimationGroup("P_Grappler")
  LoadAnimationGroup("P_Striker")
  LoadAnimationGroup("PunchBag")
  LoadAnimationGroup("Qped")
  LoadAnimationGroup("Rat_Ped")
  LoadAnimationGroup("Russell")
  LoadAnimationGroup("Russell_Pbomb")
  LoadAnimationGroup("Straf_Dout")
  LoadAnimationGroup("Straf_Fat")
  LoadAnimationGroup("Straf_Female")
  LoadAnimationGroup("Straf_Male")
  LoadAnimationGroup("Straf_Nerd")
  LoadAnimationGroup("Straf_Prep")
  LoadAnimationGroup("Straf_Savage")
  LoadAnimationGroup("Straf_Wrest")
  LoadAnimationGroup("TE_Female")
  LoadAnimationGroup("1_02BYourSchool")
  LoadAnimationGroup("1_02_MeetWithGary")
  LoadAnimationGroup("1_03The Setup")
  LoadAnimationGroup("1_04TheSlingshot")
  LoadAnimationGroup("1_06ALittleHelp")
  LoadAnimationGroup("1_07_SaveBucky")
  LoadAnimationGroup("1_07_Sk8Board")
  LoadAnimationGroup("1_08ThatBitch")
  LoadAnimationGroup("1_08_MandPuke")
  LoadAnimationGroup("1_09_Candidate")
  LoadAnimationGroup("1_10Betrayal")
  LoadAnimationGroup("1_11B_HeBigPrank")
  LoadAnimationGroup("1_G1_TheDiary")
  LoadAnimationGroup("1_S01HatVsGall")
  LoadAnimationGroup("2_01LastMinuteShop")
  LoadAnimationGroup("2_02ComicKlepto")
  LoadAnimationGroup("2_05TadsHouse")
  LoadAnimationGroup("2_06MovieTickets")
  LoadAnimationGroup("2_07BeachRumble")
  LoadAnimationGroup("2_08WeedKiller")
  LoadAnimationGroup("2_4RichAreaRace")
  LoadAnimationGroup("2_G2CarnivalDate")
  LoadAnimationGroup("2_G2_GiftExchange")
  LoadAnimationGroup("2_R03PaperRoute")
  LoadAnimationGroup("2_S02CharSheets")
  LoadAnimationGroup("2_S04CharSheets")
  LoadAnimationGroup("2_S05_CooksCrush")
  LoadAnimationGroup("2_S06PantyRaid")
  LoadAnimationGroup("3_01JealousJohnny")
  LoadAnimationGroup("3_04WrongPtTown")
  LoadAnimationGroup("3_05TheTenements")
  LoadAnimationGroup("3_BFightJohnnyV")
  LoadAnimationGroup("3_G3")
  LoadAnimationGroup("3_R05ChemicalDeliv")
  LoadAnimationGroup("3_R08RaceLeague")
  LoadAnimationGroup("3_S03CheatinTime")
  LoadAnimationGroup("4_01Paparazzi")
  LoadAnimationGroup("4_04_FunhouseFun")
  LoadAnimationGroup("4_06BigGame")
  LoadAnimationGroup("4_B2_JockBossBattle")
  LoadAnimationGroup("5_01Grp")
  LoadAnimationGroup("5_01Rats")
  LoadAnimationGroup("5_02PrVandalized")
  LoadAnimationGroup("5_05Zoe")
  LoadAnimationGroup("5_09MakingAMark")
  LoadAnimationGroup("6B_PARA")
  LoadAnimationGroup("AGymLght")
  LoadAnimationGroup("Ambient")
  LoadAnimationGroup("Ambient2")
  LoadAnimationGroup("Ambient3")
  LoadAnimationGroup("ANIBBALL")
  LoadAnimationGroup("AniBroom")
  LoadAnimationGroup("AniDice")
  LoadAnimationGroup("AniFooty")
  LoadAnimationGroup("AniGlobe")
  LoadAnimationGroup("AnimSave")
  LoadAnimationGroup("AniPillo")
  LoadAnimationGroup("ARC3D")
  LoadAnimationGroup("Area_Asylum")
  LoadAnimationGroup("Area_Funhouse")
  LoadAnimationGroup("Area_GirlsDorm")
  LoadAnimationGroup("Area_Infirmary")
  LoadAnimationGroup("Area_School")
  LoadAnimationGroup("Area_Tenements")
  LoadAnimationGroup("Armor")
  LoadAnimationGroup("AsyBars")
  LoadAnimationGroup("AsyDoorB")
  LoadAnimationGroup("AsyDoors")
  LoadAnimationGroup("AsyGate")
  LoadAnimationGroup("AsyLever")
  LoadAnimationGroup("AsySwtch")
  LoadAnimationGroup("AtcPlank")
  LoadAnimationGroup("Authority")
  LoadAnimationGroup("BANANA")
  LoadAnimationGroup("barelLad")
  LoadAnimationGroup("BarrGate")
  LoadAnimationGroup("BATON")
  LoadAnimationGroup("BBALL_21")
  LoadAnimationGroup("bbgun")
  LoadAnimationGroup("BCatcher")
  LoadAnimationGroup("BdrDoorL")
  LoadAnimationGroup("BeardLady")
  LoadAnimationGroup("Bike")
  LoadAnimationGroup("BikeGar")
  LoadAnimationGroup("BoldRoll")
  LoadAnimationGroup("BoltCutt")
  LoadAnimationGroup("Boxing")
  LoadAnimationGroup("BoxRopes")
  LoadAnimationGroup("BRDoor")
  LoadAnimationGroup("BrkSwtch")
  LoadAnimationGroup("BROCKETL")
  LoadAnimationGroup("BRSwitch")
  LoadAnimationGroup("BusDoors")
  LoadAnimationGroup("Butcher")
  LoadAnimationGroup("BXPBag")
  LoadAnimationGroup("B_Striker")
  LoadAnimationGroup("CarnCurt")
  LoadAnimationGroup("CARNI01")
  LoadAnimationGroup("carnies")
  LoadAnimationGroup("Car_Ham")
  LoadAnimationGroup("Cavalier")
  LoadAnimationGroup("Cheer_Cool1")
  LoadAnimationGroup("Cheer_Cool2")
  LoadAnimationGroup("Cheer_Cool3")
  LoadAnimationGroup("Cheer_Gen1")
  LoadAnimationGroup("Cheer_Gen2")
  LoadAnimationGroup("Cheer_Gen3")
  LoadAnimationGroup("Cheer_Girl1")
  LoadAnimationGroup("Cheer_Girl2")
  LoadAnimationGroup("Cheer_Girl3")
  LoadAnimationGroup("Cheer_Girl4")
  LoadAnimationGroup("Cheer_Nerd1")
  LoadAnimationGroup("Cheer_Nerd2")
  LoadAnimationGroup("Cheer_Nerd3")
  LoadAnimationGroup("Cheer_Posh1")
  LoadAnimationGroup("Cheer_Posh2")
  LoadAnimationGroup("Cheer_Posh3")
  LoadAnimationGroup("Chem_Set")
  LoadAnimationGroup("ChLead_Idle")
  LoadAnimationGroup("CLadderA")
  LoadAnimationGroup("CnGate")
  LoadAnimationGroup("Coaster")
  LoadAnimationGroup("COPBIKE")
  LoadAnimationGroup("Cop_Frisk")
  LoadAnimationGroup("CV_Female")
  LoadAnimationGroup("CV_Male")
  LoadAnimationGroup("C_Wrestling")
  LoadAnimationGroup("DartBrd")
  LoadAnimationGroup("DartCab")
  LoadAnimationGroup("DodgeBall")
  LoadAnimationGroup("DodgeBall2")
  LoadAnimationGroup("DoorStr1")
  LoadAnimationGroup("DO_Edgar")
  LoadAnimationGroup("DO_Grap")
  LoadAnimationGroup("DO_StrikeCombo")
  LoadAnimationGroup("DO_Striker")
  LoadAnimationGroup("DRBrace")
  LoadAnimationGroup("Drumming")
  LoadAnimationGroup("DuffBag")
  LoadAnimationGroup("DunkBttn")
  LoadAnimationGroup("DunkSeat")
  LoadAnimationGroup("Earnest")
  LoadAnimationGroup("EnglishClass")
  LoadAnimationGroup("ErrandCrab")
  LoadAnimationGroup("Errand_BUS")
  LoadAnimationGroup("Errand_IND")
  LoadAnimationGroup("Errand_RIC")
  LoadAnimationGroup("Errand_SCH")
  LoadAnimationGroup("ESCDoorL")
  LoadAnimationGroup("ESCDoorR")
  LoadAnimationGroup("ExtWind")
  LoadAnimationGroup("FDoor")
  LoadAnimationGroup("FDoorB")
  LoadAnimationGroup("FDoorC")
  LoadAnimationGroup("Ferris")
  LoadAnimationGroup("FGhost")
  LoadAnimationGroup("FGoblin")
  LoadAnimationGroup("FlagA")
  LoadAnimationGroup("FLbBook")
  LoadAnimationGroup("FlbLader")
  LoadAnimationGroup("FLbPaint")
  LoadAnimationGroup("FLbTable")
  LoadAnimationGroup("FMCntrl")
  LoadAnimationGroup("FMDoor")
  LoadAnimationGroup("FMTrapDr")
  LoadAnimationGroup("FMTrapSw")
  LoadAnimationGroup("FortTell")
  LoadAnimationGroup("funCart")
  LoadAnimationGroup("funCurtn")
  LoadAnimationGroup("funMiner")
  LoadAnimationGroup("funRocks")
  LoadAnimationGroup("FunTeeth")
  LoadAnimationGroup("FXTestG")
  LoadAnimationGroup("F_Adult")
  LoadAnimationGroup("F_BULLY")
  LoadAnimationGroup("F_Crazy")
  LoadAnimationGroup("F_Douts")
  LoadAnimationGroup("F_Girls")
  LoadAnimationGroup("F_Greas")
  LoadAnimationGroup("F_Jocks")
  LoadAnimationGroup("F_Nerds")
  LoadAnimationGroup("F_OldPeds")
  LoadAnimationGroup("F_Pref")
  LoadAnimationGroup("F_Preps")
  LoadAnimationGroup("GarbCanA")
  LoadAnimationGroup("GatCool")
  LoadAnimationGroup("GEN_SOCIAL")
  LoadAnimationGroup("Gfight")
  LoadAnimationGroup("GhostDrs")
  LoadAnimationGroup("Gift")
  LoadAnimationGroup("Go_Cart")
  LoadAnimationGroup("Grap")
  LoadAnimationGroup("GymHoop")
  LoadAnimationGroup("GymWLad")
  LoadAnimationGroup("G_Grappler")
  LoadAnimationGroup("G_Johnny")
  LoadAnimationGroup("G_Striker")
  LoadAnimationGroup("Halloween")
  LoadAnimationGroup("HallWind")
  LoadAnimationGroup("Hang_Jock")
  LoadAnimationGroup("Hang_Moshing")
  LoadAnimationGroup("Hang_Talking")
  LoadAnimationGroup("Hang_Workout")
  LoadAnimationGroup("Hobos")
  LoadAnimationGroup("Hobo_Cheer")
  LoadAnimationGroup("HSdinger")
  LoadAnimationGroup("HUMIL_4-10_B")
  LoadAnimationGroup("HUMIL_4-10_C")
  LoadAnimationGroup("HUMIL_5-8F_A")
  LoadAnimationGroup("HUMIL_5-8F_B")
  LoadAnimationGroup("HUMIL_5-8V4-10")
  LoadAnimationGroup("HUMIL_5-8V6-1")
  LoadAnimationGroup("HUMIL_5-8VPLY")
  LoadAnimationGroup("HUMIL_5-8_A")
  LoadAnimationGroup("HUMIL_5-8_B")
  LoadAnimationGroup("HUMIL_5-8_C")
  LoadAnimationGroup("HUMIL_6-1V4-10")
  LoadAnimationGroup("HUMIL_6-1V6-1")
  LoadAnimationGroup("HUMIL_6-1VPLY")
  LoadAnimationGroup("HUMIL_6-1_A")
  LoadAnimationGroup("HUMIL_6-1_B")
  LoadAnimationGroup("HUMIL_6-1_C")
  LoadAnimationGroup("HUMIL_6-5V4-10")
  LoadAnimationGroup("HUMIL_6-5V6-1")
  LoadAnimationGroup("HUMIL_6-5VPLY")
  LoadAnimationGroup("HUMIL_6-5_A")
  LoadAnimationGroup("HUMIL_6-5_B")
  LoadAnimationGroup("HUMIL_6-5_C")
  LoadAnimationGroup("IDLE_AUTH_A")
  LoadAnimationGroup("IDLE_AUTH_B")
  LoadAnimationGroup("IDLE_AUTH_C")
  LoadAnimationGroup("IDLE_AUTH_D")
  LoadAnimationGroup("IDLE_BULLY_A")
  LoadAnimationGroup("IDLE_BULLY_B")
  LoadAnimationGroup("IDLE_BULLY_C")
  LoadAnimationGroup("IDLE_BULLY_D")
  LoadAnimationGroup("IDLE_CIVF_A")
  LoadAnimationGroup("IDLE_CIVF_B")
  LoadAnimationGroup("IDLE_CIVF_C")
  LoadAnimationGroup("IDLE_CIVM_A")
  LoadAnimationGroup("IDLE_CIVM_B")
  LoadAnimationGroup("IDLE_CIVM_C")
  LoadAnimationGroup("IDLE_DOUT_A")
  LoadAnimationGroup("IDLE_DOUT_B")
  LoadAnimationGroup("IDLE_DOUT_C")
  LoadAnimationGroup("IDLE_DOUT_D")
  LoadAnimationGroup("IDLE_FATG_A")
  LoadAnimationGroup("IDLE_FATG_B")
  LoadAnimationGroup("IDLE_FATG_C")
  LoadAnimationGroup("IDLE_FAT_A")
  LoadAnimationGroup("IDLE_FAT_B")
  LoadAnimationGroup("IDLE_FAT_C")
  LoadAnimationGroup("IDLE_GREAS_A")
  LoadAnimationGroup("IDLE_GREAS_B")
  LoadAnimationGroup("IDLE_GREAS_C")
  LoadAnimationGroup("IDLE_GREAS_D")
  LoadAnimationGroup("IDLE_GSF_A")
  LoadAnimationGroup("IDLE_GSF_B")
  LoadAnimationGroup("IDLE_GSF_C")
  LoadAnimationGroup("IDLE_GSM_A")
  LoadAnimationGroup("IDLE_GSM_B")
  LoadAnimationGroup("IDLE_GSM_C")
  LoadAnimationGroup("IDLE_JOCK_A")
  LoadAnimationGroup("IDLE_JOCK_B")
  LoadAnimationGroup("IDLE_JOCK_C")
  LoadAnimationGroup("IDLE_JOCK_D")
  LoadAnimationGroup("IDLE_NERD_A")
  LoadAnimationGroup("IDLE_NERD_B")
  LoadAnimationGroup("IDLE_NERD_C")
  LoadAnimationGroup("IDLE_NERD_D")
  LoadAnimationGroup("IDLE_NGIRL")
  LoadAnimationGroup("IDLE_PREP_A")
  LoadAnimationGroup("IDLE_PREP_B")
  LoadAnimationGroup("IDLE_PREP_C")
  LoadAnimationGroup("IDLE_PREP_D")
  LoadAnimationGroup("IDLE_SEXY_A")
  LoadAnimationGroup("IDLE_SEXY_B")
  LoadAnimationGroup("IDLE_SEXY_C")
  LoadAnimationGroup("INDgateC")
  LoadAnimationGroup("JPhoto")
  LoadAnimationGroup("JunkCarA")
  LoadAnimationGroup("JV_Asylum")
  LoadAnimationGroup("J_Damon")
  LoadAnimationGroup("J_Grappler")
  LoadAnimationGroup("J_Melee")
  LoadAnimationGroup("J_Ranged")
  LoadAnimationGroup("J_Striker")
  LoadAnimationGroup("KISS1")
  LoadAnimationGroup("KISS2")
  LoadAnimationGroup("KISS3")
  LoadAnimationGroup("KISS4")
  LoadAnimationGroup("KissAdult")
  LoadAnimationGroup("KISSB")
  LoadAnimationGroup("KISSF")
  LoadAnimationGroup("LckrGymA")
  LoadAnimationGroup("LE_Officer")
  LoadAnimationGroup("LE_Orderly")
  LoadAnimationGroup("Mermaid")
  LoadAnimationGroup("MG_Craps")
  LoadAnimationGroup("MINIBIKE")
  LoadAnimationGroup("MINICHEM")
  LoadAnimationGroup("MINIDARTS")
  LoadAnimationGroup("MINIDunk")
  LoadAnimationGroup("MINIGraf")
  LoadAnimationGroup("MINIHACKY")
  LoadAnimationGroup("MINI_Arm")
  LoadAnimationGroup("MINI_BallToss")
  LoadAnimationGroup("MINI_Lock")
  LoadAnimationGroup("MINI_React")
  LoadAnimationGroup("Miracle")
  LoadAnimationGroup("MOWER")
  LoadAnimationGroup("MPostA")
  LoadAnimationGroup("N2B Dishonerable")
  LoadAnimationGroup("Nemesis")
  LoadAnimationGroup("nerdBar1")
  LoadAnimationGroup("NIS_0_00A")
  LoadAnimationGroup("NIS_1_02")
  LoadAnimationGroup("NIS_1_02B")
  LoadAnimationGroup("NIS_1_03")
  LoadAnimationGroup("NIS_1_04")
  LoadAnimationGroup("NIS_1_05")
  LoadAnimationGroup("NIS_1_07")
  LoadAnimationGroup("NIS_1_08_1")
  LoadAnimationGroup("NIS_1_09")
  LoadAnimationGroup("NIS_1_11")
  LoadAnimationGroup("NIS_2_01")
  LoadAnimationGroup("NIS_2_03")
  LoadAnimationGroup("NIS_2_04")
  LoadAnimationGroup("NIS_2_06_1")
  LoadAnimationGroup("NIS_2_B")
  LoadAnimationGroup("NIS_2_S04")
  LoadAnimationGroup("NIS_3_01")
  LoadAnimationGroup("NIS_3_02")
  LoadAnimationGroup("NIS_3_04")
  LoadAnimationGroup("NIS_3_05")
  LoadAnimationGroup("NIS_3_06")
  LoadAnimationGroup("NIS_3_08")
  LoadAnimationGroup("NIS_3_11")
  LoadAnimationGroup("NIS_3_B")
  LoadAnimationGroup("NIS_3_G3")
  LoadAnimationGroup("NIS_3_R09_D")
  LoadAnimationGroup("NIS_3_R09_G")
  LoadAnimationGroup("NIS_3_R09_J")
  LoadAnimationGroup("NIS_3_R09_N")
  LoadAnimationGroup("NIS_3_R09_P")
  LoadAnimationGroup("NIS_3_S03")
  LoadAnimationGroup("NIS_3_S03_B")
  LoadAnimationGroup("NIS_3_S11")
  LoadAnimationGroup("NIS_4_01")
  LoadAnimationGroup("NIS_4_05")
  LoadAnimationGroup("NIS_4_06")
  LoadAnimationGroup("NIS_4_B2")
  LoadAnimationGroup("NIS_5_01")
  LoadAnimationGroup("NIS_5_02")
  LoadAnimationGroup("NIS_5_03")
  LoadAnimationGroup("NIS_5_04")
  LoadAnimationGroup("NIS_5_05")
  LoadAnimationGroup("NIS_5_07")
  LoadAnimationGroup("NIS_5_G5")
  LoadAnimationGroup("NIS_6_02")
  LoadAnimationGroup("NIS_6_03")
  LoadAnimationGroup("NLock01A")
  LoadAnimationGroup("NPC_Adult")
  LoadAnimationGroup("NPC_AggroTaunt")
  LoadAnimationGroup("NPC_Chat_1")
  LoadAnimationGroup("NPC_Chat_2")
  LoadAnimationGroup("NPC_Chat_F")
  LoadAnimationGroup("NPC_Cheering")
  LoadAnimationGroup("NPC_Love")
  LoadAnimationGroup("NPC_Mascot")
  LoadAnimationGroup("NPC_NeedsResolving")
  LoadAnimationGroup("NPC_Principal")
  LoadAnimationGroup("NPC_Shopping")
  LoadAnimationGroup("NPC_Spectator")
  LoadAnimationGroup("N_Ranged")
  LoadAnimationGroup("N_Striker")
  LoadAnimationGroup("N_Striker_A")
  LoadAnimationGroup("N_Striker_B")
  LoadAnimationGroup("ObsDoor")
  LoadAnimationGroup("OBSMotor")
  LoadAnimationGroup("ObsPtf_1")
  LoadAnimationGroup("ObsPtf_2")
  LoadAnimationGroup("Pageant")
  LoadAnimationGroup("PedCoaster")
  LoadAnimationGroup("Player_Tired")
  LoadAnimationGroup("Player_VTired")
  LoadAnimationGroup("POI_Booktease")
  LoadAnimationGroup("POI_Cafeteria")
  LoadAnimationGroup("POI_ChLead")
  LoadAnimationGroup("POI_Gen")
  LoadAnimationGroup("POI_Smoking")
  LoadAnimationGroup("POI_Telloff")
  LoadAnimationGroup("POI_WarmHands")
  LoadAnimationGroup("POI_Worker")
  LoadAnimationGroup("PortaPoo")
  LoadAnimationGroup("PrepDoor")
  LoadAnimationGroup("PunchBag")
  LoadAnimationGroup("pxHoop")
  LoadAnimationGroup("pxLad10M")
  LoadAnimationGroup("Px_Arcade")
  LoadAnimationGroup("Px_Bed")
  LoadAnimationGroup("Px_Fountain")
  LoadAnimationGroup("Px_Garb")
  LoadAnimationGroup("Px_Gen")
  LoadAnimationGroup("Px_Ladr")
  LoadAnimationGroup("Px_Rail")
  LoadAnimationGroup("Px_RedButton")
  LoadAnimationGroup("Px_Sink")
  LoadAnimationGroup("Px_Tlet")
  LoadAnimationGroup("Px_Tree")
  LoadAnimationGroup("P_Grappler")
  LoadAnimationGroup("P_Striker")
  LoadAnimationGroup("QPed")
  LoadAnimationGroup("RAT_PED")
  LoadAnimationGroup("Reeper")
  LoadAnimationGroup("RMailbox")
  LoadAnimationGroup("Russell")
  LoadAnimationGroup("Russell_PBomb")
  LoadAnimationGroup("Santa_Lap")
  LoadAnimationGroup("SAUTH_A")
  LoadAnimationGroup("SAUTH_F")
  LoadAnimationGroup("SAUTH_U")
  LoadAnimationGroup("SAUTH_X")
  LoadAnimationGroup("SBarels1")
  LoadAnimationGroup("SBULL_A")
  LoadAnimationGroup("SBULL_F")
  LoadAnimationGroup("SBULL_S")
  LoadAnimationGroup("SBULL_U")
  LoadAnimationGroup("SBULL_X")
  LoadAnimationGroup("Scaffold")
  LoadAnimationGroup("SCbanpil")
  LoadAnimationGroup("SCBell")
  LoadAnimationGroup("SCDoor")
  LoadAnimationGroup("ScGate")
  LoadAnimationGroup("SCgrdoor")
  LoadAnimationGroup("scObsDr")
  LoadAnimationGroup("ScoolBus")
  LoadAnimationGroup("SCOOTER")
  LoadAnimationGroup("SecDoorL")
  LoadAnimationGroup("SecDoorR")
  LoadAnimationGroup("Sedan")
  LoadAnimationGroup("ShopBike")
  LoadAnimationGroup("SHUMIL_01")
  LoadAnimationGroup("SHWR")
  LoadAnimationGroup("SIAMESE")
  LoadAnimationGroup("Siamese2")
  LoadAnimationGroup("Sitting_Boys")
  LoadAnimationGroup("SK8Board")
  LoadAnimationGroup("Skateboard")
  LoadAnimationGroup("SkeltonMan")
  LoadAnimationGroup("Slingsh")
  LoadAnimationGroup("SNERD_A")
  LoadAnimationGroup("SNERD_F")
  LoadAnimationGroup("SNERD_I")
  LoadAnimationGroup("SNERD_S")
  LoadAnimationGroup("SNGIRLS")
  LoadAnimationGroup("SNGIRL_D")
  LoadAnimationGroup("SNGIRL_F")
  LoadAnimationGroup("SnowBlob")
  LoadAnimationGroup("SnowMND")
  LoadAnimationGroup("SnowWall")
  LoadAnimationGroup("SOLD_A")
  LoadAnimationGroup("SOLD_F")
  LoadAnimationGroup("SOLD_I")
  LoadAnimationGroup("SOLD_S")
  LoadAnimationGroup("SPLAY_A")
  LoadAnimationGroup("SPLAY_B")
  LoadAnimationGroup("SprayCan")
  LoadAnimationGroup("SpudG")
  LoadAnimationGroup("Squid")
  LoadAnimationGroup("StalDoor")
  LoadAnimationGroup("Straf_Dout")
  LoadAnimationGroup("Straf_Fat")
  LoadAnimationGroup("Straf_Female")
  LoadAnimationGroup("Straf_Male")
  LoadAnimationGroup("Straf_Nerd")
  LoadAnimationGroup("Straf_Prep")
  LoadAnimationGroup("Straf_Savage")
  LoadAnimationGroup("Straf_Wrest")
  LoadAnimationGroup("TE_Female")
  LoadAnimationGroup("TrackSW")
  LoadAnimationGroup("TreeFall")
  LoadAnimationGroup("Truck")
  LoadAnimationGroup("Try_Clothes")
  LoadAnimationGroup("Umbrella")
  LoadAnimationGroup("VFlytrap")
  LoadAnimationGroup("V_Bike")
  LoadAnimationGroup("V_Bike_Races")
  LoadAnimationGroup("V_COPBIKE")
  LoadAnimationGroup("V_SCOOTER")
  LoadAnimationGroup("WPCannon")
  LoadAnimationGroup("WPSheldB")
  LoadAnimationGroup("WPShield")
  LoadAnimationGroup("WPTurret")
  LoadAnimationGroup("W_BBall")
  LoadAnimationGroup("W_BBallBat")
  LoadAnimationGroup("W_BRocket")
  LoadAnimationGroup("W_Camera")
  LoadAnimationGroup("W_CherryBomb")
  LoadAnimationGroup("W_CHShield")
  LoadAnimationGroup("W_FlashLight")
  LoadAnimationGroup("W_Fountain")
  LoadAnimationGroup("W_Itchpowder")
  LoadAnimationGroup("W_JBroom")
  LoadAnimationGroup("W_Lid")
  LoadAnimationGroup("W_PooBag")
  LoadAnimationGroup("W_PRANK")
  LoadAnimationGroup("W_Slingshot")
  LoadAnimationGroup("W_Snowball")
  LoadAnimationGroup("W_snowshwl")
  LoadAnimationGroup("W_SprayCan")
  LoadAnimationGroup("W_SpudGun")
  LoadAnimationGroup("W_Stick")
  LoadAnimationGroup("W_Thrown")
  LoadAnimationGroup("W_wtrpipe")
end 

-------------------------------------SM_PROCCESSOR-------------------------------------

local dead = false -- Change to "true" if you want the selector menu is not active when pressing button select.

function ATZ_Model()
  if not dead then
    S_SetupCore()
	SoundPlay2D("RightBtn")
    repeat
	  if IsButtonBeingPressed(0,0) then
	  -- Previous select
	    SoundPlay2D("NavUp")
	    modelSelect = modelSelect - 1
        if modelSelect < 1 then modelSelect = size(models) end
	  elseif IsButtonBeingPressed(1,0) then
	  -- Next select
	    SoundPlay2D("NavUp")
	    modelSelect = modelSelect + 1
	    if modelSelect > size(models) then modelSelect = 1 end
	  end
	  if IsButtonPressed(0,0) and IsButtonPressed(7,0) then
	  -- Previous select
	    SoundPlay2D("ButtonDown")
	    modelSelect = modelSelect - 1
        if modelSelect < 1 then modelSelect = size(models) end
	  elseif IsButtonPressed(1,0) and IsButtonPressed(7,0) then
	  -- Next select
	    SoundPlay2D("ButtonUp")
	    modelSelect = modelSelect + 1
	    if modelSelect > size(models) then modelSelect = 1 end
	  end
	  if IsButtonBeingPressed(3,0) then
	    -- PlateBreakLarge
		bug_detected = false
		if use_fix_model == 6 and bugged_mission_running() then
		  local ran_time = math.random(1,2)
		  TextPrintString("Not Supported\n\n\nSee Read Me.txt for more",ran_time,1)
		  Wait(ran_time*1000)
		  bug_detected = true
		end
	    SoundPlay2D("ButtonUp")
		chapterBefore = ChapterGet()
		changeChapter = false
		mode = {
		  "Summer",
		  "Winter",
		}
		repeat
		  if IsButtonBeingPressed(0,0) then
			SoundPlay2D("NavUp")
			fors = fors - 1
			if fors < 1 then fors = size(to) end
		  elseif IsButtonBeingPressed(1,0) then
			SoundPlay2D("NavUp")
			fors = fors + 1
			if fors > size(to) then fors = 1 end
		  end
		  if IsButtonBeingPressed(13,0) then
		    modeSelect = modeSelect + 1
			if modeSelect > 2 then modeSelect = 1 end
		  elseif IsButtonBeingPressed(11,0) then
		    modeSelect = modeSelect - 1
			if modeSelect < 1 then modeSelect = 2 end
		  end
		  PedSetWeapon(gPlayer,-1)
		  TextPrintString("MODEL SELECTOR\n["..models[modelSelect].name.."]\n\nSet to: "..to[fors].."\n\nMode: "..mode[modeSelect],0,1)
		  if showText then
		    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~ddown~ Select]",0,2)
		  end
		  Wait(0)
		until IsButtonBeingPressed(3,0) or bug_detected or IsButtonBeingPressed(14,0)
		SoundPlay2D("ButtonUp")
		if IsButtonBeingPressed(3,0) then
		  WaitUntil(3,0)
		  if mode[modeSelect] == "Winter" then
		    if ChapterGet() ~= 2 then
		      chapterBefore = ChapterGet()
			  Wait(10)
		      ChapterSet(2)
			  changeChapter = true
		    end
		  elseif mode[modeSelect] == "Summer" then
		    if ChapterGet() == 2 then
		      chapterBefore = ChapterGet()
			  Wait(10)
		      ChapterSet(1)
			  changeChapter = true
		    end
		  end
		  if fors == 1 then
		    PlayerSwapModel(models[modelSelect].model)
		    PedSetActionTree(gPlayer,"/Global/"..models[modelSelect].style,"Act/Anim/"..models[modelSelect].style..".act")
		    PedSetInfiniteSprint(gPlayer, true)
		    if models[modelSelect].style == "CV_Male_A" then
		      PedSetActionTree(gPlayer,"/Global/GS_Male_A","Act/Anim/GS_Male_A.act")
		    end
		    saveModel = models[modelSelect].model
		    saveStyle = models[modelSelect].style
		  elseif fors == 2 then
		    local ped = GetTarget()
		    PedSwapModel(ped,models[modelSelect].model)
		    PedSetActionTree(ped,"/Global/"..models[modelSelect].style,"Act/Anim/"..models[modelSelect].style..".act")
		    PedSetInfiniteSprint(ped, true)
		  elseif fors == 3 then
		    for i,ped in {PedFindInAreaXYZ(0,0,0,999999)} do
		      if PedIsValid(ped) and not PedIsModel(ped,PlayerGetModelID()) and ped ~= gPlayer then
		        PedSwapModel(ped,models[modelSelect].model)
			    PedSetActionTree(ped,"/Global/"..models[modelSelect].style,"Act/Anim/"..models[modelSelect].style..".act")
			    PedSetInfiniteSprint(ped, true)
              end
		    end
		  end
		  if changeChapter then
		    ChapterSet(chapterBefore)
		    changeChapter = false
		  end
	    elseif IsButtonBeingPressed(14,0) then
		  WaitUntil(14,0)
		  Wait(math.random(3,50))
		elseif bug_detected then
		  Wait(math.random(50,100))
		end
	  end
	  if modelSelect == 1 then
	    TextPrintString("MODEL SELECTOR\n\n:"..models[modelSelect].name..":\n"..models[modelSelect + 1].name.."\n"..models[modelSelect + 2].name.."",1,1)
	  elseif modelSelect == table.getn(models) then
	    TextPrintString("MODEL SELECTOR\n\n"..models[modelSelect - 2].name.."\n"..models[modelSelect - 1].name.."\n:"..models[modelSelect].name..":",1,1)
	  elseif not (modelSelect == 1 or modelSelect == table.getn(models)) then
	    TextPrintString("MODEL SELECTOR\n\n"..models[modelSelect - 1].name.."\n:"..models[modelSelect].name..":\n"..models[modelSelect + 1].name.."",1,1)
	  end
	  if showText then
	    TextPrintString("[Number: "..modelSelect.."]\n[Navigate: ~dleft~ or ~dright~]\n[Exit ~LOOK_BACK~|~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Style()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
      if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    ss = ss - 1
	    if ss < 1 then ss = size(ssm) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    ss = ss + 1
	    if ss > size(ssm) then ss = 1 end
	  elseif IsButtonBeingPressed(3,0) then
	    SoundPlay2D("ButtonDown")
		Wait(100)
	    if ss == 1 then
		  FightingStyle()
		else
		  MovementStyle()
		end
	  end
	  if ss == 1 then
	    TextPrintString("STYLE SELECTOR\n\n>1."..ssm[1].."<\n2."..ssm[2],0,1)
	  else
	    TextPrintString("STYLE SELECTOR\n\n1."..ssm[1].."\n>2."..ssm[2].."<",0,1)
	  end
	  if showText then
	    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[Exit: ~LOOK_BACK~|Select: ~ddown~]",0,2)
	  end
	  Wait(0)
	until IsButtonBeingPressed(14,0)
	SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function FightingStyle()
  if not dead then
    repeat
      if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    styleSelect = styleSelect - 1
	    if styleSelect < 1 then styleSelect = size(styles) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    styleSelect = styleSelect + 1
	    if styleSelect > size(styles) then styleSelect = 1 end
	  elseif IsButtonBeingPressed(3,0) then
	    SoundPlay2D("ButtonUp")
		WaitUntil(3,0)
		repeat
		  if IsButtonBeingPressed(0,0) or faster_select(0) then
			SoundPlay2D("NavUp")
			fors = fors - 1
			if fors < 1 then fors = size(to) end
		  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
			SoundPlay2D("NavUp")
			fors = fors + 1
			if fors > size(to) then fors = 1 end
		  end
		  TextPrintString("STYLE SELECTOR\n["..styles[styleSelect].."]\n\nSet to: "..to[fors],0,1)
		  if showText then
		    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~ddown~ Select]",0,2)
		  end
		  Wait(0)
		until IsButtonBeingPressed(3,0)
		SoundPlay2D("ButtonUp")
		if fors == 1 then
          ped_set_custom_tree(gPlayer,styles[styleSelect])
		  --PedSetActionTree(gPlayer,"/Global/"..styles[styleSelect],"Act/Anim/"..styles[styleSelect]..".act")
		  saveStyle = styles[styleSelect]
		elseif fors == 2 then
		  local ped = GetTarget()
		  ped_set_custom_tree(ped,styles[styleSelect])
          --PedSetActionTree(ped,"/Global/"..styles[styleSelect],"Act/Anim/"..styles[styleSelect]..".act")
		elseif fors == 3 then
		  for i,ped in {PedFindInAreaXYZ(0,0,0,999999)} do
		    if PedIsValid(ped) and ped ~= gPlayer then
              ped_set_custom_tree(ped,styles[styleSelect])
			  --PedSetActionTree(ped,"/Global/"..styles[styleSelect],"Act/Anim/"..styles[styleSelect]..".act")
			end
		  end
		end
      end
	  if styleSelect == 1 then
	    TextPrintString("STYLE SELECTOR\n1.Fighting Style\n\n>"..styles[styleSelect].."<\n"..styles[styleSelect + 1].."\n"..styles[styleSelect + 2].."",1,1)
	  elseif styleSelect == table.getn(styles) then
	    TextPrintString("STYLE SELECTOR\n1.Fighting Style\n\n"..styles[styleSelect - 2].."\n"..styles[styleSelect - 1].."\n>"..styles[styleSelect].."<",1,1)
	  elseif not (styleSelect == 1 or styleSelect == table.getn(styles)) then
	    TextPrintString("STYLE SELECTOR\n1.Fighting Style\n\n"..styles[styleSelect - 1].."\n>"..styles[styleSelect].."<\n"..styles[styleSelect + 1].."",1,1)
	  end
	  if showText then
	    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[Exit ~LOOK_BACK~|~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
	SoundPlay2D("WrongBtn")
	Wait(100)
  end
end

function ATZ_Weather()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
      if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    zSelect = zSelect - 1
	    if zSelect < 1 then zSelect = size(zs) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    zSelect = zSelect + 1
	    if zSelect > size(zs) then zSelect = 1 end
	  elseif IsButtonBeingPressed(3,0) then
	    if zs[zSelect][2] == "CUSTOM" then
		  WaitUntil(3,0)
		  SoundPlay2D("RightBtn")
		  custom_weather()
		else
	      WeatherSet(zs[zSelect][1])
		end
	  end
	  TextPrintString("WEATHER SELECTOR\n\n~dleft~<"..zs[zSelect][2]..">~dright~",0,1)
	  if showText then
	    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~LOOK_BACK~ Exiting the menu]\n[~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
	SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Chapter()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
      if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    xSelect = xSelect - 1
	    if xSelect < 1 then xSelect = size(xs) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    xSelect = xSelect + 1
	    if xSelect > size(xs) then xSelect = 1 end
	  elseif IsButtonBeingPressed(3,0) then
	    ChapterSet(xs[xSelect][1])
	    if ChapterGet() == 2 then
		  AreaLoadSpecialEntities("Christmas",true)
		elseif not ChapterGet() == 2 then
		  AreaLoadSpecialEntities("Christmas",false)
		end
	  end
	  TextPrintString("CHAPTER SELECTOR\n\n~dleft~<"..xs[xSelect][2]..">~dright~",0,1)
	  if showText then
	    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~LOOK_BACK~ Exiting the menu]\n[~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
	SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Time()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
      if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("ButtonUp")
	    ClockSet(ClockGet() - 1)
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("ButtonUp")
	    ClockSet(ClockGet() + 1)
	  end
	  TextPrintString("TIME SELECTOR\n\n~dleft~<"..ClockGet()..">~dright~",0,1)
	  if showText then
	    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~LOOK_BACK~ Exiting the menu]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
	SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Weapon()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
      if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    cSelect = cSelect - 1
	    if cSelect < 1 then cSelect = size(cs) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    cSelect = cSelect + 1
	    if cSelect > size(cs) then cSelect = 1 end
	  elseif IsButtonBeingPressed(3,0) then
	    SoundPlay2D("ButtonUp")
		repeat
		  if IsButtonBeingPressed(0,0) or faster_select(0) then
			SoundPlay2D("NavUp")
			fors = fors - 1
			if fors < 1 then fors = size(to) end
		  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
			SoundPlay2D("NavUp")
			fors = fors + 1
			if fors > size(to) then fors = 1 end
		  end
		  TextPrintString("WEAPON SELECTOR\n["..cs[cSelect].name.."]\n\nSet to: "..to[fors],0,1)
		  TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~ddown~ Select]",0,2)
		  Wait(0)
		until IsButtonBeingPressed(3,0)
		SoundPlay2D("ButtonUp")
		if fors == 1 then
	      PedSetWeapon(gPlayer,cs[cSelect].model,50)
		elseif fors == 2 then
		  local ped = GetTarget()
	      PedSetWeapon(ped,cs[cSelect].model,50)
		elseif fors == 3 then
		  for i,ped in {PedFindInAreaXYZ(0,0,0,999999)} do
		    if PedIsValid(ped) and ped ~= gPlayer then
			  PedSetWeapon(ped,cs[cSelect].model,50)
			end
		  end
		end
	  end
	  if cSelect == 1 then
	    TextPrintString("WEAPON SELECTOR\n\n>"..cs[cSelect].name.."<\n"..cs[cSelect + 1].name.."\n"..cs[cSelect + 2].name.."",0,1)
	  elseif cSelect == table.getn(cs) then
	    TextPrintString("WEAPON SELECTOR\n\n"..cs[cSelect - 2].name.."\n"..cs[cSelect - 1].name.."\n>"..cs[cSelect].name.."<",0,1)
	  elseif not (cSelect == table.getn(cs) or cSelect == 1) then
	    TextPrintString("WEAPON SELECTOR\n\n"..cs[cSelect - 1].name.."\n>"..cs[cSelect].name.."<\n"..cs[cSelect + 1].name.."",0,1)
	  end
	  if showText then
	    TextPrintString("[Number: "..cSelect.."]\n[Navigate: ~dleft~ or ~dright~]\n[Exit ~LOOK_BACK~|~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
	SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Pickups()
  if not dead then
    S_SetupPickup()
    SoundPlay2D("RightBtn")
    repeat
      if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    pcs = pcs - 1
	    if pcs < 1 then pcs = size(pcss) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    pcs = pcs + 1
	    if pcs > size(pcss) then pcs = 1 end
	  elseif IsButtonBeingPressed(3,0) then
	    SoundPlay2D("ButtonUp")
		local x,y,z = PlayerGetPosXYZ()
		pickupForPlayer = PickupCreateXYZ(pcss[pcs].model,x + 1,y,z + 1)
	  end
	  if pcs == 1 then
	    TextPrintString("PICKUP SELECTOR\n\n>"..pcss[pcs].name.."<\n"..pcss[pcs + 1].name.."\n"..pcss[pcs + 2].name.."",0,1)
	  elseif pcs == table.getn(pcss) then
	    TextPrintString("PICKUP SELECTOR\n\n"..pcss[pcs - 2].name.."\n"..pcss[pcs - 1].name.."\n>"..pcss[pcs].name.."<",0,1)
	  elseif not (pcs == table.getn(pcss) or pcs == 1) then
	    TextPrintString("PICKUP SELECTOR\n\n"..pcss[pcs - 1].name.."\n>"..pcss[pcs].name.."<\n"..pcss[pcs + 1].name.."",0,1)
	  end
	  if showText then
	    TextPrintString("[Number: "..pcs.."]\n[Navigate: ~dleft~ or ~dright~]\n[Exit ~LOOK_BACK~|~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
	SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Respect()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
      if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    kSelect = kSelect - 1
	    if kSelect < 1 then kSelect = size(ks) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    kSelect = kSelect + 1
	    if kSelect > size(ks) then kSelect = 1 end
	  elseif IsButtonBeingPressed(3,0) then
		Wait(100)
		repeat
		  if IsButtonBeingPressed(1,0) or faster_select(1) then
			SetFactionRespect(ks[kSelect][1],GetFactionRespect(ks[kSelect][1]) + 10)
			if GetFactionRespect(ks[kSelect][1]) > 100 then
			  SetFactionRespect(ks[kSelect][1],100)
			end
			if GetFactionRespect(ks[kSelect][1]) ~= 100 then
			  PedSetTypeToTypeAttitude(ks[kSelect][1],13,tonumber(string.format("%.0f",GetFactionRespect(ks[kSelect][1])/25)))
			elseif GetFactionRespect(ks[kSelect][1]) == 100 then
			  PedSetTypeToTypeAttitude(ks[kSelect][1],13,4)
			end
		  elseif IsButtonBeingPressed(0,0) or faster_select(0) then
			SetFactionRespect(ks[kSelect][1],GetFactionRespect(ks[kSelect][1]) - 10)
			if GetFactionRespect(ks[kSelect][1]) < 0 then
			  SetFactionRespect(ks[kSelect][1],0)
			end
			if GetFactionRespect(ks[kSelect][1]) ~= 0 then
			  PedSetTypeToTypeAttitude(ks[kSelect][1],13,tonumber(string.format("%.0f",GetFactionRespect(ks[kSelect][1])/25)))
			elseif GetFactionRespect(ks[kSelect][1]) == 0 then
			  PedSetTypeToTypeAttitude(ks[kSelect][1],13,0)
			end
		  end
		  TextPrintString("RESPECT SELECTOR\n"..ks[kSelect][2].."\n\nRespect: "..GetFactionRespect(ks[kSelect][1]).."",0,1)
		  if showText then
		    TextPrintString("[~ddown~ Exit]\n[Set Value ~dleft~ or ~dright~]",0,2)
		  end
		  Wait(0)
		until IsButtonBeingPressed(3,0)
	  end
	  if kSelect == 1 then
	    TextPrintString("RESPECT SELECTOR\n\n>"..ks[kSelect][2].."<\n"..ks[kSelect + 1][2].."\n"..ks[kSelect + 2][2].."",0,1)
	  elseif kSelect == table.getn(ks) then
	    TextPrintString("RESPECT SELECTOR\n\n"..ks[kSelect - 2][2].."\n"..ks[kSelect - 1][2].."\n>"..ks[kSelect][2].."<",0,1)
	  elseif not (kSelect == table.getn(ks) or kSelect == 1) then
	    TextPrintString("RESPECT SELECTOR\n\n"..ks[kSelect - 1][2].."\n>"..ks[kSelect][2].."<\n"..ks[kSelect + 1][2].."",0,1)
	  end
	  if showText then
	    TextPrintString("[Respect: "..GetFactionRespect(ks[kSelect][1]).."]\n[Navigate ~dleft~ or ~dright~|~LOOK_BACK~ Exit]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
	SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Mission()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
	  if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    cvSelect = cvSelect - 1
        if cvSelect < 1 then cvSelect = size(cvs) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    cvSelect = cvSelect + 1
	    if cvSelect > size(cvs) then cvSelect = 1 end
	  end
	  if IsButtonBeingPressed(3,0) then
	    SoundPlay2D("ButtonDown")
		Wait(100)
		repeat
		  if IsButtonBeingPressed(0,0) or faster_select(0) then
			SoundPlay2D("NavUp")
			vdSelect = vdSelect - 1
			if vdSelect < 1 then vdSelect = size(vds) end
		  elseif IsButtonBeingPressed(1,0) or faster_select(0) then
			SoundPlay2D("NavUp")
			vdSelect = vdSelect + 1
			if vdSelect > size(vds) then vdSelect = 1 end
		  end
		  TextPrintString("MISSION SELECTOR\n"..cvs[cvSelect][2].."\n\n>"..vds[vdSelect].."<",0,1)
		  if showText then
		    TextPrintString("[~ddown~ Select]\n[Navigate ~dleft~ or ~dright~]",0,2)
		  end
		  Wait(0)
		until IsButtonBeingPressed(3,0) or IsButtonBeingPressed(14,0)
		if IsButtonBeingPressed(3,0) then
		  if vdSelect == 1 then
		    if type(cvs[cvSelect][1]) == "number" then
		      ForceStartMissionIndex(cvs[cvSelect][1])
	        else
	          ForceStartMission(cvs[cvSelect][1])
		    end
	      elseif vdSelect == 2 then
		    if type(cvs[cvSelect][1]) == "string" then
		      if not IsMissionAvailable(cvs[cvSelect][1]) then
		        ForceMissionAvailable(cvs[cvSelect][1])
			  else
			  end
			else
			  TextPrintString("THIS MISSION DOESN'T SUPPORTED",1,1)
			  Wait(1000)
			end
		  elseif vdSelect == 3 then
		    if type(cvs[cvSelect][1]) == "string" then
			  MissionSuccessCountInc(cvs[cvSelect][1])
			else
			  TextPrintString("THIS MISSION DOESN'T SUPPORTED",1,1)
			  Wait(1000)
			end
		  end
		elseif IsButtonBeingPressed(14,0) then
		  Wait(100)
	    end
	  end
	  if cvSelect == 1 then
	    TextPrintString("MISSION SELECTOR\n\n>"..cvs[cvSelect][2].."<\n"..cvs[cvSelect + 1][2].."\n"..cvs[cvSelect + 2][2].."",0,1)
	  elseif cvSelect == table.getn(cvs) then
	    TextPrintString("MISSION SELECTOR\n\n"..cvs[cvSelect - 2][2].."\n"..cvs[cvSelect - 1][2].."\n>"..cvs[cvSelect][2].."<",0,1)
	  elseif not (cvSelect == table.getn(cvs) or cvSelect == 1) then
	    TextPrintString("MISSION SELECTOR\n\n"..cvs[cvSelect - 1][2].."\n>"..cvs[cvSelect][2].."<\n"..cvs[cvSelect + 1][2].."",0,1)
	  end
	  if showText then
	    TextPrintString("[Number: "..cvSelect.."]\n[Navigate: ~dleft~ or ~dright~|~LOOK_BACK~ Exit]\n[~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_MGame()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
	  if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    cbSelect = cbSelect - 1
        if cbSelect < 1 then cbSelect = size(cbs) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    cbSelect = cbSelect + 1
	    if cbSelect > size(cbs) then cbSelect = 1 end
	  end
	  if IsButtonBeingPressed(3,0) then
	    SoundPlay2D("ButtonDown")
		if cbSelect == 20 or cbSelect == 21 or cbSelect == 22 or cbSelect == 23 or cbSelect == 19 then
		  AreaTransitionXYZ(0,216.7,462.6,5.3)
		end
		if type(cbs[cbSelect][1]) == "number" then
		  ForceStartMissionIndex(cbs[cbSelect][1])
		elseif type(cbs[cbSelect][1]) == "string" then
	      ForceStartMission(cbs[cbSelect][1])
		end
	  end
	  if cbSelect == 1 then
	    TextPrintString("M-GAME SELECTOR\n\n>"..cbs[cbSelect][2].."<\n"..cbs[cbSelect + 1][2].."\n"..cbs[cbSelect + 2][2].."",0,1)
	  elseif cbSelect == table.getn(cbs) then
	    TextPrintString("M-GAME SELECTOR\n\n"..cbs[cbSelect - 2][2].."\n"..cbs[cbSelect - 1][2].."\n>"..cbs[cbSelect][2].."<",0,1)
	  elseif not (cbSelect == table.getn(cbs) or cbSelect == 1) then
	    TextPrintString("M-GAME SELECTOR\n\n"..cbs[cbSelect - 1][2].."\n>"..cbs[cbSelect][2].."<\n"..cbs[cbSelect + 1][2].."",0,1)
	  end
	  if showText then
	    TextPrintString("[Number: "..cbSelect.."]\n[Navigate: ~dleft~ or ~dright~|~LOOK_BACK~ Exit]\n[~ddown~ Start]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Vehicle()
  rotation = 0
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
	  if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    cvtSelect = cvtSelect - 1
        if cvtSelect < 1 then cvtSelect = size(cvts) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    cvtSelect = cvtSelect + 1
	    if cvtSelect > size(cvts) then cvtSelect = 1 end
	  end
	  if IsButtonBeingPressed(3,0) then
	    while not IsButtonBeingReleased(3,0) do
		  Wait(0)
		end
		if VehicleIsValid(VehicleForPlayer) and PedIsInVehicle(gPlayer,VehicleForPlayer) then
		  PedWarpOutOfCar(gPlayer,VehicleForPlayer)
		  Wait(100)
		  VehicleDelete(VehicleForPlayer)
		elseif VehicleIsValid(VehicleForPlayer) and not PedIsInVehicle(gPlayer,VehicleForPlayer) then
		  VehicleDelete(VehicleForPlayer)
		end
		local x,y,z = PlayerGetPosXYZ()
		VehicleForPlayer = VehicleCreateXYZ(cvts[cvtSelect][1],x + 2,y + 2,z)
		local ran_color = math.random(0,99)
		VehicleSetColor(VehicleForPlayer,ran_color)
		siren = 0
		cls = ran_color + 1
		PlayerSetControl(0)
		vx,vy,vz = VehicleGetPosXYZ(VehicleForPlayer)
		repeat
		  CameraSetXYZ(x,y,z + 4)
		  CameraLookAtXYZ(vx,vy,vz)
		  CameraAllowChange(false)
		  
		  rotation = rotation - GetStickValue(18,0)*5
		  if rotation < 0 then rotation = 360 end
		  if rotation > 360 then rotation = 0 end
		  VehicleFaceHeading(VehicleForPlayer,rotation)
		  
		  if IsButtonBeingPressed(0,0) or faster_select(0) then
		    cls = cls - 1
			if cls < 1 then cls = 100 end
			VehicleSetColor(VehicleForPlayer,cls - 1)
		  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
		    cls = cls + 1
			if cls > 100 then cls = 1 end
			VehicleSetColor(VehicleForPlayer,cls - 1)
		  end
		  
		  TextPrintString("VEHICLE COLOR\n\nNumber: "..cls,0,1)
		  
		  Wait(0)
		until IsButtonBeingPressed(3,0) or IsButtonBeingReleased(14,0) or PedIsHit(gPlayer,2)
		if IsButtonBeingPressed(3,0) then
		  WaitUntil(3,0)
		  val_speed = 5
		  repeat
		    Wait(0)
			
		    if IsButtonPressed(0,0) then
			  val_speed = val_speed - 0.1
			  if val_speed < 0 then val_speed = 0 end
			elseif IsButtonPressed(1,0) then
			  val_speed = val_speed + 0.1
			  if val_speed > 10 then val_speed = 10 end
			end
			
			TextPrintString("VEHICLE SPEED\n\nSpeed: "..string.format("%.0f",val_speed*10).."%",0,1)
		  until IsButtonBeingPressed(3,0) or IsButtonBeingReleased(14,0) or PedIsHit(gPlayer,2)
		  if IsButtonBeingPressed(3,0) then
		    VehicleSetAccelerationMult(VehicleForPlayer,val_speed/5)
			VehicleSetCruiseSpeed(VehicleForPlayer,val_speed*10/2)
			CameraAllowChange(true)
		    CameraReturnToPlayer()
			PlayerSetControl(1)
		  elseif PedIsHit(gPlayer,2) or IsButtonBeingReleased(14,0) then
		    PlayerSetControl(1)
		    CameraAllowChange(true)
		    CameraReturnToPlayer()
		    VehicleDelete(VehicleForPlayer)
		    Wait(100)
		  end
		elseif PedIsHit(gPlayer,2) or IsButtonBeingReleased(14,0) then
		  PlayerSetControl(1)
		  CameraAllowChange(true)
		  CameraReturnToPlayer()
		  VehicleDelete(VehicleForPlayer)
		  Wait(100)
		end
	  end
	  if cvtSelect == 1 then
	    TextPrintString("VEHICLE SELECTOR\n\n>"..cvts[cvtSelect][2].."<\n"..cvts[cvtSelect + 1][2].."\n"..cvts[cvtSelect + 2][2].."",0,1)
	  elseif cvtSelect == table.getn(cvts) then
	    TextPrintString("VEHICLE SELECTOR\n\n"..cvts[cvtSelect - 2][2].."\n"..cvts[cvtSelect - 1][2].."\n>"..cvts[cvtSelect][2].."<",0,1)
	  elseif not (cvtSelect == table.getn(cvts) or cvtSelect == 1) then
	    TextPrintString("VEHICLE SELECTOR\n\n"..cvts[cvtSelect - 1][2].."\n>"..cvts[cvtSelect][2].."<\n"..cvts[cvtSelect + 1][2].."",0,1)
	  end
	  if showText then
	    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~LOOK_BACK~ Exiting the menu]\n[~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Music()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
	  if IsButtonBeingPressed(0,0) then
	    SoundPlay2D("NavUp")
	    cvbSelect = cvbSelect - 1
        if cvbSelect < 1 then cvbSelect = size(cvbs) end
	  elseif IsButtonBeingPressed(1,0) then
	    SoundPlay2D("NavUp")
	    cvbSelect = cvbSelect + 1
	    if cvbSelect > size(cvbs) then cvbSelect = 1 end
	  end
	  if IsButtonPressed(0,0) and IsButtonPressed(7,0) then
	    SoundPlay2D("NavUp")
	    cvbSelect = cvbSelect - 1
        if cvbSelect < 1 then cvbSelect = size(cvbs) end
	  elseif IsButtonPressed(1,0) and IsButtonPressed(7,0) then
	    SoundPlay2D("NavUp")
	    cvbSelect = cvbSelect + 1
	    if cvbSelect > size(cvbs) then cvbSelect = 1 end
	  end
	  if IsButtonBeingPressed(3,0) then
	    SoundPlay2D("ButtonDown")
		Wait(100)
		repeat
		  if IsButtonPressed(0,0) then
	        volAudio = volAudio - 0.1
		    if volAudio < 0 then
		      volAudio = 0
		    end
		  elseif IsButtonPressed(1,0) then
	        volAudio = volAudio + 0.1
		    if volAudio > 25 then
		      volAudio = 25
		    end
	      end
		  TextPrintString("MUSIC SELECTOR\nAudio Volume: "..string.format("%.0f",volAudio/0.25),0,1)
		  if showText then
		    TextPrintString("[~ddown~ Play]\n[Navigate ~dleft~ or ~dright~]",0,2)
		  end
		  Wait(0)
		until IsButtonBeingPressed(3,0)
		MusicAllowPlayDuringCutscenes(true)
	    SoundPlayStream(cvbs[cvbSelect],volAudio)
	  elseif IsButtonPressed(2,0) then
	    SoundStopStream()
	  end
	  if cvbSelect == 1 then
	    TextPrintString("MUSIC SELECTOR\n\n>"..cvbs[cvbSelect].."<\n"..cvbs[cvbSelect + 1].."\n"..cvbs[cvbSelect + 2].."\n"..cvbSelect,0,1)
	  elseif cvbSelect == table.getn(cvbs) then
	    TextPrintString("MUSIC SELECTOR\n\n"..cvbs[cvbSelect - 2].."\n"..cvbs[cvbSelect - 1].."\n>"..cvbs[cvbSelect].."<\n"..cvbSelect,0,1)
	  elseif not (cvbSelect == 1 or cvbSelect == table.getn(cvbs)) then
	    TextPrintString("MUSIC SELECTOR\n\n"..cvbs[cvbSelect - 1].."\n>"..cvbs[cvbSelect].."<\n"..cvbs[cvbSelect + 1].."\n"..cvbSelect,0,1)
	  end
	  if showText then
	    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[Exit ~LOOK_BACK~|Stop ~dup~|Select ~ddown~]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Speed()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
	  if IsButtonPressed(0,0) then
	    valueSpeed = valueSpeed - 1
	  elseif IsButtonPressed(1,0) then
	    valueSpeed = valueSpeed + 1
	  elseif IsButtonBeingPressed(3,0) then
	    local ped = GetTarget()
		GameSetPedStat(ped,20,valueSpeed)
	  end
	  if valueSpeed < 0 then
	    valueSpeed = 0
	  end
	  TextPrintString("SPEED SELECTOR\n\n<"..valueSpeed..">",0,1)
	  if showText then
	    TextPrintString("[Set On: "..GetName().."]\n[Set Value: ~dleft~ or ~dright~]\n[Exit ~LOOK_BACK~|~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Clothes()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
	if not PedIsModel(gPlayer,0) then
	  clothSelector = 1
	  PlayerSwapModel("player")
	end
    repeat
	  if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    cwSelect = cwSelect - 1
        if cwSelect < 1 then cwSelect = size(cws) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    cwSelect = cwSelect + 1
	    if cwSelect > size(cws) then cwSelect = 1 end
	  end
	  if IsButtonBeingPressed(3,0) and not PlayerIsInAnyVehicle() then
	    ClothingSetPlayer(cws[cwSelect].style,cws[cwSelect].model)
		ClothingBuildPlayer()
	  elseif IsButtonPressed(2,0) then
	    CameraSetXYZ(PlayerGetPosXYZ())
		ClothingGivePlayer(cws[cwSelect].model,cws[cwSelect].style)
	  elseif IsButtonBeingReleased(2,0) then
		CameraReturnToPlayer()
	  end
	  if cwSelect == 1 then
	    TextPrintString("CLOTH SELECTOR\n\n>"..cws[cwSelect].model.."<\n"..cws[cwSelect + 1].model.."\n"..cws[cwSelect + 2].model.."",0,1)
	  elseif cwSelect == table.getn(cws) then
	    TextPrintString("CLOTH SELECTOR\n\n"..cws[cwSelect - 2].model.."\n"..cws[cwSelect - 1].model.."\n>"..cws[cwSelect].model.."<",0,1)
	  elseif not (cwSelect == 1 or cwSelect == table.getn(cws)) then
	    TextPrintString("CLOTH SELECTOR\n\n"..cws[cwSelect - 1].model.."\n>"..cws[cwSelect].model.."<\n"..cws[cwSelect + 1].model.."",0,1)
	  end
	  if showText then
	    TextPrintString("[Number: "..cwSelect.."]\n[Navigate: ~dleft~ or ~dright~|~LOOK_BACK~ Exit]\n[Give ~dup~|~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
	if clothSelector == 1 then
	  clothSelector = 0
	  PlayerSwapModel(saveModel) -- Back up model
	  PedSetActionTree(gPlayer,"/Global/"..saveStyle,"Act/Anim/"..saveStyle..".act") -- Back up fighting style
	end
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Health()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
	  if IsButtonPressed(0,0) then
	    valueHealth = valueHealth - 1
	    if valueHealth < 0 then
	      valueHealth = 0
	    end
	  elseif IsButtonPressed(1,0) then
	    valueHealth = valueHealth + 1
	  elseif IsButtonBeingPressed(3,0) then
	    SoundPlay2D("ButtonUp")
		repeat
		  if IsButtonBeingPressed(0,0) then
			SoundPlay2D("NavUp")
			fors = fors - 1
			if fors < 1 then fors = size(to) end
		  elseif IsButtonBeingPressed(1,0) then
			SoundPlay2D("NavUp")
			fors = fors + 1
			if fors > size(to) then fors = 1 end
		  end
		  TextPrintString("HEALTH SELECTOR\n["..valueHealth.."]\n\nSet to: "..to[fors],0,1)
		  if showText then
		    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~ddown~ Select]",0,2)
		  end
		  Wait(0)
		until IsButtonBeingPressed(3,0)
		SoundPlay2D("ButtonUp")
		if fors == 1 then
		  PedSetHealth(gPlayer,valueHealth)
		elseif fors == 2 then
		  local ped = GetTarget()
		  PedSetHealth(ped,valueHealth)
		elseif fors == 3 then
		  for i,ped in {PedFindInAreaXYZ(0,0,0,999999)} do
		    if PedIsValid(ped) and not PedIsModel(ped,PlayerGetModelID()) and ped ~= gPlayer then
			  PedSetHealth(ped,valueHealth)
			end
		  end
		end
	  end
	  TextPrintString("HEALTH SELECTOR\n\n~dleft~<"..valueHealth..">~dright~",0,1)
	  if showText then
	    TextPrintString("[Set On: "..GetName().."]\n[Set Value: ~dleft~ or ~dright~]\n[Exit ~LOOK_BACK~|~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Area()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
      if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    cgSelect = cgSelect - 1
	    if cgSelect < 1 then cgSelect = size(cgs) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    cgSelect = cgSelect + 1
	    if cgSelect > size(cgs) then cgSelect = 1 end
	  elseif IsButtonBeingPressed(3,0) then
	    if cgs[cgSelect][5] == "CUSTOM PLACE" then
		  custom_place()
		else
	      AreaForceLoadAreaByAreaTransition(true)
		  AreaTransitionXYZ(cgs[cgSelect][1],cgs[cgSelect][2],cgs[cgSelect][3],cgs[cgSelect][4])
		  AreaForceLoadAreaByAreaTransition(false)
		end
	  end
	  if cgSelect == 1 then
	    TextPrintString("AREA SELECTOR\n\n:"..cgs[cgSelect][5]..":\n"..cgs[cgSelect + 1][5].."\n"..cgs[cgSelect + 2][5].."",0,1)
	  elseif cgSelect == table.getn(cgs) then
	    TextPrintString("AREA SELECTOR\n\n"..cgs[cgSelect - 2][5].."\n"..cgs[cgSelect - 1][5].."\n:"..cgs[cgSelect][5]..":",0,1)
	  elseif not (cgSelect == table.getn(cgs) or cgSelect == 1) then
	    TextPrintString("AREA SELECTOR\n\n"..cgs[cgSelect - 1][5].."\n:"..cgs[cgSelect][5]..":\n"..cgs[cgSelect + 1][5].."",0,1)
	  end
	  if showText then
	    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~LOOK_BACK~ Exiting the menu]\n[~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
	SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Prop()
  if not dead then
    S_SetupCore()
	S_SetupProp()
    SoundPlay2D("RightBtn")
    repeat
      if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    asSelect = asSelect - 1
	    if asSelect < 1 then asSelect = size(ass) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    asSelect = asSelect + 1
	    if asSelect > size(ass) then asSelect = 1 end
	  elseif IsButtonBeingPressed(3,0) then
	    Wait(100)
		if asSelect == 2 then
		  repeat
		    if IsButtonBeingPressed(0,0) or faster_select(0) then
			  SoundPlay2D("NavUp")
			  xfSelect = xfSelect - 1
			  if xfSelect < 1 then xfSelect = size(xfs) end
			elseif IsButtonBeingPressed(1,0) or faster_select(1) then
			  SoundPlay2D("NavUp")
			  xfSelect = xfSelect + 1
			  if xfSelect > size(xfs) then xfSelect = 1 end
			elseif IsButtonBeingPressed(3,0) and xfSelect ~= 7 then
			  local a,s,d = PlayerGetPosXYZ()
			  DeletePersistentEntity(PropForPlayer)
			  PropForPlayer = CreatePersistentEntity(xfs[xfSelect],a + 1,s + 1,d,0,AreaGetVisible())
			elseif IsButtonBeingPressed(3,0) and xfSelect == 7 then
			  local a,s,d = PlayerGetPosXYZ()
			  DeletePersistentEntity(PropForPlayer)
			  Turret = CreatePersistentEntity("WPTurret",a + 1,s + 1,d,0,AreaGetVisible())
			  PropForPlayer = CreatePersistentEntity(xfs[xfSelect],a + 1,s + 1,d + 0.75,0,AreaGetVisible())
			elseif IsButtonBeingPressed(2,0) then
			  DeletePersistentEntity(PropForPlayer)
			end
			if xfSelect == 1 then
			  TextPrintString("PROP SELECTOR\n2.Normal Prop\n\n>"..xfs[xfSelect].."<\n"..xfs[xfSelect + 1].."\n"..xfs[xfSelect + 2].."",0,1)
			elseif xfSelect == table.getn(xfs) then
			  TextPrintString("PROP SELECTOR\n2.Normal Prop\n\n"..xfs[xfSelect - 2].."\n"..xfs[xfSelect - 1].."\n>"..xfs[xfSelect].."<",0,1)
			elseif not (xfSelect == table.getn(xfs) or xfSelect == 1) then
			  TextPrintString("PROP SELECTOR\n2.Normal Prop\n\n"..xfs[xfSelect - 1].."\n>"..xfs[xfSelect].."<\n"..xfs[xfSelect + 1].."",0,1)
			end
			if showText then
			  TextPrintString("[Navigate: ~dleft~ or ~dright~|Delete ~dup~]\n[Exit ~LOOK_BACK~|~ddown~ Select]",0,2)
			end
			Wait(0)
		  until IsButtonBeingReleased(14,0)
		  SoundPlay2D("WrongBtn")
		  Wait(100)
		elseif asSelect == 1 then
		  repeat
		    if IsButtonBeingPressed(0,0) or faster_select(0) then
			  SoundPlay2D("NavUp")
			  xsSelect = xsSelect - 1
			  if xsSelect < 1 then xsSelect = size(xss) end
			elseif IsButtonBeingPressed(1,0) or faster_select(1) then
			  SoundPlay2D("NavUp")
			  xsSelect = xsSelect + 1
			  if xsSelect > size(xss) then xsSelect = 1 end
			end
			if IsButtonBeingPressed(3,0) then
			  Wait(100)
			  repeat
				if IsButtonBeingPressed(0,0) or faster_select(0) then
				  SoundPlay2D("NavUp")
				  uiSelect = uiSelect - 1
				  if uiSelect < 1 then uiSelect = size(uis) end
				elseif IsButtonBeingPressed(1,0) or faster_select(1) then
				  SoundPlay2D("NavUp")
				  uiSelect = uiSelect + 1
				  if uiSelect > size(uis) then uiSelect = 1 end
				end
				TextPrintString("PROP SELECTOR\n1.Special Prop\n["..xss[xsSelect][2].."]\n\n"..uis[uiSelect],0,1)
				TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~ddown~ Select]",0,2)
				Wait(0)
			  until IsButtonBeingPressed(3,0)
			  if uiSelect == 1 then
			    AreaLoadSpecialEntities(xss[xsSelect][1],true)
				AreaEnsureSpecialEntitiesAreCreated()
			  elseif uiSelect == 2 then
			    AreaLoadSpecialEntities(xss[xsSelect][1],false)
				AreaEnsureSpecialEntitiesAreCreated()
			  end
			end
			if xsSelect == 1 then
			  TextPrintString("PROP SELECTOR\n1.Special Prop\n\n>"..xss[xsSelect][2].."<\n"..xss[xsSelect + 1][2].."\n"..xss[xsSelect + 2][2].."",0,1)
			elseif xsSelect == table.getn(xss) then
			  TextPrintString("PROP SELECTOR\n1.Special Prop\n\n"..xss[xsSelect - 2][2].."\n"..xss[xsSelect - 1][2].."\n>"..xss[xsSelect][2].."<",0,1)
			elseif not (xsSelect == table.getn(xss) or xsSelect == 1) then
			  TextPrintString("PROP SELECTOR\n1.Special Prop\n\n"..xss[xsSelect - 1][2].."\n>"..xss[xsSelect][2].."<\n"..xss[xsSelect + 1][2].."",0,1)
			end
			if showText then
			  TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[Exit ~LOOK_BACK~|~ddown~ Select]",0,2)
			end
			Wait(0)
		  until IsButtonBeingReleased(14,0)
		  SoundPlay2D("WrongBtn")
		  Wait(100)
		end
	  end
	  if asSelect == 1 then
	    TextPrintString("PROP SELECTOR\n\n>"..ass[asSelect].."<\n"..ass[asSelect + 1],0,1)
	  elseif asSelect == 2 then
	    TextPrintString("PROP SELECTOR\n\n"..ass[asSelect - 1].."\n>"..ass[asSelect].."<",0,1)
	  end
	  if showText then
	    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[Exit ~LOOK_BACK~|~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Punishment()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
	repeat
	  if IsButtonBeingPressed(0,0) or faster_select(0) then
	    pun = pun - 1
		if pun < 1 then
		  pun = 1
		end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    pun = pun + 1
		if pun > table.getn(iz) then
		  pun = table.getn(iz)
		end
	  end
	  if IsButtonBeingPressed(3,0) then
	    Wait(100)
	    if pun == 1 then
		  SelectPunishment()
		elseif pun == 2 then
		  MinPunishment()
		elseif pun == 3 then
		  MaxPunishment()
		end
	  end
	  TextPrintString("PUNISHMENT SELECTOR\n\n"..iz[pun],0,1)
	  if showText then
	    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~ddown~ Select]",0,2)
	  end
	  Wait(0)
	until IsButtonBeingPressed(14,0)
	SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function MinPunishment()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
	  if IsButtonPressed(0,0) then
	    mipp = mipp - 1
		if mipp < 0 then
		  mipp = 0
		end
	  elseif IsButtonPressed(1,0) then
	    mipp = mipp + 1
		if mipp > 300 then
		  mipp = 300
		end
	  elseif IsButtonBeingPressed(3,0) then
	    SoundPlay2D("ButtonUp")
		minPoints = mipp
	  end
	  TextPrintString("MIN PUNISHMENT POINTS\n\n~dleft~<"..mipp..">~dright~",0,1)
	  if showText then
	    TextPrintString("[Set Value: ~dleft~ or ~dright~]\n[Exit ~LOOK_BACK~|~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	Wait(100)
  end
end

function MaxPunishment()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
	  if IsButtonPressed(0,0) then
	    mapp = mapp - 1
		if mapp < 0 then
		  mapp = 0
		end
	  elseif IsButtonPressed(1,0) then
	    mapp = mapp + 1
		if mapp > 300 then
		  mapp = 300
		end
	  elseif IsButtonBeingPressed(3,0) then
	    SoundPlay2D("ButtonUp")
		maxPoints = mapp
	  end
	  TextPrintString("MAX PUNISHMENT POINTS\n\n~dleft~<"..mapp..">~dright~",0,1)
	  if showText then
	    TextPrintString("[Set Value: ~dleft~ or ~dright~]\n[Exit ~LOOK_BACK~|~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	Wait(100)
  end
end
	
function SelectPunishment()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
	  if IsButtonPressed(0,0) then
	    playerPoint = playerPoint - 1
		if playerPoint < 0 then
		  playerPoint = 0
		end
	  elseif IsButtonPressed(1,0) then
	    playerPoint = playerPoint + 1
		if playerPoint > 300 then
		  playerPoint = 300
		end
	  elseif IsButtonBeingPressed(3,0) then
	    SoundPlay2D("ButtonUp")
		repeat
		  if IsButtonBeingPressed(0,0) then
			SoundPlay2D("NavUp")
			fors = fors - 1
			if fors < 1 then fors = size(to) end
		  elseif IsButtonBeingPressed(1,0) then
			SoundPlay2D("NavUp")
			fors = fors + 1
			if fors > size(to) then fors = 1 end
		  end
		  TextPrintString("SELECT PUNISHMENT POINTS\n["..playerPoint.."]\n\nSet to: "..to[fors],0,1)
		  if showText then
		    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~ddown~ Select]",0,2)
		  end
		  Wait(0)
		until IsButtonBeingPressed(3,0)
		SoundPlay2D("ButtonUp")
		if fors == 1 then
		  PedSetPunishmentPoints(gPlayer,playerPoint)
		elseif fors == 2 then
		  local ped = GetTarget()
		  PedSetPunishmentPoints(ped,playerPoint)
		elseif fors == 3 then
		  for i,ped in {PedFindInAreaXYZ(0,0,0,999999)} do
		    if PedIsValid(ped) and not PedIsModel(ped,PlayerGetModelID()) and ped ~= gPlayer then
			  PedSetPunishmentPoints(ped,playerPoint)
			end
		  end
		end
	  end
	  TextPrintString("SELECT PUNISHMENT POINTS\n\n~dleft~<"..playerPoint..">~dright~",0,1)
	  if showText then
	    TextPrintString("[Set Value: ~dleft~ or ~dright~]\n[Exit ~LOOK_BACK~|~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	Wait(100)
  end
end

function ATZ_Money()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
	local moneyXs = PedGetMoney(GetTarget())
    repeat
	  moneyXs = PedGetMoney(GetTarget())
      if IsButtonPressed(0,0) then
	    moneyXs = moneyXs - 1
	  elseif IsButtonPressed(1,0) then
	    moneyXs = moneyXs + 1
	  elseif IsButtonBeingPressed(3,0) then
	    PedSetMoney(GetTarget(),moneyXs)
	  end
	  TextPrintString("MONEY SELECTOR\n\n~dleft~<"..moneyXs..">~dleft~",0,1)
	  if showText then
	    TextPrintString("[Set To: "..GetName().."|Money: "..PedGetMoney(GetTarget()).."]\n[Set Value: ~dleft~ or ~dright~]\n[Exit ~LOOK_BACK~|~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Outfit()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
	if not PedIsModel(gPlayer,0) then
	  clothSelector = 1
	  PlayerSwapModel("player")
	end
    repeat
	  if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    cwrSelect = cwrSelect - 1
        if cwrSelect < 1 then cwrSelect = size(cwrs) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    cwrSelect = cwrSelect + 1
	    if cwrSelect > size(cwrs) then cwrSelect = 1 end
	  end
	  if IsButtonBeingPressed(3,0) and not PlayerIsInAnyVehicle() then
	    ClothingSetPlayerOutfit(cwrs[cwrSelect][1])
		ClothingBuildPlayer()
	  elseif IsButtonBeingPressed(3,0) and PlayerIsInAnyVehicle() then
	    TextPrintString("OUTFIT SELECTOR\n\nYou can't change clothes in vehicle",3,1)
		Wait(math.random(3000))
	  end
	  if IsButtonBeingPressed(2,0) then
	    ClothingGivePlayerOutfit(cwrs[cwrSelect][1])
	  end
	  if cwrSelect == 1 then
	    TextPrintString("OUTFIT SELECTOR\n\n>"..cwrs[cwrSelect][2].."<\n"..cwrs[cwrSelect + 1][2].."\n"..cwrs[cwrSelect + 2][2].."",0,1)
	  elseif cwrSelect == table.getn(cwrs) then
	    TextPrintString("OUTFIT SELECTOR\n\n"..cwrs[cwrSelect - 2][2].."\n"..cwrs[cwrSelect - 1][2].."\n>"..cwrs[cwrSelect][2].."<",0,1)
	  elseif not (cwrSelect == 1 or cwrSelect == table.getn(cwrs)) then
	    TextPrintString("OUTFIT SELECTOR\n\n"..cwrs[cwrSelect - 1][2].."\n>"..cwrs[cwrSelect][2].."<\n"..cwrs[cwrSelect + 1][2].."",0,1)
	  end
	  if showText then
	    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~LOOK_BACK~ Exiting the menu]\n[Give ~dup~|~ddown~ Set]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	if clothSelector == 1 then
	  clothSelector = 0
	  PlayerSwapModel(saveModel) -- Back up model
	  PedSetActionTree(gPlayer,"/Global/"..saveStyle,"Act/Anim/"..saveStyle..".act") -- Back up fighting style
	end
	F_AutoTextPrint()
  end
end

function ATZ_Hair()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
	if not PedIsModel(gPlayer,0) then
	  clothSelector = 1
	  PlayerSwapModel("player")
	end
    repeat
	  if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    frSelect = frSelect - 1
        if frSelect < 1 then frSelect = size(frs) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    frSelect = frSelect + 1
	    if frSelect > size(frs) then frSelect = 1 end
	  end
	  if IsButtonBeingPressed(3,0) then
	    ClothingSetPlayersHair(frs[frSelect])
		ClothingBuildPlayer()
	  end
	  if frSelect == 1 then
	    TextPrintString("HAIR SELECTOR\n\n>"..frs[frSelect].."<\n"..frs[frSelect + 1].."\n"..frs[frSelect + 2].."",0,1)
	  elseif frSelect == table.getn(frs) then
	    TextPrintString("HAIR SELECTOR\n\n"..frs[frSelect - 2].."\n"..frs[frSelect - 1].."\n>"..frs[frSelect].."<",0,1)
	  elseif not (frSelect == 1 or frSelect == table.getn(frs)) then
	    TextPrintString("HAIR SELECTOR\n\n"..frs[frSelect - 1].."\n>"..frs[frSelect].."<\n"..frs[frSelect + 1].."",0,1)
	  end
	  if showText then
	    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~LOOK_BACK~ Exiting the menu]\n[~ddown~ Play]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	if clothSelector == 1 then
	  clothSelector = 0
	  PlayerSwapModel(saveModel) -- Back up model
	  PedSetActionTree(gPlayer,"/Global/"..saveStyle,"Act/Anim/"..saveStyle..".act") -- Back up fighting style
	end
	F_AutoTextPrint()
  end
end

function ATZ_Class()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
	  if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    frtSelect = frtSelect - 1
        if frtSelect < 1 then frtSelect = size(frts) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    frtSelect = frtSelect + 1
	    if frtSelect > size(frts) then frtSelect = 1 end
	  end
	  if IsButtonBeingPressed(3,0) then
	    SoundPlay2D("ButtonDown")
		Wait(100)
		repeat
		  if IsButtonBeingPressed(0,0) or faster_select(0) then
			SoundPlay2D("NavUp")
			vdSelect = vdSelect - 1
			if vdSelect < 1 then vdSelect = size(vds) end
		  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
			SoundPlay2D("NavUp")
			vdSelect = vdSelect + 1
			if vdSelect > 3 then vdSelect = 1 end
		  end
		  TextPrintString("CLASS SELECTOR\n"..frts[frtSelect][2].."\n\n>"..vds[vdSelect].."<",0,1)
		  if showText then
		    TextPrintString("[~ddown~ Select]\n[Navigate ~dleft~ or ~dright~]",0,2)
		  end
		  Wait(0)
		until IsButtonBeingPressed(3,0) or IsButtonBeingPressed(14,0)
		if IsButtonBeingPressed(3,0) then
		  if vdSelect == 1 then
		    if type(frts[frtSelect][1]) == "string" then
		      ForceStartMission(frts[frtSelect][1])
			else
	          ForceStartMissionIndex(frts[frtSelect][1])
		    end
	      elseif vdSelect == 2 then
		    if IsMissionAvailable(frts[frtSelect][1]) then
			else
	          ForceMissionAvailable(frts[frtSelect][1])
			end
		  elseif vdSelect == 3 then
		    MissionForceCompleted(frts[frtSelect][1])
		  end
		elseif IsButtonBeingPressed(14,0) then
		  Wait(100)
	    end
	  end
	  if frtSelect == 1 then
	    TextPrintString("CLASS SELECTOR\n\n>"..frts[frtSelect][2].."<\n"..frts[frtSelect + 1][2].."\n"..frts[frtSelect + 2][2].."",0,1)
	  elseif frtSelect == table.getn(frts) then
	    TextPrintString("CLASS SELECTOR\n\n"..frts[frtSelect - 2][2].."\n"..frts[frtSelect - 1][2].."\n>"..frts[frtSelect][2].."<",0,1)
	  elseif not (frtSelect == table.getn(frts) or frtSelect == 1) then
	    TextPrintString("CLASS SELECTOR\n\n"..frts[frtSelect - 1][2].."\n>"..frts[frtSelect][2].."<\n"..frts[frtSelect + 1][2].."",0,1)
	  end
	  if showText then
	    TextPrintString("[Number: "..frtSelect.."]\n[Navigate: ~dleft~ or ~dright~|~LOOK_BACK~ Exit]\n[~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Grade()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
	  if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    zaSelect = zaSelect - 1
        if zaSelect < 1 then zaSelect = size(zas) end
		classGrade = 1
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    zaSelect = zaSelect + 1
	    if zaSelect > size(zas) then zaSelect = 1 end
		classGrade = 1
	  end
	  if IsButtonBeingPressed(3,0) then
	    SoundPlay2D("ButtonUp")
		Wait(100)
		repeat
		  if IsButtonBeingPressed(1,0) or faster_select(1) then
			classGrade = classGrade + 1
			if classGrade > 5 then
			  classGrade = 5
			end
		  elseif IsButtonBeingPressed(0,0) or faster_select(0) then
			classGrade = classGrade - 1
			if classGrade < 0 then
			  classGrade = 0
			end
		  end
		  TextPrintString("GRADE SELECTOR\nClass: "..zas[zaSelect][2].."\n\nGrade: "..classGrade,0,1)
		  if showText then
		    TextPrintString("[~ddown~ Select]\n[Navigate ~dleft~ or ~dright~]",0,2)
		  end
		  Wait(0)
		until IsButtonBeingPressed(3,0)
	    PlayerSetGrade(zas[zaSelect][1],classGrade)
		classGrade = 1
	  end
	  TextPrintString("GRADE SELECTOR\n\n>"..zaSelect.."."..zas[zaSelect][2].."<",0,1)
	  if showText then
	    TextPrintString("[Navigate ~dleft~ or ~dright~|~LOOK_BACK~ Exit]\n[~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Ped()
  if not dead then
    S_SetupCore()
	SoundPlay2D("RightBtn")
    repeat
	  if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    pedSelect = pedSelect - 1
        if pedSelect < 1 then pedSelect = size(peds) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    pedSelect = pedSelect + 1
	    if pedSelect > size(peds) then pedSelect = 1 end
	  end
	  if IsButtonBeingPressed(3,0) then
	    SoundPlay2D("ButtonUp")
		Wait(100)
		repeat
		  if IsButtonBeingPressed(0,0) or faster_select(0) then
			fgSelect = fgSelect - 1
			if fgSelect < 1 then fgSelect = size(fgs) end
		  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
			fgSelect = fgSelect + 1
			if fgSelect > size(fgs) then fgSelect = 1 end
		  end
		  TextPrintString("PED SELECTOR\n\nPed Is Your:\n"..fgs[fgSelect].name,0,1)
		  if showText then
		    TextPrintString("[~ddown~ Select]\n[Navigate ~dleft~ or ~dright~]",0,2)
		  end
		  Wait(0)
		until IsButtonBeingPressed(3,0)
		x,y,z = PlayerGetPosXYZ()
		create_custom_ped(x,y,z)
	  elseif IsButtonBeingPressed(3,0) and createPed == 18 then
	    TextPrintString("MAXIMUM OF PED COUNT",2,1)
		Wait(2000)
      elseif IsButtonBeingPressed(2,0) then
	    if PedIsValid(fPlayer2) then
	      PedDelete(fPlayer2)
		end
		if PedIsValid(fPlayer3) then
		  PedDelete(fPlayer3)
		end
		if PedIsValid(fPlayer4) then
		  PedDelete(fPlayer4)
		end
		if PedIsValid(fPlayer5) then
		  PedDelete(fPlayer5)
		end
		if PedIsValid(fPlayer6) then
		  PedDelete(fPlayer6)
		end
		if PedIsValid(fPlayer7) then
		  PedDelete(fPlayer7)
		end
		if PedIsValid(fPlayer8) then
		  PedDelete(fPlayer8)
		end
		if PedIsValid(fPlayer9) then
		  PedDelete(fPlayer9)
		end
		if PedIsValid(fPlayer10) then
		  PedDelete(fPlayer10)
		end
		if PedIsValid(fPlayer11) then
		  PedDelete(fPlayer11)
		end
		if PedIsValid(fPlayer12) then
	      PedDelete(fPlayer12)
		end
		if PedIsValid(fPlayer13) then
		  PedDelete(fPlayer13)
		end
		if PedIsValid(fPlayer14) then
		  PedDelete(fPlayer14)
		end
		if PedIsValid(fPlayer15) then
		  PedDelete(fPlayer15)
		end
		if PedIsValid(fPlayer16) then
		  PedDelete(fPlayer16)
		end
		if PedIsValid(fPlayer17) then
		  PedDelete(fPlayer17)
		end
		if PedIsValid(fPlayer18) then
		  PedDelete(fPlayer18)
		end
		if PedIsValid(fPlayer19) then
		  PedDelete(fPlayer19)
		end
		if PedIsValid(fPlayer20) then
		  PedDelete(fPlayer20)
		end
		if PedIsValid(fPlayer21) then
		  PedDelete(fPlayer21)
		end
		createPed = 0
	  end
	  if pedSelect == 1 then
	    TextPrintString("PED SELECTOR\n\n:"..peds[pedSelect].name..":\n"..peds[pedSelect + 1].name.."\n"..peds[pedSelect + 2].name.."",1,1)
	  elseif pedSelect == table.getn(peds) then
	    TextPrintString("PED SELECTOR\n\n"..peds[pedSelect - 2].name.."\n"..peds[pedSelect - 1].name.."\n:"..peds[pedSelect].name..":",1,1)
	  elseif not (pedSelect == 1 or pedSelect == table.getn(peds)) then
	    TextPrintString("PED SELECTOR\n\n"..peds[pedSelect - 1].name.."\n:"..peds[pedSelect].name..":\n"..peds[pedSelect + 1].name.."",1,1)
	  end
	  if showText then
	    TextPrintString("[Number: "..pedSelect.."]\n[Navigate: ~dleft~ or ~dright~|Exit ~LOOK_BACK~]\n[Delete All ~dup~|~ddown~ Select]",1,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Effect()
  if not dead then
    S_SetupCore()
    SoundPlay2D("RightBtn")
    repeat
	  if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    gySelect = gySelect - 1
        if gySelect < 1 then gySelect = size(gys) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    gySelect = gySelect + 1
	    if gySelect > size(gys) then gySelect = 1 end
	  end
	  if IsButtonBeingPressed(3,0) then
	    local x,y,z = PlayerGetPosXYZ()
	    na = EffectCreate(gys[gySelect][1],x - 2,y - 2,z)
		table.insert(effect,na)
	  elseif IsButtonBeingPressed(2,0) then
	    for i = 1,table.getn(effect) do
		  EffectKill(effect[i])
		  while IsButtonBeingPressed(-1,0) do
		    Wait(0)
		  end
		  table.remove(effect,i)
		end
	  end
	  if gySelect == 1 then
	    TextPrintString("EFFECT SELECTOR\n\n:"..gys[gySelect][2]..":\n"..gys[gySelect + 1][2].."\n"..gys[gySelect + 2][2].."",1,1)
	  elseif gySelect == table.getn(gys) then
	    TextPrintString("EFFECT SELECTOR\n\n"..gys[gySelect - 2][2].."\n"..gys[gySelect - 1][2].."\n:"..gys[gySelect][2]..":",1,1)
	  elseif not (gySelect == 1 or gySelect == table.getn(gys)) then
	    TextPrintString("EFFECT SELECTOR\n\n"..gys[gySelect - 1][2].."\n:"..gys[gySelect][2]..":\n"..gys[gySelect + 1][2].."",1,1)
	  end
	  if showText then
	    TextPrintString("[Navigate ~dleft~ or ~dright~|~LOOK_BACK~ Exit]\n[~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Anim()
  if not dead then
    S_SetupAnim()
	S_SetupAnimMenu()
    SoundPlay2D("RightBtn")
    repeat
	  if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    bnSelect = bnSelect - 1
        if bnSelect < 1 then bnSelect = size(bns) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    bnSelect = bnSelect + 1
	    if bnSelect > size(bns) then bnSelect = 1 end
	  end
	  if IsButtonBeingPressed(3,0) then
	    SoundPlay2D("ButtonUp")
		WaitUntil(3,0)
		repeat
		  if IsButtonBeingPressed(0,0) or faster_select(0) then
			SoundPlay2D("NavUp")
			sivs = sivs - 1
			if sivs < 1 then sivs = size(siv) end
		  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
			SoundPlay2D("NavUp")
			sivs = sivs + 1
			if sivs > size(siv) then sivs = 1 end
		  end
		  TextPrintString("ANIM SELECTOR\n\n"..siv[sivs],0,1)
		  if showText then
		    TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~ddown~ Select]",0,2)
		  end
		  Wait(0)
		until IsButtonBeingPressed(3,0)
		SoundPlay2D("ButtonUp")
		if sivs == 1 then
		  if PedIsValid(PedGetTargetPed(gPlayer)) then
		    PedSetActionNode(PedGetTargetPed(gPlayer),bns[bnSelect][2],bns[bnSelect][3])
		  else
		    PedSetActionNode(gPlayer,bns[bnSelect][2],bns[bnSelect][3])
		  end
		elseif sivs == 2 then
		  for i,p in {PedFindInAreaXYZ(0,0,0,999999)} do
		    if PedIsValid(ped) and ped ~= gPlayer then
		      PedSetActionNode(p,bns[bnSelect][2],bns[bnSelect][3])
			end
		  end
		elseif sivs == 3 then
		  WaitUntil(3,0)
		  local radius = 3
		  SoundPlay2D("ButtonUp")
		  repeat
		    if IsButtonBeingPressed(1,0) then
			  radius = radius + 1
			elseif IsButtonBeingPressed(0,0) then
			  radius = radius - 1
			  if radius < 1 then radius = 1 end
			end
			TextPrintString("Radius: "..radius,0,1)
			Wait(0)
		  until br(3,0)
		  table.insert(nearPlayerEffect,{bns[bnSelect][2],bns[bnSelect][3],radius})
		  NearPlayer = true
		  TextPrintString("ANIM SELECTOR\n\nAdding range effect..",3,1)
		  Wait(math.random(500,3000))
		  SoundPlay2D("ButtonUp")
		end
	  end
	  if IsButtonBeingPressed(2,0) then
	    for o = 1,table.getn(nearPlayerEffect) do
		  table.remove(nearPlayerEffect,o)
		end
		TextPrintString("ANIM SELECTOR\n\nDeleting range effect..",3,1)
		NearPlayer = false
		Wait(math.random(500,3000))
	  end
	  if bnSelect == 1 then
	    TextPrintString("ANIM SELECTOR\n\n:"..bns[bnSelect][1]..":\n"..bns[bnSelect + 1][1].."\n"..bns[bnSelect + 2][1].."",1,1)
	  elseif bnSelect == table.getn(bns) then
	    TextPrintString("ANIM SELECTOR\n\n"..bns[bnSelect - 2][1].."\n"..bns[bnSelect - 1][1].."\n:"..bns[bnSelect][1]..":",1,1)
	  elseif not (bnSelect == 1 or bnSelect == table.getn(bns)) then
	    TextPrintString("ANIM SELECTOR\n\n"..bns[bnSelect - 1][1].."\n:"..bns[bnSelect][1]..":\n"..bns[bnSelect + 1][1].."",1,1)
	  end
	  if showText then
	    TextPrintString("[Navigate ~dleft~ or ~dright~|~LOOK_BACK~ Exit]\n[~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Strafe()
  if not dead then
    S_SetupStrafe()
    SoundPlay2D("RightBtn")
    repeat
	  if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    st = st - 1
        if st < 1 then st = size(sts) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    st = st + 1
	    if st > size(sts) then st = 1 end
	  end
	  if IsButtonBeingPressed(3,0) then
	    SoundPlay2D("ButtonUp")
		Wait(100)
		local selectFinished = false
		if not (GrappleAnim() or MountAttack()) then
		  StrafeSelection()
		elseif GrappleAnim() then
		  grabAnim,grabAct = sts[st][2],sts[st][3]
		  TextPrintString("STRAFE SELECTOR\n\nAdding to Grapple moves",3,1)
		  Wait(math.random(500,3000))
		elseif MountAttack() then
		  mountAnim,mountAct = sts[st][2],sts[st][3]
		  TextPrintString("STRAFE SELECTOR\n\nAdding to Mount attack",3,1)
		  Wait(math.random(500,3000))
		end
	  end
	  if IsButtonBeingPressed(2,0) then
	    for slb = 1,table.getn(strafe) do
	      table.remove(strafe,slb)
		end
		for sld = 1,table.getn(strafeAnim) do
		  table.remove(strafeAnim,sld)
		end
		grabAnim,grabAct = "nil","nil"
		mountAnim,mountAct = "nil","nil"
		table.insert(strafe,{anim = "nil",act = "nil",button = nil})
		table.insert(strafeAnim,{anim = "nil",act = "nil",playing = "nil",mode = "replace",button = "nil",id = "nil"})
		TextPrintString("STRAFE SELECTOR\n\nDeleting stored anim",3,1)
		Wait(math.random(500,3000))
	  end
	  if st == 1 then
	    TextPrintString("STRAFE SELECTOR\n\n:"..sts[st][1]..":\n"..sts[st + 1][1].."\n"..sts[st + 2][1].."",1,1)
	  elseif st == table.getn(sts) then
	    TextPrintString("STRAFE SELECTOR\n\n"..sts[st - 2][1].."\n"..sts[st - 1][1].."\n:"..sts[st][1]..":",1,1)
	  elseif not (st == 1 or st == table.getn(sts)) then
	    TextPrintString("STRAFE SELECTOR\n\n"..sts[st - 1][1].."\n:"..sts[st][1]..":\n"..sts[st + 1][1].."",1,1)
	  end
	  if showText then
	    TextPrintString("[Navigate ~dleft~ or ~dright~|~LOOK_BACK~ Exit]\n[~dup~ Clear|~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Speech()
  if not dead then
    S_SetupSpeech()
    SoundPlay2D("RightBtn")
    repeat
    if IsButtonBeingPressed(0,0) then
	  SoundPlay2D("NavUp")
	  speechSelect = speechSelect - 1
	  if speechSelect < 1 then speechSelect = size(speech) end
	elseif IsButtonBeingPressed(1,0) then
	  SoundPlay2D("NavUp")
	  speechSelect = speechSelect + 1
	  if speechSelect > size(speech) then speechSelect = 1 end
    elseif IsButtonPressed(0,0) and IsButtonPressed(7,0) then
	  SoundPlay2D("ButtonUp")
	  speechSelect = speechSelect - 1
	  if speechSelect < 1 then speechSelect = size(speech) end
	elseif IsButtonPressed(1,0) and IsButtonPressed(7,0) then
	  SoundPlay2D("ButtonDown")
	  speechSelect = speechSelect + 1
	  if speechSelect > size(speech) then speechSelect = 1 end
	elseif IsButtonBeingPressed(3,0) then
	  local ped = GetTarget()
	  SoundStopCurrentSpeechEvent(ped)
	  SoundPlayAmbientSpeechEvent(ped,speech[speechSelect])
	end
	  if speechSelect == 1 then
	    TextPrintString("SPEECH SELECTOR\n\n:"..speech[speechSelect]..":\n"..speech[speechSelect + 1].."\n"..speech[speechSelect + 2].."",1,1)
	  elseif speechSelect == table.getn(speech) then
	    TextPrintString("SPEECH SELECTOR\n\n"..speech[speechSelect - 2].."\n"..speech[speechSelect - 1].."\n:"..speech[speechSelect]..":",1,1)
	  elseif not (speechSelect == 1 or speechSelect == table.getn(speech)) then
	    TextPrintString("SPEECH SELECTOR\n\n"..speech[speechSelect - 1].."\n:"..speech[speechSelect]..":\n"..speech[speechSelect + 1].."",1,1)
	  end
	  if showText then
	    TextPrintString("[Navigate ~dleft~ or ~dright~|~LOOK_BACK~ Exit]\n[SetOn: "..GetName().."]\n[~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Cuts()
  if not dead then
    S_SetupCutscene()
    SoundPlay2D("RightBtn")
    repeat
    if IsButtonBeingPressed(0,0) then
	  SoundPlay2D("NavUp")
	  cut = cut - 1
	  if cut < 1 then cut = table.getn(cuts) end
	elseif IsButtonBeingPressed(1,0) then
	  SoundPlay2D("NavUp")
	  cut = cut + 1
	  if cut > table.getn(cuts) then cut = 1 end
    elseif IsButtonPressed(0,0) and IsButtonPressed(7,0) then
	  SoundPlay2D("ButtonDown")
	  cut = cut - 1
	  if cut < 1 then cut = table.getn(cuts) end
	elseif IsButtonPressed(1,0) and IsButtonPressed(7,0) then
	  SoundPlay2D("ButtonUp")
	  cut = cut + 1
	  if cut > table.getn(cuts) then cut = 1 end
	elseif IsButtonBeingPressed(3,0) then
	  PlayCutsceneWithLoad(cuts[cut])
	end
	  if cut == 1 then
	    TextPrintString("CUTSCENE SELECTOR\n\n:"..cuts[cut]..":\n"..cuts[cut + 1].."\n"..cuts[cut + 2].."",1,1)
	  elseif cut == table.getn(cuts) then
	    TextPrintString("CUTSCENE SELECTOR\n\n"..cuts[cut - 2].."\n"..cuts[cut - 1].."\n:"..cuts[cut]..":",1,1)
	  elseif not (cut == 1 or cut == table.getn(cuts)) then
	    TextPrintString("CUTSCENE SELECTOR\n\n"..cuts[cut - 1].."\n:"..cuts[cut]..":\n"..cuts[cut + 1].."",1,1)
	  end
	  if showText then
	    TextPrintString("[Navigate ~dleft~ or ~dright~|~LOOK_BACK~ Exit]\n[~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Items()
  if not dead then
    S_SetupItem()
    SoundPlay2D("RightBtn")
    repeat
      if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    it = it - 1
	    if it < 1 then it = table.getn(its) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    it = it + 1
	    if it > table.getn(its) then it = 1 end
	  end
	  if IsButtonBeingPressed(3,0) then
	    ItemSetCurrentNum(its[it][1],ItemGetCurrentNum(its[it][1]) + 1)
		print("***Ready Use***")
	  end
	  if it == 1 then
	    TextPrintString("ITEM SELECTOR\n\n:"..its[it][2]..":\n"..its[it + 1][2].."\n"..its[it + 2][2].."",1,1)
	  elseif it == table.getn(its) then
	    TextPrintString("ITEM SELECTOR\n\n"..its[it - 2][2].."\n"..its[it - 1][2].."\n:"..its[it][2]..":",1,1)
	  elseif not (it == 1 or it == table.getn(its)) then
	    TextPrintString("ITEM SELECTOR\n\n"..its[it - 1][2].."\n:"..its[it][2]..":\n"..its[it + 1][2].."",1,1)
	  end
	  if showText then
	    TextPrintString("[Navigate ~dleft~ or ~dright~|~LOOK_BACK~ Exit]\n[~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
    SoundPlay2D("WrongBtn")
	F_AutoTextPrint()
  end
end

function ATZ_Factions()
  if not dead then
    fac = {
	  "1.Prefects",
	  "2.Nerds",
	  "3.Jocks",
	  "4.Drop out",
	  "5.Greasers",
	  "6.Prep",
	  "7.Students",
	  "8.Police",
	  "9.Teacher",
	  "10.Adult",
	  "11.Shop keeper",
	  "12.Bullies",
	  "13.Dogs",
	  "14.Player",
	}
    SoundPlay2D("RightBtn")
    repeat
      if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    fas = fas - 1
	    if fas < 1 then fas = size(fac) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    fas = fas + 1
	    if fas > size(fac) then fas = 1 end
	  elseif IsButtonBeingPressed(3,0) then
	    SoundPlay2D("ButtonUp")
		repeat
		  if IsButtonBeingPressed(0,0) or faster_select(0) then
			SoundPlay2D("NavUp")
			fors = fors - 1
			if fors < 1 then fors = size(to) end
		  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
			SoundPlay2D("NavUp")
			fors = fors + 1
			if fors > size(to) then fors = 1 end
		  end
		  TextPrintString("FACTION SELECTOR\n["..fac[fas].."]\n\nSet to: "..to[fors],0,1)
		  TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[~ddown~ Select]",0,2)
		  Wait(0)
		until IsButtonBeingPressed(3,0)
		SoundPlay2D("ButtonUp")
		if fors == 1 then
	      PedSetFaction(gPlayer,fas - 1)
		elseif fors == 2 then
		  local ped = GetTarget()
	      PedSetFaction(ped,fas - 1)
		elseif fors == 3 then
		  for i,ped in {PedFindInAreaXYZ(0,0,0,999999)} do
		    if PedIsValid(ped) and ped ~= gPlayer then
			  PedSetFaction(ped,fas - 1)
			end
		  end
		end
	  end
	  if fas == 1 then
	    TextPrintString("FACTION SELECTOR\n\n>"..fac[fas].."<\n"..fac[fas + 1].."\n"..fac[fas + 2].."",0,1)
	  elseif fas == table.getn(fac) then
	    TextPrintString("FACTION SELECTOR\n\n"..fac[fas - 2].."\n"..fac[fas - 1].."\n>"..fac[fas].."<",0,1)
	  elseif not (fas == table.getn(fac) or fas == 1) then
	    TextPrintString("FACTION SELECTOR\n\n"..fac[fas - 1].."\n>"..fac[fas].."<\n"..fac[fas + 1].."",0,1)
	  end
	  if showText then
	    TextPrintString("[Current Faction: "..PedGetFaction(gPlayer).."]\n[Navigate: ~dleft~ or ~dright~]\n[Exit ~LOOK_BACK~|~ddown~ Select]",0,2)
	  end
	  Wait(0)
    until IsButtonBeingReleased(14,0)
	SoundPlay2D("WrongBtn")
  end
end

function FactionEditor()
  Wait(100)
  SoundPlay2D("RightBtn")
  fac = {
	"1.Prefects",
	"2.Nerds",
	"3.Jocks",
	"4.Drop out",
	"5.Greasers",
	"6.Prep",
	"7.Students",
	"8.Police",
	"9.Teacher",
	"10.Adult",
	"11.Shop keeper",
	"12.Bullies",
	"13.Dogs",
  }
  S_SetupPedFinder()
  local mse = 1
  local f = 1
  local showText = true
  repeat
    if IsButtonBeingPressed(0,0) or faster_select(0) then
	  SoundPlay2D("NavUp")
	  f = f - 1
	  if f < 1 then f = table.getn(fac) end
	elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	  SoundPlay2D("NavUp")
	  f = f + 1
	  if f > table.getn(fac) then f = 1 end
	elseif IsButtonBeingPressed(3,0) then
	  SoundPlay2D("ButtonUp")
	  Wait(100)
	  local menuTable = {
	    "1.Ped Model",
		"2.Fighting Style",
	  }
	  local menuTableSelect = 1
	  repeat
	    if ibbp(0,0) then
		  menuTableSelect = 1
		elseif ibbp(1,0) then
		  menuTableSelect = 2
		end
		if ibbp(3,0) then
		  SoundPlay2D("ButtonUp")
		  if menuTableSelect == 1 then
		    if f == 3 or f == 2 or f == 4 or f == 5 or f == 6 or f == 12 then
		      local facModel = {
			    {"Bullies","DOlead_Russell","GN_Bully03","GN_Bully02","GN_Bully01","GN_Bully04","GN_Bully05","GN_Bully06","nil","nil","nil","nil"},
			    {"Nerds","NDLead_Earnest","NDH2a_Cornelius","NDH3_Bucky","NDGirl_Beatrice","ND2nd_Melvin ","NDH1_Fatty","NDH1a_Algernon","nil","nil","nil","nil"},
			    {"Greasers","GRlead_Johnny","GRH2A_Hal","GRH1_Lefty","GRH1a_Vance","GRH3a_Ricky","GRH2_Norton","GRGirl_Lola","nil","nil","nil","nil"},
			    {"Prepies","PRlead_Darby","PRH2a_Chad","PRGirl_Pinky","PRH1a_Tad","PRH3a_Parker","PRH2_Bryce","PR2nd_Bif","nil","nil","nil","nil"},
		        {"Jocks","JKlead_Ted","JK2nd_Juri","JKH1_Damon","JKH3_Casey","JKH2a_Luis","JKGirl_Mandy","JKH1a_Kirby","nil","nil","nil","nil"},
		        {"Dropouts","DOLead_Edgar","DOH2_Jerry","DOH1a_Otto","DOGirl_Zoe","DOH1_Duncan","DOH3_Henry","DOH3a_Gurney","nil","nil","nil","nil"},
			  }
			  local sop = 1
			  Wait(100)
		      repeat
			    if ibbp(0,0) or faster_select(0) then
			      sop = sop - 1
				  if sop < 1 then sop = table.getn(facModel) end
			    elseif ibbp(1,0) or faster_select(1) then
			      sop = sop + 1
				  if sop > table.getn(facModel) then sop = 1 end
			    end
			    if ibbp(3,0) then
			      SoundPlay2D("ButtonUp")
				  local v = facModel[sop]
			      table.insert(DetectFaction,{faction = f - 1})
				  table.insert(FactionModel,{facModel[sop][11],facModel[sop][2],facModel[sop][3],facModel[sop][4],facModel[sop][5],facModel[sop][6],facModel[sop][7],facModel[sop][8],facModel[sop][9],facModel[sop][10]})
				  TextPrintString("FACTION EDITOR\n\nChanging Model",3,1)
				  Wait(math.random(500,3000))
			    end
			    TextPrintString("FACTION EDITOR\n"..fac[f].."\n"..menuTable[menuTableSelect].."\n\n> "..facModel[sop][1].." <",0,1)
			    Wait(0)
			  until ibbp(14,0)
			  SoundPlay2D("ButtonUp")
			  Wait(100)
			else
			  TextPrintString("Sorry, this menu only work to Bullies, Nerds, Greasers, Prepies, Jocks, and Dropouts faction",3,1)
			  Wait(3000)
			end
		  else
		    local fs = {
			  "DEFAULT",
			  "DO_Edgar",
			  "DO_Striker_A",
			  "Russell_102",
			  "B_Striker_A",
			  "BOSS_Darby",
			  "P_Striker_A",
			  "G_Johnny",
			  "G_Striker_A",
			  "J_Ted",
			  "J_Striker_A",
			  "N_Earnest",
			  "N_Striker_A",
			  "Crazy_Basic",
			  "GS_Male_A",
			  "Authority",
			  "Nemesis",
			  "GS_Female_A",
			  "Hobo_Blocker",
			}
			local FSS = 1
			Wait(100)
		    repeat
			  if ibbp(0,0) or faster_select(0) then
			    FSS = FSS - 1
				if FSS < 1 then FSS = table.getn(fs) end
			  elseif ibbp(1,0) or faster_select(1) then
			    FSS = FSS + 1
				if FSS > table.getn(fs) then FSS = 1 end
			  end
			  if ibbp(3,0) then
			    SoundPlay2D("ButtonUp")
			    table.insert(replaceStyle,{faction = f - 1,style = fs[FSS]})
				TextPrintString("FACTION EDITOR\n\nChanging Style",3,1)
				--Wait(math.random(500,3000))
			  end
			  TextPrintString("FACTION EDITOR\n"..fac[f].."\n"..menuTable[menuTableSelect].."\n\n> "..fs[FSS].." <",0,1)
			  Wait(0)
			until ibbp(14,0)
			SoundPlay2D("ButtonUp")
			Wait(100)
		  end
		end
		TextPrintString("FACTION EDITOR\n"..fac[f].."\n\n> "..menuTable[menuTableSelect].." <",0,1)
		Wait(0)
	  until ibbp(14,0)
	  SoundPlay2D("ButtonUp")
	  Wait(100)
	elseif ibbp(2,0) then
	  for n = 1,table.getn(replaceStyle) do
	    table.remove(replaceStyle,n)
	  end
	  for n = 1,table.getn(FactionModel) do
	    table.remove(FactionModel,n)
	  end
	  table.insert(replaceStyle,{faction = nil,style = "nil"})
	  TextPrintString("FACTION EDITOR\n\nDeleting storage..",3,1)
	  Wait(math.random(500,3000))
	end
	TextPrintString("FACTION EDITOR\n\n> "..fac[f].." <",1,1)
	if showText then
	  TextPrintString("[Navigate ~dleft~ or ~dright~|~LOOK_BACK~ Exit]\n[~ddown~ Select]",0,2)
	end
	Wait(0)
  until IsButtonBeingReleased(14,0)
  SoundPlay2D("WrongBtn")
  Wait(100)
end

function MovementStyle()
  S_SetupMovement()
  if not dead then
    repeat
      if IsButtonBeingPressed(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
	    ms = ms - 1
	    if ms < 1 then ms = table.getn(smo) end
	  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    ms = ms + 1
	    if ms > table.getn(smo) then ms = 1 end
	  elseif IsButtonBeingPressed(3,0) then
	    SoundPlay2D("ButtonUp")
		--PedSetActionTree(gPlayer,"/Global/Player","Act/Player.act")
		--PedSetActionTree(gPlayer,"/Global/"..smo[ms],"Act/Anim/"..smo[ms]..".act")
		--styleSelect = 1
		--saveStyle = "Player"
		movement = smo[ms]
      end
	  if ms == 1 then
	    TextPrintString("STYLE SELECTOR\n2.Movement Style\n\n>"..smo[ms].."<\n"..smo[ms + 1].."\n"..smo[ms + 2].."",1,1)
	  elseif ms == table.getn(smo) then
	    TextPrintString("STYLE SELECTOR\n2.Movement Style\n\n"..smo[ms - 2].."\n"..smo[ms - 1].."\n>"..smo[ms].."<",1,1)
	  elseif not (ms == 1 or ms == table.getn(smo)) then
	    TextPrintString("STYLE SELECTOR\n2.Movement Style\n\n"..smo[ms - 1].."\n>"..smo[ms].."<\n"..smo[ms + 1].."",1,1)
	  end
	  TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[Exit ~LOOK_BACK~|~ddown~ Select]",0,2)
	  Wait(0)
    until IsButtonBeingReleased(14,0)
	SoundPlay2D("WrongBtn")
	Wait(100)
  end
end

function VehicleFinder() -- Un-used functions [BETA]
  Wait(100)
  SoundPlay2D("RightBtn")
  S_SetupVehicleFinder()
  repeat
    if IsButtonBeingPressed(0,0) or faster_select(0) then
	  vGrab = vGrab - 1
	  if vGrab < 0 then vGrab = 0 end
	elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	  vGrab = vGrab + 1
	  if vGrab > table.getn(vfs) then vGrab = 1 end
	elseif IsButtonBeingPressed(3,0) then
	  local vehicle = VehicleFindInAreaXYZ(0,0,0,999999)
	  if type(vehicle) == "table" then
        if VehicleIsValid(vehicle) and VehicleIsModel(vehicle,vfs[vGrab][1]) then
		  local x,y,z = PlayerGetPosXYZ()
		  VehicleSetPosXYZ(vehicle,x + 2,y + 2,z)
		end
	  else
        if VehicleIsValid(vehicle) and VehicleIsModel(vehicle,vfs[vGrab][1]) then
		  local x,y,z = PlayerGetPosXYZ()
		  VehicleSetPosXYZ(vehicle,x + 2,y + 2,z)
		end
	  end
	end
	TextPrintString("Vehicle Finder\n\nName: "..vfs[vGrab][2],0,1)
	if showText then
	  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[Navigate: ~dleft~ or ~dright~]\n[~ddown~ Find]",0,2)
    end
	Wait(0)
  until IsButtonBeingReleased(14,0)
  SoundPlay2D("WrongBtn")
end

function StrafeSelection()
  StrafeSelectionMenu()
  SoundPlay2D("RightBtn")
  repeat
    if IsButtonBeingPressed(0,0) or faster_select(0) then
	  ssms = ssms - 1
	  if ssms < 1 then ssms = 6 end
	elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	  ssms = ssms + 1
	  if ssms > 6 then ssms = 1 end
	end
	if IsButtonBeingPressed(3,0) then
	  if ssms == 1 then
	    STRAFE_AutoBind()
	  elseif ssms == 2 then
	    --STRAFE_SELECT_AnimDetection()
		STRAFE_AnimDetection()
	  elseif ssms == 3 then
	    STRAFE_AnimDetectionWithButton()
	  elseif ssms == 4 then
	    STRAFE_AnimDetectionAfter()
		--TextPrintString("CURRENTLY IN WORKING",3,1)
		--Wait(3000)
	  elseif ssms == 5 then
	    STRAFE_AnimDetectionWithButtonAfter()
	  else
	    STRAFE_ByFrequency()
	  end
	end
	TextPrintString("STRAFE SELECTOR\n\n"..smn[ssms],0,1)
	Wait(0)
  until IsButtonBeingPressed(14,0)
  SoundPlay2D("WrongBtn")
  WaitUntil(14,0)
end

function STRAFE_SELECT_AnimDetection()
  SoundPlay2D("RightBtn")
  Wait(200)
  STSE = {
    "Replacing anim",
	"After anim",
  }
  repeat
    if IsButtonBeingPressed(1,0) then
	  stses = 2
	elseif IsButtonBeingPressed(0,0) then
	  stses = 1
	end
	TextPrintString("STRAFE SELECTOR\nAnim Detection\n\n> "..STSE[stses].." <",0,1)
	Wait(0)
  until IsButtonBeingPressed(3,0) or IsButtonBeingPressed(14,0)
  if IsButtonBeingPressed(3,0) then
    if stses == 1 then
	  method = "replace"
	else
	  method = "after"
	end
	STRAFE_AnimDetection()
  end
  if IsButtonBeingPressed(14,0) then
    Wait(100)
  end
end

function STRAFE_AutoBind()
  SoundPlay2D("RightBtn")
  Wait(200)
  repeat
	for b = 0,15 do
	  if IsButtonBeingPressed(b,0) then
		table.insert(strafe,{anim = sts[st][2],act = sts[st][3],button = b})
		Wait(200)
		selectFinished = true
	  end
	end
	TextPrintString("STRAFE SELECTOR\n\nPress Any Button",1,1)
	Wait(0)
  until selectFinished
  SoundPlay2D("ButtonUp")
  selectFinished = false
end

function STRAFE_AnimDetectionWithButtonAfter()
  SoundPlay2D("RightBtn")
  Wait(200)
  endIt = false
  buttonPressed = "nil"
  PlayerSetControl(0)
  repeat
	for b = 0,15 do
	  if IsButtonBeingPressed(b,0) then
		buttonPressed = b
		Wait(200)
		endIt = true
	  end
	end
	TextPrintString("STRAFE SELECTOR\n\nPress Any Button",0,1)
	Wait(0)
  until endIt
  SoundPlay2D("ButtonUp")
  endIt = false
  PlayerSetControl(1)
  PlayerStopAllActionControllers()
  S_SetupActionNodeFinder()
  showNode = true
  played = "nil"
  Wait(200)
  repeat
    ped = gPlayer
	if showNode then
	  local node,act = PedGetActionNode(ped)
	  TextPrintString(PedGetName(ped)..'\n'..node..'\n'..act,1,2)
	  played = node
	end
	Wait(0)
  until IsButtonBeingPressed(3,0) or IsButtonBeingPressed(14,0)
  if IsButtonBeingPressed(3,0) then
    table.insert(strafeAnim,{anim = sts[st][2],act = sts[st][3],playing = played,mode = "after",button = buttonPressed,id = 0})
    played = "nil"
	buttonPressed = "nil"
  end
  Wait(100)
  SoundPlay2D("ButtonUp")
end

function STRAFE_AnimDetectionAfter()
  SoundPlay2D("RightBtn")
  S_SetupActionNodeFinder()
  showNode = true
  played = "nil"
  Wait(200)
  repeat
    ped = gPlayer
	if showNode then
	  local node,act = PedGetActionNode(ped)
	  TextPrintString(PedGetName(ped)..'\n'..node..'\n'..act,1,2)
	  played = node
	end
	Wait(0)
  until IsButtonBeingPressed(3,0) or IsButtonBeingPressed(14,0)
  if IsButtonBeingPressed(3,0) then
    WaitUntil(3,0)
	local sl = 1
	S_SetupCore()
	repeat
	  Wait(0)
	  
	  if ibbp(1,0) or faster_select(1) then
	    sl = sl + 1
		if sl > 3 then sl = 1 end
	  elseif ibbp(0,0) or faster_select(0) then
	    sl = sl - 1
		if sl < 1 then sl = 3 end
	  end
	  
	  TextPrintString("STRAFE SELECTOR\n[After Anim]\n\n\nFor:\n> "..to[sl],0,1)
	until IsButtonBeingPressed(3,0)
	WaitUntil(3,0)
	if sl == 1 then
	  TextPrintString("STRAFE SELECTOR\n\nAnimation has been added..",math.random(1,2),1)
	  Wait(math.random(1,2)*1000)
      table.insert(strafeAnim,{anim = sts[st][2],act = sts[st][3],playing = played,mode = "after",button = "nil",id = 0})
	elseif sl == 2 then
	  local tar_lock = PedGetTargetPed(gPlayer)
	  if PedIsValid(tar_lock) and tar_lock ~= gPlayer then
	    local tar_id = PedGetModel(tar_lock)
	    table.insert(strafeAnim,{anim = sts[st][2],act = sts[st][3],playing = played,mode = "after",button = "nil",id = tar_id})
	  else
	    get_error(math.random(1,2))
	  end
	elseif sl == 3 then
	  TextPrintString("STRAFE SELECTOR\n\nAnimation has been added..",math.random(1,2),1)
	  Wait(math.random(1,2)*1000)
      table.insert(strafeAnim,{anim = sts[st][2],act = sts[st][3],playing = played,mode = "after",button = "nil",id = 999})
	end
    played = "nil"
  else
    Wait(100)
  end
  SoundPlay2D("ButtonUp")
end

function STRAFE_AnimDetectionWithButton()
  SoundPlay2D("RightBtn")
  Wait(200)
  endIt = false
  buttonPressed = "nil"
  PlayerSetControl(0)
  repeat
	for b = 0,15 do
	  if IsButtonBeingPressed(b,0) then
		buttonPressed = b
		Wait(200)
		endIt = true
	  end
	end
	TextPrintString("STRAFE SELECTOR\n\nPress Any Button",0,1)
	Wait(0)
  until endIt
  SoundPlay2D("ButtonUp")
  endIt = false
  PlayerSetControl(1)
  PlayerStopAllActionControllers()
  S_SetupActionNodeFinder()
  showNode = true
  played = "nil"
  Wait(200)
  repeat
    ped = gPlayer
	if showNode then
	  local node,act = PedGetActionNode(ped)
	  TextPrintString(PedGetName(ped)..'\n'..node..'\n'..act,1,2)
	  played = node
	end
	Wait(0)
  until IsButtonBeingPressed(3,0) or IsButtonBeingPressed(14,0)
  if IsButtonBeingPressed(3,0) then
    table.insert(strafeAnim,{anim = sts[st][2],act = sts[st][3],playing = played,mode = method,button = buttonPressed,id = 0})
    played = "nil"
	buttonPressed = "nil"
  end
  Wait(100)
  SoundPlay2D("ButtonUp")
end

function STRAFE_AnimDetection()
  SoundPlay2D("RightBtn")
  S_SetupActionNodeFinder()
  showNode = true
  played = "nil"
  Wait(200)
  repeat
    ped = gPlayer
	if showNode then
	  local node,act = PedGetActionNode(ped)
	  TextPrintString(PedGetName(ped)..'\n'..node..'\n'..act,1,2)
	  played = node
	end
	Wait(0)
  until IsButtonBeingPressed(3,0) or IsButtonBeingPressed(14,0)
  if IsButtonBeingPressed(3,0) then
    WaitUntil(3,0)
	local sl = 1
	S_SetupCore()
	repeat
	  
	  Wait(0)
	  
	  if ibbp(1,0) or faster_select(1) then
	    sl = sl + 1
		if sl > 3 then sl = 1 end
	  elseif ibbp(0,0) or faster_select(0) then
	    sl = sl - 1
		if sl < 1 then sl = 3 end
	  end
	  
	  TextPrintString("STRAFE SELECTOR\n[Anim Detection]\n\n\nFor:\n> "..to[sl],0,1)
	  
	until IsButtonBeingPressed(3,0)
	WaitUntil(3,0)
	local rw = math.random(1,2)
	if sl == 1 then
	  TextPrintString("STRAFE SELECTOR\n\nAdding to player..",rw,1)
	  Wait(rw*1000)
      table.insert(strafeAnim,{anim = sts[st][2],act = sts[st][3],playing = played,mode = method,button = "nil",id = 0})
	elseif sl == 2 then
	  local tar_lock = PedGetTargetPed(gPlayer)
	  if PedIsValid(tar_lock) and tar_lock ~= gPlayer then
	    TextPrintString("STRAFE SELECTOR\n\nAdding to your target..",rw,1)
	    Wait(rw*1000)
	    local tar_id = PedGetModel(tar_lock)
	    table.insert(strafeAnim,{anim = sts[st][2],act = sts[st][3],playing = played,mode = method,button = "nil",id = tar_id})
	  else
	    get_error(math.random(1,2))
	  end
	elseif sl == 3 then
	  TextPrintString("STRAFE SELECTOR\n\nAdding for all peds..",rw,1)
	  Wait(rw*1000)
      table.insert(strafeAnim,{anim = sts[st][2],act = sts[st][3],playing = played,mode = method,button = "nil",id = 999})
	end
    played = "nil"
  else
    Wait(100)
  end
  SoundPlay2D("ButtonUp")
end

function STRAFE_ByFrequency()
  SoundPlay2D("RightBtn")
  --S_SetupActionNodeFinder()
  S_SetupCore()
  local evade = false
  local not_beta_version = true
  played = "nil"
  for_who = "nil"
  Wait(200)
  if not_beta_version then
    local s1 = 2
	
    repeat
	  Wait(0)
	  
	  if ibbp(1,0) or faster_select(1) then
	    SoundPlay2D("NavUp")
	    s1 = s1 + 1
		if s1 > table.getn(peds) then s1 = 2 end
	  elseif ibbp(0,0) or faster_select(0) then
	    SoundPlay2D("NavUp")
		s1 = s1 - 1
		if s1 < 2 then s1 = table.getn(peds) end
	  end
	  
	  TextPrintString("ADD ANIMATION\n\n\nFor:\n"..(s1 - 1).."."..peds[s1].name.." <-",1,1)
	until IsButtonBeingReleased(3,0)
	SoundPlay2D("RightBtn")
	if IsButtonBeingReleased(3,0) then
	  local radius = 2
	  while not IsButtonBeingReleased(3,0) do
	    Wait(0)
	  end
	  repeat
	    if IsButtonBeingPressed(1,0) or faster_select(1) then
		  SoundPlay2D("NavUp")
		  radius = radius + 1
		  if radius > 5 then radius = 1 end
		elseif IsButtonBeingPressed(0,0) or faster_select(0) then
		  SoundPlay2D("NavUp")
		  radius = radius - 1
		  if radius < 1 then radius = 5 end
		end
		TextPrintString("ADD ANIMATION\n\n\nRange: "..radius,1,1)
		Wait(0)
	  until IsButtonBeingReleased(3,0)
	  SoundPlay2D("RightBtn")
	  if IsButtonBeingReleased(3,0) then
	    local freq = nil
		while not IsButtonBeingReleased(3,0) do
	      Wait(0)
	    end
		if anim_was_evade(sts[st][2]) then
		  freq = 15
		else
		  freq = 25
		end
		repeat
		  if IsButtonBeingPressed(1,0) or faster_select(1) then
		    SoundPlay2D("NavUp")
		    freq = freq + 1
		    if freq > 100 then freq = 1 end
		  elseif IsButtonBeingPressed(0,0) or faster_select(0) then
		    SoundPlay2D("NavUp")
		    freq = freq - 1
		    if freq < 1 then freq = 5 end
		  end
		  TextPrintString("ADD ANIMATION\n\n\nPercentage: "..freq.."%",1,1)
		  if anim_was_evade(sts[st][2]) then
		    evade = true
		    TextPrintString("This is evade animation, lower percentage is better",1,2)
		  end
		  Wait(0)
		until IsButtonBeingReleased(3,0)
		TextPrintString("ADD ANIMATION\n\nAdding anim..",3,1)
		Wait(math.random(1200,3000))
		table.insert(ped_mix,{id = s1,anim = sts[st][2],act = sts[st][3],fre = freq,range = radius,use_evade = evade})
	  end
	end
  else
    SoundPlay2D("WrongBtn")
	Wait(100)
  end
end

function VehicleThief()
  SoundPlay2D("RightBtn")
  Wait(200)
  vsr = {
	{"275"				,"1.Cop Bike"},
	{"276"			,"2.Scooter"},
	{"277"			,"3.Red BMX"},
	{"278"			,"4.Blue BMX"},
	{"279"			,"5.Bicycle"},
	{"280"			,"6.Mountain Bike"},
	{"281"			,"7.Old Bike"},
	{"282"			,"8.Racer"},
	{"283"			,"9.Aquaberry Bike"},
	{"284"			,"10.Mower"},
	{"286"			,"11.Taxi"},
	{"288"			,"12.Dozer"},
	{"289"			,"13.Go Kart"},
	{"290"			,"14.Limo"},
	{"291"			,"15.Delivery Truck"},
	{"292"			,"16.Foreign Car"},
	{"293"			,"17.Regular Car"},
	{"294"			,"18.70 Wagon"},
	{"295"			,"19.Police Car"},
	{"296"			,"20.Domestic Car"},
	{"297"			,"21.Truck"},
	{"298"			,"22.Arcade 1"},
	{"287"			,"22.Arcade 2"},
	{"285"			,"23.Arcade 3"},
  }
  repeat
    if bp(1,0) or faster_select(1) then
	  vsrt = vsrt + 1
	  if vsrt > table.getn(vsr) then vsrt = 1 end
	elseif bp(0,0) or faster_select(0) then
	  vsrt = vsrt - 1
	  if vsrt < 1 then vsrt = table.getn(vsr) end
	elseif br(3,0) then
	  for i,ped in {PedFindInAreaXYZ(0,0,0,999999)} do
	    if PedIsValid(ped) and ped ~= gPlayer and PedIsInAnyVehicle(ped) and VehicleIsModel(PedGetLastVehicle(ped),vsr[vsrt][1]) then
		  PedWarpOutOfCar(ped,PedGetLastVehicle(ped))
		  PedSetPosXYZ(ped,VehicleGetPosXYZ(PedGetLastVehicle(ped)) + 4)
		  x,y,z = PlayerGetPosXYZ()
		  VehicleSetPosXYZ(PedGetLastVehicle(ped),x + 3,y,z)
		  table.insert(betak,{v = PedGetLastVehicle(ped)})
		end
	  end
	end
	TextPrintString("Vehicle Thief\n\n> "..vsr[vsrt][2].." <",0,1)
	Wait(0)
  until br(14,0)
  Wait(100)
  SoundPlay2D("ButtonUp")
end

function PedEditor()
  WaitUntil(3,0)
  SoundPlay2D("RightBtn")
  S_SetupPedEditor()
  repeat
    if IsButtonBeingPressed(0,0) or faster_select(0) then
	  SoundPlay2D("NavUp")
	  pe = pe - 1
	  if pe < 1 then pe = table.getn(pem) end
	elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	  SoundPlay2D("NavUp")
	  pe = pe + 1
	  if pe > table.getn(pem) then pe = 1 end
	elseif IsButtonBeingPressed(3,0) then
	  SoundPlay2D("ButtonUp")
	  if pe == 1 then
	    Populations()
	  elseif pe == 2 then
	    FightingSystem()
	  elseif pe == 3 then
	    PedVoice()
	  elseif pe == 4 then
	    ped_stats()
	  elseif pe == 5 then
	    ped_strafe()
	  end
	end
	TextPrintString("Ped Editor\n\n:"..pem[pe]..":",1,1)
	if showText then
	  TextPrintString("[Navigate ~dleft~ or ~dright~|~LOOK_BACK~ Exit]\n[~ddown~ Select]",0,2)
	end
	Wait(0)
  until IsButtonBeingReleased(14,0)
  SoundPlay2D("WrongBtn")
  Wait(100)
end

function PedVoice()
  Wait(100)
  repeat
    if IsButtonBeingPressed(3,0) then
	  if shutUp then
	    shutUp = false
	  elseif not shutUp then
	    shutUp = true
	  end
	end
	TextPrintString("Ped Voice\n\n"..GetVoice(),0,1)
	if showText then
	  TextPrintString("[Navigate: ~ddown~ Enable/Disable]\n[~LOOK_BACK~ Exit]",0,2)
	end
	Wait(0)
  until IsButtonBeingPressed(14,0)
  SoundPlay2D("WrongBtn")
  Wait(100)
end

function FightingSystem()
  Wait(100)
  S_SetupPedEditor()
  repeat
    if IsButtonBeingPressed(0,0) or faster_select(0) then
	  SoundPlay2D("NavUp")
	  fs = fs - 1
	  if fs < 1 then fs = table.getn(fsm) end
	elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	  SoundPlay2D("NavUp")
	  fs = fs + 1
	  if fs > table.getn(fsm) then fs = 1 end
	end
	if IsButtonBeingPressed(3,0) then
	  SoundPlay2D("ButtonDown")
	  if fs == 1 then
	    if pedRun then
		  pedRun = false
		elseif not pedRun then
		  pedRun = true
		end
	  elseif fs == 2 then
	    if pedDFB then
		  pedDFB = false
		elseif not pedDFB then
		  pedDFB = true
		end
	  elseif fs == 3 then
	    if pedAEO then
		  pedAEO = false
		elseif not pedAEO then
		  pedAEO = true
		end
	  end
	end
	TextPrintString("Fighting System\n\n"..fsm[fs][1].." = "..fsm[fs][2](),0,1)
	if showText then
	  TextPrintString("[Navigate ~dleft~ or ~dright~|~LOOK_BACK~ Exit]\n[~ddown~ Select]",0,2)
	end
	Wait(0)
  until IsButtonBeingReleased(14,0)
  SoundPlay2D("WrongBtn")
  Wait(100)
end

function cutscene_editor()
  Wait(100)
  SoundPlay2D("RightBtn")
  S_CutsEdit()
  repeat
    if IsButtonBeingPressed(0,0) or faster_select(0) then
	  SoundPlay2D("NavUp")
	  ceo = ceo - 1
	  if ceo < 1 then ceo = table.getn(moc) end
	elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	  SoundPlay2D("NavUp")
	  ceo = ceo + 1
	  if ceo > table.getn(moc) then ceo = 1 end
	elseif IsButtonBeingPressed(3,0) then
	  Wait(100)
	  SoundPlay2D("RightBtn")
	  moc[ceo][2]()
	end
	TextPrintString("CUTSCENE EDITOR\n\n"..moc[ceo][1],0,1)
	Wait(0)
  until br(14,0)
  SoundPlay2D("WrongBtn")
  Wait(100)
end

function load_cut()
  S_CutsEdit()
  repeat
    if bp(1,0) then
	  cec = cec + 1
	  if cec > table.getn(mof) then cec = 1 end
	elseif bp(0,0) then
	  cec = cec - 1
	  if cec < 1 then cec = table.getn(mof) end
	elseif bp(3,0) then
	  load_cutscene = mof[cec]
	end
	if cec == 1 then
	  TextPrintString("Load Cutscene\n\n>"..mof[cec].."<\n"..mof[cec + 1].."\n"..mof[cec + 2].."",0,1)
	elseif cec == table.getn(mof) then
	  TextPrintString("Load Cutscene\n\n"..mof[cec - 2].."\n"..mof[cec - 1].."\n>"..mof[cec].."<",0,1)
	elseif not (cec == table.getn(mof) or cec == 1) then
	  TextPrintString("Load Cutscene\n\n"..mof[cec - 1].."\n>"..mof[cec].."<\n"..mof[cec + 1].."",0,1)
	end
	TextPrintString("CURRENT: "..load_cutscene,0,2)
	Wait(0)
  until br(14,0)
  Wait(100)
  SoundPlay2D("WrongBtn")
end

function cut_act()
  S_CutsEdit()
  repeat
    if bp(1,0) then
	  cen = cen + 1
	  if cen > table.getn(mof) then cen = 1 end
	elseif bp(0,0) then
	  cen = cen - 1
	  if cen < 1 then cen = table.getn(mof) end
	elseif bp(3,0) then
	  cuts_action = mof[cen]
	end
	if cen == 1 then
	  TextPrintString("Cutscene Act\n\n>"..mof[cen].."<\n"..mof[cen + 1].."\n"..mof[cen + 2].."",0,1)
	elseif cen == table.getn(mof) then
	  TextPrintString("Cutscene Act\n\n"..mof[cen - 2].."\n"..mof[cen - 1].."\n>"..mof[cen].."<",0,1)
	elseif not (cen == table.getn(mof) or cen == 1) then
	  TextPrintString("Cutscene Act\n\n"..mof[cen - 1].."\n>"..mof[cen].."<\n"..mof[cen + 1].."",0,1)
	end
	TextPrintString("CURRENT: "..cuts_action,0,2)
	Wait(0)
  until br(14,0)
  Wait(100)
  SoundPlay2D("WrongBtn")
end

function cut_sound()
  S_CutsEdit()
  repeat
    if bp(1,0) then
	  ces = ces + 1
	  if ces > table.getn(mof) then ces = 1 end
	elseif bp(0,0) then
	  ces = ces - 1
	  if ces < 1 then ces = table.getn(mof) end
	elseif bp(3,0) then
	  cuts_audio = mof[ces]
	end
	if ces == 1 then
	  TextPrintString("Cutscene Audio\n\n>"..mof[ces].."<\n"..mof[ces + 1].."\n"..mof[ces + 2].."",0,1)
	elseif ces == table.getn(mof) then
	  TextPrintString("Cutscene Audio\n\n"..mof[ces - 2].."\n"..mof[ces - 1].."\n>"..mof[ces].."<",0,1)
	elseif not (ces == table.getn(mof) or ces == 1) then
	  TextPrintString("Cutscene Audio\n\n"..mof[ces - 1].."\n>"..mof[ces].."<\n"..mof[ces + 1].."",0,1)
	end
	TextPrintString("CURRENT: "..cuts_audio,0,2)
	Wait(0)
  until br(14,0)
  Wait(100)
  SoundPlay2D("WrongBtn")
end

function Populations()
  atz = true
  math = 1
  avel = "YIMYAM"
  if not dead then
    if atz then
	  if math == 1 then
	    if avel == "YIMYAM" then
		  Wait(100)
		  repeat
		    local ped = GetTarget()
			if IsButtonBeingPressed(0,0) or faster_select(0) then
			  SoundPlay2D("NavUp")
			  weSelect = weSelect - 1
			  if weSelect < 1 then weSelect = table.getn(wes) end
			elseif IsButtonBeingPressed(1,0) or faster_select(1) then
			  SoundPlay2D("NavUp")
			  weSelect = weSelect + 1
			  if weSelect > table.getn(wes) then weSelect = 1 end
			end
			if IsButtonBeingPressed(3,0) then
			  cght = 0
			  Wait(100)
			  repeat
				if cght == 0 then
				  if IsButtonBeingPressed(0,0) or faster_select(0) then
					SoundPlay2D("NavUp")
					ewSelect = ewSelect - 1
					if ewSelect < 1 then ewSelect = table.getn(ews) end
				  elseif IsButtonBeingPressed(1,0) or faster_select(1) then
					SoundPlay2D("NavUp")
					ewSelect = ewSelect + 1
					if ewSelect > table.getn(ews) then ewSelect = 1 end
				  end
				  TextPrintString("Populations\n["..wes[weSelect].name.."]\n\n"..ews[ewSelect][2],0,1)
				  if showText then
				    TextPrintString("[~LOOK_BACK~ Exit|~ddown~ Select]\n[Navigate ~dleft~ or ~dright~]",0,2)
				  end
				  Wait(0)
				end
			  until IsButtonBeingPressed(3,0)
			  PedSetUniqueModelStatus(weSelect,ews[ewSelect][1])
			end
			TextPrintString("Populations\n\nName:\n"..wes[weSelect].name,0,1)
			if showText then
			  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[~ddown~ Select]",0,2)
			end
			Wait(0)
		  until IsButtonBeingReleased(14,0)
		  SoundPlay2D("WrongBtn")
		  Wait(100)
		end
	  end
	end
  end
end

function PedFinder()
  Wait(100)
  SoundPlay2D("RightBtn")
  S_SetupPedFinder()
  repeat
    if IsButtonBeingPressed(0,0) or faster_select(0) then
	  SoundPlay2D("NavUp")
	  pedGrab = pedGrab - 1
	  if pedGrab < 1 then pedGrab = table.getn(pfs) end
	elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	  SoundPlay2D("NavUp")
	  pedGrab = pedGrab + 1
	  if pedGrab > table.getn(pfs) then pedGrab = 1 end
	elseif IsButtonBeingPressed(3,0) then
	  SoundPlay2D("ButtonUp")
	  for i,peds in {PedFindInAreaXYZ(0,0,0,999999)} do
        if PedIsValid(peds) and PedIsModel(peds,PedGetModelID(peds)) and peds ~= gPlayer then
		  table.insert(pedGetGrabed,peds)
		  if PedIsInAnyVehicle(peds) then
		    PedWarpOutOfCar(peds,PedGetLastVehicle(peds))
		  end
		  local x,y,z = PlayerGetPosXYZ()
		  PedSetPosXYZ(peds,x + 2,y + 2,z + 1)
		  PedSetActionNode(peds,"/Global/1_06/HoboFly","Act/Conv/1_06.act")
		end
	  end
	end
	TextPrintString("Ped Finder\n\nName: "..pfs[pedGrab].name,0,1)
	if showText then
	  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[Navigate: ~dleft~ or ~dright~]\n[~ddown~ Find]",0,2)
    end
	Wait(0)
  until IsButtonBeingReleased(14,0)
  SoundPlay2D("WrongBtn")
  for i = 1,table.getn(pedGetGrabed) do
    if PedIsValid(pedGetGrabed[i]) then
	  if PedGetHealth(pedGetGrabed[i]) > 1 then
	    PedSetActionNode(pedGetGrabed[i],"/Global","Act/Globals.act")
	  else
	    PedPlayHitReaction(pedGetGrabed[i])
	  end
	  table.remove(pedGetGrabed,i)
	end
  end
end

function DismissAlly()
  Wait(100)
  S_SetupAlly()
  SoundPlay2D("RightBtn")
  repeat
    if IsButtonBeingPressed(0,0) or faster_select(0) then
	  SoundPlay2D("NavUp")
	  al = al - 1
	  if al < 1 then al = table.getn(als) end
	elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	  SoundPlay2D("NavUp")
	  al = al + 1
	  if al > table.getn(als) then al = 1 end
	elseif IsButtonBeingPressed(3,0) then
	  SoundPlay2D("ButtonUp")
	  if al == 1 then
	    PedDismissAllAllies(gPlayer)
	  elseif al == 2 then
	    PedDismissAlly(gPlayer,PedGetAllyFollower(gPlayer))
	  end
	end
	TextPrintString("Dismiss Ally\n\n>"..als[al].."<",0,1)
	if showText then
	  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[Navigate: ~dleft~ or ~dright~]\n[~ddown~ Select]",0,2)
    end
	Wait(0)
  until IsButtonBeingReleased(14,0)
  SoundPlay2D("WrongBtn")
end

function ped_duplicator()
  WaitUntil(3,0)
  SoundPlay2D("RightBtn")
  repeat
    Wait(0)
	
	local ped = PedGetTargetPed(gPlayer)
	
	if PedIsValid(ped) then
	  if IsButtonBeingPressed(3,0) then
	    if ped ~= gPlayer then
		  id = PedGetModel(ped)
		  x,y,z = PedGetPosXYZ(ped)
		  style = ped_get_action_tree(ped,0)
		  name = PedGetName(ped)
		  create_ped(name,id,style,x,y,z)
	    else
	      get_error(1)
	    end
	  end
	else
	  ped = gPlayer
	end
	
	TextPrintString("Ped Duplicator\n\nDuplicate:\n> "..PedGetName(ped),0,1)
  until IsButtonBeingReleased(14,0)
  Wait(100)
  SoundPlay2D("WrongBtn")
end

function fight_maker()
  local who_start = "empty"
  Wait(100)
  SoundPlay2D("RightBtn")
  repeat
    Wait(0)
	
	local ped = PedGetTargetPed()
	
	if PedIsValid(ped) then
	  if IsButtonBeingReleased(3,0) then
	    if who_start == "empty" then
	      who_start = ped
		else
		  if ped ~= who_start then
		    PedAttack(who_start,ped,math.random(1,3))
			who_start = "empty"
		  else
		    get_error(1)
		  end
		end
		
		Wait(70)
	  end
	end
	
	if who_start ~= "empty" then
	  if IsButtonBeingPressed(2,0) then
	    who_start = "empty"
		TextPrintString("Fight Maker\n\nCLEANING..",1,1)
		Wait(math.random(500,1000))
	  end
	end
	
	if who_start ~= "empty" then
	  TextPrintString("Fight Maker\n\nFrom: "..PedGetName(who_start).."\n\n> To: "..GetName(),0.5,1)
	else
	  TextPrintString("Fight Maker\n\n> From: "..GetName().."\n\nTo: ???",0.5,1)
	end
	
  until IsButtonBeingReleased(14,0)
  Wait(100)
  SoundPlay2D("WrongBtn")
end

function class_editor()
  SoundPlay2D("RightBtn")
  Wait(100)
  S_ClassEditor()
  repeat
	if IsButtonBeingPressed(0,0) or faster_select(0) then
	  SoundPlay2D("NavUp")
	  cl = cl - 1
	  if cl < 1 then
		cl = table.getn(classEditor)
	  end
	elseif IsButtonBeingPressed(1,0) or faster_select(1) then
	  SoundPlay2D("NavUp")
	  cl = cl + 1
	  if cl > table.getn(classEditor) then
		cl = 1
	  end
	elseif IsButtonBeingPressed(3,0) then
	  SoundPlay2D("RightBtn")
	  classEditor[cl][2]()
	end
	if cl == 1 then
	  TextPrintString("Class Editor\n\n>"..classEditor[cl][1].."<\n"..classEditor[cl + 1][1].."\n"..classEditor[cl + 2][1].."",0,1)
	elseif cl == table.getn(classEditor) then
	  TextPrintString("Class Editor\n\n"..classEditor[cl - 2][1].."\n"..classEditor[cl - 1][1].."\n>"..classEditor[cl][1].."<",0,1)
	elseif not (cl == table.getn(classEditor) or cl == 1) then
	  TextPrintString("Class Editor\n\n"..classEditor[cl - 1][1].."\n>"..classEditor[cl][1].."<\n"..classEditor[cl + 1][1].."",0,1)
	end
	if showText then
	  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[Navigate: ~dleft~ or ~dright~]",0,2)
	end
	Wait(0)
  until IsButtonBeingReleased(14,0)
  Wait(100)
  SoundPlay2D("WrongBtn")
end

function ped_stats()
  WaitUntil(3,0)
  S_Stats()
  SoundPlay2D("RightBtn")
  who_inside = gPlayer
  repeat
    Wait(0)
	
	local ped = PedGetTargetPed(gPlayer)
	
	if not PedIsValid(ped) then
	  ped = gPlayer
	end
	
	if bp(0,0) then
	  pg = pg - 1
	  if pg < 1 then pg = table.getn(pgo) end
	elseif bp(1,0) then
	  pg = pg + 1
	  if pg > table.getn(pgo) then pg = 1 end
	end
	if IsButtonPressed(3,0) and pg ~= 7 then
	  GameSetPedStat(ped,pgo[pg][1],GameGetPedStat(ped,pgo[pg][1]) + 1)
	elseif IsButtonBeingReleased(3,0) and pg == 7 then
	  GameSetPedStat(ped,pgo[pg][1],GameGetPedStat(ped,pgo[pg][1]) + 1)
	  if GameGetPedStat(ped,pgo[pg][1]) > 3 then
	    GameSetPedStat(ped,pgo[pg][1],3)
	  end
	end
	if IsButtonPressed(2,0) and pg ~= 7 then
	  GameSetPedStat(ped,pgo[pg][1],GameGetPedStat(ped,pgo[pg][1]) - 1)
	elseif IsButtonBeingReleased(2,0) and pg == 7 then
	  GameSetPedStat(ped,pgo[pg][1],GameGetPedStat(ped,pgo[pg][1]) - 1)
	  if GameGetPedStat(ped,pgo[pg][1]) < 1 then
	    GameSetPedStat(ped,pgo[pg][1],1)
	  end
	end
	
	TextPrintString("Ped Editor\n[Stats]\n\nPed: "..PedGetName(ped).."\nStat: "..pgo[pg][2].."\nValue: "..GameGetPedStat(ped,pgo[pg][1]),0,1)
	if showText then
	  TextPrintString("[Navigate: ~dleft~ or ~dright~]\n[Value: ~ddown~ or ~dup~]\n[Exit: ~LOOK_BACK~]",0,2)
	end
  until IsButtonBeingReleased(14,0)
  Wait(100)
  SoundPlay2D("WrongBtn")
end

function skip_current_mission()
  WaitUntil(3,0)
  SoundPlay2D("RightBtn")
  local scm = {
    "SUCCESS",
	"FAILED",
	"CANCEL",
  }
  repeat
    if ibbp(0,0) or faster_select(0) then
	  sc = sc - 1
	  if sc < 1 then sc = 1 end
	elseif ibbp(1,0) or faster_select(1) then
	  sc = sc + 1
	  if sc > 3 then sc = 3 end
	end
	TextPrintString("SKIP MISSION\n\n> "..scm[sc],1,1)
	Wait(0)
  until IsButtonBeingPressed(3,0)
  WaitUntil(3,0)
  while GetCutsceneRunning() ~= 0 do
    TextPrintString("Waiting for cutscene..",0,1)
	Wait(0)
  end
  while AreaIsLoading() or not PedMePlaying(gPlayer,"DEFAULT_KEY") do
    Wait(0)
  end
  local tu = GetTimer()
  while GetTimer() < tu + math.random(2000,3000) do 
    TextPrintString("Initializing..",0,1)
	Wait(0)
  end
  if sc == 1 then
    addSelect = addSelect - 1
    SoundPlayMissionEndMusic(true,10)
	MissionSucceed(false,true,true)
  elseif sc == 2 then
    addSelect = addSelect - 1
    SoundPlayMissionEndMusic(false,10)
	MissionFail(false,true,true)
  else
    SoundPlay2D("WrongBtn")
    Wait(10)
  end
end

function custom_weather()
  repeat
    if ibbp(0,0) or faster_select(0) then
	  cwt = cwt - 1
	  if cwt < 1 then cwt = 100 end
	elseif ibbp(1,0) or faster_select(1) then
	  cwt = cwt + 1
	  if cwt > 100 then cwt = 1 end
	end
	if ibbp(3,0) then
	  WeatherSet(cwt)
	end
	TextPrintString("WEATHER SELECTOR\n[CUSTOM]\n\nWeather: "..cwt,1,1)
	Wait(0)
  until IsButtonBeingReleased(14,0)
  SoundPlay2D("WrongBtn")
  Wait(10)
end

function ped_strafe()
  WaitUntil(3,0)
  S_SetupCore()
  SoundPlay2D("RightBtn")
  repeat
    Wait(0)
	
	local ped = GetTarget()
	
	if bp(1,0) then
	  pt = pt + 1
	  if pt > 3 then pt = 1 end
	elseif bp(0,0) then
	  pt = pt - 1
	  if pt < 1 then pt = 3 end
	elseif bp(3,0) then
	  if ped ~= gPlayer then
	    if pt ~= 1 then
		  local st = ped_get_action_tree(ped,0)
	      table.insert(ped_strafes,{whom = PedGetModel(ped),type = pty[pt],style = st})
		end
	  else
	    get_error(1)
	  end
	elseif bp(2,0) then
	  for i = 1,table.getn(ped_strafes) do
	    table.remove(ped_strafes,i)
	  end
	end
	
	TextPrintString("Ped Editor\n[Strafes]\n\nFor: "..PedGetName(ped).."\nHow fast:\n> "..pt.."."..pty[pt],0,1)
  until IsButtonBeingPressed(14,0)
  Wait(100)
  SoundPlay2D("WrongBtn")
end

function MCT()
  SoundPlay2D("RightBtn")
  S_ClassEditor()
  repeat
    if IsButtonPressed(0,0) then
	  mcts = mcts - 1
	  if mcts < 0 then mcts = 0 end
	elseif IsButtonPressed(1,0) then
	  mcts = mcts + 1
	end
	TextPrintString(classEditor[cl][1].."\n\nTimer: "..mcts.." seconds",0,1)
	if showText then
	  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[Navigate: ~dleft~ or ~dright~]",0,2)
    end
	Wait(0)
  until IsButtonBeingReleased(14,0)
  SoundPlay2D("WrongBtn")
  Wait(100)
end

function ACR()
  SoundPlay2D("RightBtn")
  S_ClassEditor()
  repeat
    if IsButtonPressed(0,0) then
	  acrs = acrs - 1
	  if acrs < 0 then acrs = 0 end
	elseif IsButtonPressed(1,0) then
	  acrs = acrs + 1
	  if acrs > 20 then acrs = 20 end
	end
	TextPrintString(classEditor[cl][1].."\n\nRadius: "..acrs.." cm",0,1)
	if showText then
	  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[Navigate: ~dleft~ or ~dright~]",0,2)
    end
	Wait(0)
  until IsButtonBeingReleased(14,0)
  SoundPlay2D("WrongBtn")
  Wait(100)
end

function BCT()
  SoundPlay2D("RightBtn")
  S_ClassEditor()
  repeat
    if IsButtonPressed(0,0) then
	  bcts = bcts - 1
	  if bcts < 0 then bcts = 0 end
	elseif IsButtonPressed(1,0) then
	  bcts = bcts + 1
	end
	TextPrintString(classEditor[cl][1].."\n\nTimer: "..bcts.." seconds",0,1)
	if showText then
	  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[Navigate: ~dleft~ or ~dright~]",0,2)
    end
	Wait(0)
  until IsButtonBeingReleased(14,0)
  SoundPlay2D("WrongBtn")
  Wait(100)
end

function ECT()
  SoundPlay2D("RightBtn")
  S_ClassEditor()
  repeat
    if IsButtonPressed(0,0) then
	  ects = ects - 1
	  if ects < 0 then ects = 0 end
	elseif IsButtonPressed(1,0) then
	  ects = ects + 1
	end
	TextPrintString(classEditor[cl][1].."\n\nTimer: "..ects.." seconds",0,1)
	if showText then
	  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[Navigate: ~dleft~ or ~dright~]",0,2)
	end
    Wait(0)
  until IsButtonBeingReleased(14,0)
  SoundPlay2D("WrongBtn")
  Wait(100)
end

function GCT()
  SoundPlay2D("RightBtn")
  S_ClassEditor()
  repeat
    if IsButtonPressed(0,0) then
	  gcts = gcts - 1
	  if gcts < 0 then gcts = 0 end
	elseif IsButtonPressed(1,0) then
	  gcts = gcts + 1
	end
	TextPrintString(classEditor[cl][1].."\n\nTimer: "..gcts.." seconds",0,1)
	if showText then
	  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[Navigate: ~dleft~ or ~dright~]",0,2)
	end
    Wait(0)
  until IsButtonBeingReleased(14,0)
  SoundPlay2D("WrongBtn")
  Wait(100)
end

function ACPS()
  SoundPlay2D("RightBtn")
  S_ClassEditor()
  repeat
    if IsButtonBeingPressed(0,0) or faster_select(0) then
	  acpss = acpss - 0.1
	  if acpss < 0 then acpss = 0 end
	elseif IsButtonBeingPressed(1,0) or faster_select(0) then
	  acpss = acpss + 0.1
	  if acpss > 2.0 then acpss = 2.0 end
	end
	TextPrintString(classEditor[cl][1].."\n\nSpeed: "..string.format("%.0f",acpss/0.02).."%",0,1)
	if showText then
	  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[Navigate: ~dleft~ or ~dright~]",0,2)
    end
	Wait(0)
  until IsButtonBeingReleased(14,0)
  SoundPlay2D("WrongBtn")
  Wait(100)
end

function ACME()
  SoundPlay2D("RightBtn")
  S_ClassEditor()
  repeat
    if IsButtonBeingPressed(0,0) or faster_select(0) then
	  acmes = acmes - 1
	  if acmes < 0 then acmes = 0 end
	elseif IsButtonBeingPressed(1,0) or faster_select(0) then
	  acmes = acmes + 1
	  if acmes > 2.0 then acmes = 2.0 end
	end
	TextPrintString(classEditor[cl][1].."\n\nSpeed: "..string.format("%.0f",acmes/0.02).."%",0,1)
	if showText then
	  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[Navigate: ~dleft~ or ~dright~]",0,2)
    end
	Wait(0)
  until IsButtonBeingReleased(14,0)
  SoundPlay2D("WrongBtn")
  Wait(100)
end

function AET()
  SoundPlay2D("RightBtn")
  S_ClassEditor()
  repeat
    if IsButtonPressed(0,0) then
	  aets = aets - 1
	  if aets < 0 then aets = 0 end
	elseif IsButtonPressed(1,0) then
	  aets = aets + 1
	  if aets > 100 then aets = 100 end
	end
	TextPrintString(classEditor[cl][1].."\n\nTimer: "..aets.." seconds",0,1)
	if showText then
	  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[Navigate: ~dleft~ or ~dright~]",0,2)
    end
	Wait(0)
  until IsButtonBeingReleased(14,0)
  SoundPlay2D("WrongBtn")
  Wait(100)
end

function find_current_error(area,way)
  local script = {
    {6,"AreaScripts/Bio_Lab.lua"},
	{50,"SSTores.lua"},
	{43,"AreaScripts/Junkyard.lua"},
	{45,"AreaScripts/Midway.lua"},
	{2,"AreaScripts/SchoolHallways.lua"},
	{0,"AreaScripts/MainMap.lua"},
	{26,"SStores.lua"},
	{16,"AreaScripts/Tattoos.lua"},
	{29,"SStores.lua"},
	{30,"SStores.lua"},
	{36,"AreaScripts/Tenements.lua"},
	{14,"AreaScripts/Bdorm.lua"},
	{35,"AreaScripts/Gdorm.lua"},
	{37,"AreaScripts/Funhouse.lua"},
	{27,"AreaScripts/Boxing.lua"},
	{32,"AreaScripts/PrepHouse.lua"},
	{8,"AreaScripts/Janitors.lua"},
	{13,"AreaScripts/GymAndPool.lua"},
	{39,"AreaScripts/StyleStores.lua"},
	{34,"AreaScripts/StyleStores.lua"},
	{38,"AreaScripts/Asylum.lua"},
	{9,"AreaScripts/Library.lua"},
	{54,"AreaScripts/Warehouse.lua"},
	{23,"AreaScripts/StaffRoom.lua"},
	{5,"AreaScripts/PrincipalOffice.lua"},
	{40,"AreaScripts/Observatory.lua"},
	{4,"AreaScripts/Chem_Lab.lua"},
	{20,"AreaScripts/ChemPlant.lua"},
	{17,"AreaScripts/ArtRoom.lua"},
	{18,"AreaScripts/AutoShop.lua"},
	{19,"AreaScripts/Auditorium.lua"},
	{33,"AreaScripts/StyleStores.lua"},
	{15,"AreaScripts/Classroom.lua"},
	{46,"AreaScripts/StyleStores.lua"},
	{56,"AreaScripts/StyleStores.lua"},
	{57,"AreaScripts/SaveZones.lua"},
	{60,"AreaScripts/SaveZones.lua"},
	{61,"AreaScripts/SaveZones.lua"},
	{59,"AreaScripts/SaveZones.lua"},
	{42,"AreaScripts/TGokart.lua"},
	{51,"AreaScripts/ImgRaceA.lua"},
	{52,"AreaScripts/ImgRaceB.lua"},
	{53,"AreaScripts/ImgRaceC.lua"},
	{17,"AreaScripts/ArtRoom.lua"},
	{55,"AreaScripts/FreakShow.lua"},
	{62,"AreaScripts/BMXTrack.lua"},
  }
  local soluted = false
  if not soluted then
    for i = 1,table.getn(script) do
      if area == script[i][1] then
	    TextPrintString("ERROR: FAILED TO LOAD "..script[i][2],3,1)
	    Wait(3000)
		soluted = true
	  end
    end
  end
  TextPrintString("See Read Me.txt for more information",2,1)
  Wait(2000)
end

function faster_select(num)
  if IsButtonPressed(num,0) and IsButtonPressed(7,0) then
    return true
  end
  return false
end

function GetMenu()
  if menu == 2 then
    MainMenuType = "SCROLL_5"
    return "SCROLL_5"
  elseif menu == 3 then
    MainMenuType = "SCROLL_3"
    return "SCROLL_3"
  elseif menu == 4 then
    MainMenuType = "STANDARD"
    return "STANDARD"
  elseif menu == 5 then
    MainMenuType = "BASIC_BIG_SIZE"
    return "BASIC_BIG_SIZE"
  elseif menu == 6 then
    MainMenuType = "BASIC_SMALL_SIZE"
    return "BASIC_SMALL_SIZE"
  elseif menu == 1 then
    MainMenuType = "NEW_MENU"
	return "NEW_MENU"
  end
end

function anim_was_evade(anim)
  local evade = {
    "/Global/BOSS_Darby/Offense/NonCombatActions/Hopback",
	"/Global/BOSS_Darby/Defense/Short/Evade/EvadeDuck",
	"/Global/BOSS_Darby/Defense/Short/Evade/EvadeRight",
	"/Global/BOSS_Darby/Defense/Short/Evade/EvadeLeft",
	"/Global/BoxingPlayer/EvadeBank/Evades/Duck",
	"/Global/BoxingPlayer/EvadeBank/Evades/Left",
	"/Global/BoxingPlayer/EvadeBank/Evades/Right",
	"/Global/P_Grappler_A/Defense/Evade/EvadeBack/Evade",
	"/Global/P_Striker_A/Defense/Evade/EvadeBack",
	"/Global/P_Striker_B/Defense/Evade/EvadeBack/EvadeBack",
	"/Global/P_Bif/Defense/Evade/EvadeDuck",
	"/Global/P_Bif/Defense/Evade/EvadeLeft",
	"/Global/P_Bif/Defense/Evade/EvadeRight",
	"/Global/P_Grappler_A/Defense/Evade/EvadeBack/Evade",
	"/Global/P_Grappler_A/Offense/NonCombatActions/Hopback",
  }
  for i = 1,table.getn(evade) do
    if anim == evade[i] then
	  return true
	end
  end
  return false
end

function bugged_mission_running()
  local m = {
    "3_01C",
	"2_09",
	"2_B",
	"C_WRESTLING_1",
	"C_WRESTLING_2",
	"C_WRESTLING_3",
	"C_WRESTLING_4",
	"C_WRESTLING_5",
	"3_08",
	"4_05",
	"4_06",
	"5_03",
	"6_01",
  }
  for i = 1,table.getn(m) do
    if MissionActiveSpecific(m[i]) then
	  return true
	end
  end
  return false
end

function PedGetActionNode(ped)
  -- Brute force method isn't good idea because it'll make your game lags really bad.
  local actNode = "/Global"
  local actFile = ""
  local nodeFinished = false
  local nodeParts = 1
  repeat
    for action = 1,size(actions) do
      for animation = 1,size(animations) do
        if PedIsPlaying(ped,'/'..actNode..'/'..animations[animation],actions[action]) then
          actNode = actNode..'/'..animations[animation]
          actFile = actions[action]
        else
          nodeFinished = true
        end
      end
    end
  until nodeFinished
  return actNode,actFile
end

function is_in_mission()
  S_SetupCore()
  for i = 1,table.getn(cvs) do
    if type(cvs[i][1]) == "string" then
	  return MissionActiveSpecific(cvs[i][1])
	else
	  --assert(tonumber(cvs[i][1]),"This variable is number")
	end
  end
end

function ped_is_attack(attacker,attacked)
  S_SetupNode()
  for i = 1,table.getn(anims) do
    if PedIsPlaying(attacker,anims[i],true) and PedGetTargetPed(attacker) == attacked then
	  return true
	end
  end
  return false
end

function GetGuns()
  if rapidGun == 1 then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function GetKissGirls()
  if kissAllGirls then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function GetKissBoys()
  if kissAllBoys then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function GetPunchs()
  if rapidPunch == 1 then
    return "Enable"
  else
    return "Disable"
  end
end

function GetGameSpeed()
  if playerGameSpeedEffect == 1 then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function GetTarget()
  local ped = PedGetTargetPed()
  if useTarget and PedIsValid(ped) then
    return ped
  end
end

function GetAmmo()
  if inAmmo == 1 then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function GetCo()
  if mapCo == 1 then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function GetTickets()
  if inTickets == 1 then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function GetDamage()
  if damageWeapon == 1 then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function GetAlone()
  if alonePlayer == 1 then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function GetInv()
  if invPlayer == 1 then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function GetClass()
  if classTime == 1 then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function GetHealth()
  if inHealth == 1 then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function GetFreeze()
  if timeFreeze == 1 then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function GetMoney()
  if inMoney == 1 then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function GetAlly()
  if playerAlly == 1 then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function GetHidingMenu()
  if hideMenu == 2 then
    hidingMenu = "MANUAL"
	unhideMenu = 1
    return "MANUAL"
  elseif hideMenu == 1 then
    hidingMenu = "AUTO"
	unhideMenu = 0
    return "AUTO"
  end
end

function GetNa()
  if showText then
    return "T"
  else
    return "F"
  end
end
  
function UseTarget()
  if useTargetSetting == 1 then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function UseGravity()
  if gravityPlayer == 0 then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function UsePoints()
  if noPunishment == 1 then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function GetName()
  local ped = GetTarget()
  if ped == gPlayer then
    return "Player"
  else
    return PedGetName(ped)
  end
end

function ECACC()
  if ecacs then
    return "TRUE"
  else
    return "FALSE"
  end
end

function BCACC()
  if bcacs then
    return "TRUE"
  else
    return "FALSE"
  end
end

function GCACC()
  if gcacs then
    return "TRUE"
  else
    return "FALSE"
  end
end

function MCACC()
  if mcacs then
    return "TRUE"
  else
    return "FALSE"
  end
end

function RunFromBattle()
  if pedRun then
    return "TRUE"
  else
    return "FALSE"
  end
end

function DontFightBack()
  if pedDFB then
    return "TRUE"
  else
    return "FALSE"
  end
end

function AttackEachOther()
  if pedAEO then
    return "TRUE"
  else
    return "FALSE"
  end
end

function GetVoice()
  if shutUp then
    return "DISABLE"
  else
    return "ENABLE"
  end
end

function F_AutoTextPrint()
  if hidingMenu == "AUTO" then
	AutoShowingTextAfterExitingSubMenu = true
  end
end

----------------------------------SM_LOCALMULTIPLAYER----------------------------------

local weaponSelect = 1
local weapons = {}
local wiponSelect = 1
local wipons = {}
local vhcl1 = {}
local select1 = 1
local vhcl2 = {}
local select2 = 1
local wponSelect = 1
local wpons = {}
local wpnSelect = 1
local wpn = {}
local gt,sec,minute,hour = GetTimer(),0,0,0
playerIn = false

function get_timer()
  convert = function(n)
    if n > 0 and n < 10 then
      return "0"..n
	end
	return n
  end
  if gt + 1000 <= GetTimer() then
	sec = sec + 1
	if sec > 60 then
	  sec = 0
	  minute = minute + 1
	  if minute > 59 then
		minute = 0
		hour = hour + 1
	  end
	end
	gt = GetTimer()
  end
  return convert(hour).."h "..convert(minute).."m "..convert(sec).."s"
end
	
function IsMoving()
  local s = 0.08 -- sensitivity
  return GetStickValue(16,c) > s or GetStickValue(16,c) < -s or GetStickValue(17,c) > s or GetStickValue(17,c) < -s
end

function LocalMultiplayerATZ()
  local ped = PedGetTargetPed(gPlayer)
  local glvp1 = PedGetLastVehicle(gPlayer)
  local glvp2 = PedGetLastVehicle(Player2)
  local glvp3 = PedGetLastVehicle(Player3)
  local defkey = PedMePlaying(Player2,"DEFAULT_KEY")
  local defkey1 = PedMePlaying(Player3,"DEFAULT_KEY")
  table.insert(weapons,{name = "Fists",model = -1})
  table.insert(weapons,{name = "Flashlight",model = 420})
  table.insert(weapons,{name = "Super Spudgun",model = 396})
  table.insert(weapons,{name = "Skateboard",model = 437})
  table.insert(weapons,{name = "Camera",model = 328})
  table.insert(weapons,{name = "Itching Powder",model = 394})
  table.insert(weapons,{name = "Spraycan",model = 321})
  table.insert(weapons,{name = "Marble",model = 349})
  table.insert(weapons,{name = "Rubber Band Ball",model = 325})
  table.insert(weapons,{name = "Eggs",model = 312})
  table.insert(weapons,{name = "Stink Bomb",model = 309})
  table.insert(weapons,{name = "Newspaper",model = 320})
  table.insert(weapons,{name = "Rocket Launcher",model = 307})
  table.insert(weapons,{name = "Spudgun",model = 305})
  table.insert(weapons,{name = "Super Slingshot",model = 306})
  table.insert(weapons,{name = "Slingshot",model = 303})
  table.insert(weapons,{name = "Firecracker",model = 301})
  table.insert(wipons,{name = "Fists",model = -1})
  table.insert(wipons,{name = "Flashlight",model = 420})
  table.insert(wipons,{name = "Super Spudgun",model = 396})
  table.insert(wipons,{name = "Skateboard",model = 437})
  table.insert(wipons,{name = "Camera",model = 328})
  table.insert(wipons,{name = "Itching Powder",model = 394})
  table.insert(wipons,{name = "Spraycan",model = 321})
  table.insert(wipons,{name = "Marble",model = 349})
  table.insert(wipons,{name = "Rubber Band Ball",model = 325})
  table.insert(wipons,{name = "Eggs",model = 312})
  table.insert(wipons,{name = "Stink Bomb",model = 309})
  table.insert(wipons,{name = "Newspaper",model = 320})
  table.insert(wipons,{name = "Rocket Launcher",model = 307})
  table.insert(wipons,{name = "Spudgun",model = 305})
  table.insert(wipons,{name = "Super Slingshot",model = 306})
  table.insert(wipons,{name = "Slingshot",model = 303})
  table.insert(wipons,{name = "Firecracker",model = 301})
  table.insert(wpn,{name = "Fists",model = -1})
  table.insert(wpn,{name = "Eggs",model = 312})
  table.insert(wpn,{name = "Stink Bomb",model = 309})
  table.insert(wpn,{name = "Newspaper",model = 320})
  table.insert(wpn,{name = "Firecracker",model = 301})
  table.insert(wpons,{name = "Fists",model = -1})
  table.insert(wpons,{name = "Eggs",model = 312})
  table.insert(wpons,{name = "Stink Bomb",model = 309})
  table.insert(wpons,{name = "Newspaper",model = 320})
  table.insert(wpons,{name = "Firecracker",model = 301})
  if IsButtonBeingPressed(11,1) and weaponSelect > 1 and not PedIsInAnyVehicle(Player2) then
    if PedHasWeapon(Player2,387) or PedHasWeapon(Player2,324) or PedHasWeapon(Player2,342) then
      PedDestroyWeapon(Player2,PedGetWeapon(Player2))
	end
    weaponSelect = weaponSelect - 1
    PedSetWeapon(Player2,weapons[weaponSelect].model,50)
	TextPrintString("Weapon:\nPlayer 2: "..weapons[weaponSelect].name.."\nPlayer 3: "..wipons[wiponSelect].name,0.5,2)
	PedSetActionNode(Player2,"/Global/Player","Act/Player.act")
  elseif IsButtonBeingPressed(13,1) and weaponSelect < table.getn(weapons) and not PedIsInAnyVehicle(Player2) then
    if PedHasWeapon(Player2,387) or PedHasWeapon(Player2,324) or PedHasWeapon(Player2,342) then
      PedDestroyWeapon(Player2,PedGetWeapon(Player2))
	end
    weaponSelect = weaponSelect + 1
    PedSetWeapon(Player2,weapons[weaponSelect].model,50)
	TextPrintString("Weapon:\nPlayer 2: "..weapons[weaponSelect].name.."\nPlayer 3: "..wipons[wiponSelect].name,0.5,2)
	PedSetActionNode(Player2,"/Global/Player","Act/Player.act")
  elseif IsButtonBeingPressed(11,2) and wiponSelect > 1 and not PedIsInAnyVehicle(Player3) then
    if PedHasWeapon(Player3,387) or PedHasWeapon(Player3,324) or PedHasWeapon(Player3,342) then
      PedDestroyWeapon(Player3,PedGetWeapon(Player3))
	end
    wiponSelect = wiponSelect - 1
    PedSetWeapon(Player3,wipons[wiponSelect].model,50)
	TextPrintString("Weapon:\nPlayer 2: "..weapons[weaponSelect].name.."\nPlayer 3: "..wipons[wiponSelect].name,0.5,2)
	PedSetActionNode(Player3,"/Global/Player","Act/Player.act")
  elseif IsButtonBeingPressed(13,2) and wiponSelect < table.getn(wipons) and not PedIsInAnyVehicle(Player3) then
    if PedHasWeapon(Player3,387) or PedHasWeapon(Player3,324) or PedHasWeapon(Player3,342) then
      PedDestroyWeapon(Player3,PedGetWeapon(Player3))
	end
    wiponSelect = wiponSelect + 1
    PedSetWeapon(Player3,wipons[wiponSelect].model,50)
	TextPrintString("Weapon:\nPlayer 2: "..weapons[weaponSelect].name.."\nPlayer 3: "..wipons[wiponSelect].name,0.5,2)
	PedSetActionNode(Player3,"/Global/Player","Act/Player.act")
  end
  if IsButtonBeingPressed(11,1) and wpnSelect > 1 and PedIsInAnyVehicle(Player2) then
    wpnSelect = wpnSelect - 1
    PedSetWeapon(Player2,wpn[wpnSelect].model,50)
	TextPrintString("Vehicle Weapon:\nPlayer 2: "..wpn[wpnSelect].name.."\nPlayer 3: "..wpons[wponSelect].name,0.5,2)
  elseif IsButtonBeingPressed(13,1) and wpnSelect < table.getn(wpn) and PedIsInAnyVehicle(Player2) then
    wpnSelect = wpnSelect + 1
    PedSetWeapon(Player2,wpn[wpnSelect].model,50)
	TextPrintString("Vehicle Weapon:\nPlayer 2: "..wpn[wpnSelect].name.."\nPlayer 3: "..wpons[wponSelect].name,0.5,2)
  elseif IsButtonBeingPressed(11,2) and wponSelect > 1 and PedIsInAnyVehicle(Player3) then
    wponSelect = wponSelect - 1
    PedSetWeapon(Player3,wpons[wponSelect].model,50)
	TextPrintString("Vehicle Weapon:\nPlayer 2: "..wpn[wpnSelect].name.."\nPlayer 3: "..wpons[wponSelect].name,0.5,2)
  elseif IsButtonBeingPressed(13,1) and wponSelect < table.getn(wpons) and PedIsInAnyVehicle(Player3) then
    wponSelect = wponSelect + 1
    PedSetWeapon(Player3,wpons[wponSelect].model,50)
	TextPrintString("Vehicle Weapon:\nPlayer 2: "..wpn[wpnSelect].name.."\nPlayer 3: "..wpons[wponSelect].name,0.5,2)
  end
  if PedIsValid(Player2) then
	if PedIsInVehicle(Player2,glvp2) then
	  if (PedHasWeapon(Player2,301) or PedHasWeapon(Player2,312) or PedHasWeapon(Player2,309) or PedHasWeapon(Player2,320)) and IsButtonBeingPressed(12,1) then
	    PedSetActionNode(Player2,"/Global/Vehicles/Bikes/Ground/Attacks/Throw/Throw","Act/Vehicles.act")
	  end
    end
  elseif PedIsValid(Player3) then
	if PedIsInVehicle(Player3,glvp3) then
	  if (PedHasWeapon(Player3,301) or PedHasWeapon(Player3,312) or PedHasWeapon(Player3,309) or PedHasWeapon(Player3,320)) and IsButtonBeingPressed(12,2) then
	    PedSetActionNode(Player3,"/Global/Vehicles/Bikes/Ground/Attacks/Throw/Throw","Act/Vehicles.act")
	  end
    end
  end
  local defkey = PedMePlaying(Player2,"DEFAULT_KEY")
  local defkey1 = PedMePlaying(Player3,"DEFAULT_KEY")
  local ped = PedGetTargetPed(gPlayer)
  local glvp1 = PedGetLastVehicle(gPlayer)
  local glvp2 = PedGetLastVehicle(Player2)
  local glvp3 = PedGetLastVehicle(Player3)
  if IsButtonBeingPressed(6,1) and defkey and not IsButtonPressed(7,1) and PedHasWeapon(Player2,-1) then
	PedSetActionNode(Player2, "/Global/BoxingPlayer/Attacks/BoxingAttacks/LightAttacks/Left1", "Act/Anim/BoxingPlayer.act")
	nextCombo = false
  elseif IsButtonBeingPressed(6,1) and PedIsPlaying(Player2,"/Global/BoxingPlayer/Attacks/BoxingAttacks/LightAttacks/Left1","Act/Anim/BoxingPlayer.act") and nextCombo then
	PedSetActionNode(Player2, "/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Release/Cross", "Act/Anim/Player.act")
	nextCombo = false
  elseif IsButtonBeingPressed(6,1) and PedIsPlaying(Player2,"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Release/Cross", "Act/Anim/Player.act") and nextCombo then
	PedSetActionNode(Player2, "/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Release/Hook", "Act/Anim/Player.act")
	nextCombo = false
  elseif IsButtonBeingPressed(6,1) and PedIsPlaying(Player2,"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Release/Hook", "Act/Anim/Player.act") and nextCombo then
	PedSetActionNode(Player2, "/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Release/GutPunch", "Act/Anim/Player.act")
	nextCombo = false
  elseif IsButtonBeingPressed(6,1) and PedIsPlaying(Player2,"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Release/GutPunch", "Act/Anim/Player.act") and nextCombo then
	PedSetActionNode(Player2,"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Left5/Release/UpperCut", "Act/Anim/Player.act")
  end
  if IsButtonPressed(7,1) and IsButtonPressed(16,1) and IsButtonPressed(17,1) and PedIsValid(Player2) and not PedIsDead(Player2) and not (PedHasWeapon(Player2,305) or PedHasWeapon(Player2,307) or PedHasWeapon(Player2,396)) and (defkey or PedIsInAnyVehicle(Player2)) then
    PedSetActionNode(Player2,"/Global/G_Johnny/Default_KEY/ExecuteNodes/Free/SprintBasic","Act/Anim/G_Johnny.act")
  elseif (IsButtonBeingReleased(7,1) or IsButtonBeingReleased(16,1) or PedIsDead(Player2)) and PedIsPlaying(Player2,"/Global/G_Johnny/Default_KEY/ExecuteNodes/Free/SprintBasic","Act/Anim/G_Johnny.act") then
    PedSetActionNode(Player2,"/Global/Player","Act/Player.act")
  elseif IsButtonBeingPressed(9,1) and not PedIsDead(Player2) and PedIsValid(Player2) and not PedIsInAnyVehicle(Player2) and defkey then
    PedSetActionNode(Player2,"/Global/Actions/Grapples/Front/Grapples/GrappleAttempt","Act/Globals.act")
  elseif IsButtonBeingPressed(2,1) and not PedIsDead(Player2) and PedIsValid(Player2) and PedIsValid(PedGetGrappleTargetPed(Player2)) and not PedIsInAnyVehicle(Player2) then
    PedSetActionNode(Player2,"/Global/Actions/Grapples/GrappleReversals/StandingReversals/GrappleBreak/Break_GIVE","Act/Globals.act")
  elseif IsButtonBeingPressed(8,1) and not IsButtonPressed(16,1) and not IsButtonPressed(17,1) and not IsMoving() and not PedIsInAnyVehicle(Player2) and defkey then
    PedSetActionNode(Player2, "/Global/Player/JumpActions/Jump/IdleJump/IdleJump","Act/Anim/Player.act")
  elseif IsButtonBeingPressed(8,1) and IsButtonPressed(16,1) and IsButtonPressed(17,1) and not PedIsInAnyVehicle(Player2) and defkey then
    PedSetActionNode(Player2,"/Global/Player/JumpActions/Jump","Act/Anim/Player.act")
  elseif IsButtonBeingPressed(2,1) and PedIsPlaying(Player2,"/Global/BoxingPlayer/Attacks/BoxingAttacks/LightAttacks/Left1", "Act/Anim/BoxingPlayer.act") then
	PedSetActionNode(Player2,"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Release/Unblockable/LegKickReleaseMax", "Act/Anim/Player.act")
  elseif IsButtonBeingPressed(2,1) and PedIsPlaying(Player2, "/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Release/Cross", "Act/Anim/Player.act") then
	PedSetActionNode(Player2, "/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Release/Unblockable/JackieKick", "Act/Anim/Player.act")
  elseif IsButtonBeingPressed(2,1) and PedIsPlaying(Player2, "/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Release/Hook", "Act/Anim/Player.act") then
	PedSetActionNode(Player2, "/Global/Actions/RisingAttacks", "Globals/G_Striker_A.act")
  elseif IsButtonBeingPressed(2,1) and PedIsPlaying(Player2, "/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Release/GutPunch", "Act/Anim/Player.act") then
	PedSetActionNode(Player2, "/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Left5/Release/Unblockable", "Act/Anim/Player.act")
  elseif PedIsInAnyVehicle(Player2) and IsButtonBeingPressed(9,1) then
	PedSetActionNode(Player2,"/Global/Vehicles/Bikes/Ground/Dismount/GetOff","Act/Vehicles.act")
  elseif IsButtonBeingPressed(12,1) and PedHasWeapon(Player2,305) and not PedIsDead(Player2) and not PedIsInAnyVehicle(Player2) and defkey then
	PedSetActionNode(Player2, "/Global/Gun/Gun/Actions/Controller/UpperBody/FireActions/SpudG/Release","Act/Weapons/Gun.act")
  elseif IsButtonBeingPressed(12,1) and PedHasWeapon(Player2,396) and not PedIsDead(Player2) and not PedIsInAnyVehicle(Player2) and defkey then
	PedSetActionNode(Player2, "/Global/Gun/Gun/Actions/Controller/UpperBody/FireActions/SpudG/Release","Act/Weapons/Gun.act")
  elseif IsButtonBeingPressed(12,1) and PedHasWeapon(Player2,307) and not PedIsDead(Player2) and not PedIsInAnyVehicle(Player2) and defkey then
	PedSetActionNode(Player2, "/Global/Gun/Gun/Actions/Controller/UpperBody/FireActions/Brocket/Release","Act/Weapons/Gun.act")
  elseif IsButtonBeingPressed(12,1) and PedHasWeapon(Player2,311) and not PedIsDead(Player2) and not PedIsInAnyVehicle(Player2) and defkey then
	PedSetActionNode(Player2,"/Global/Nemesis/Special/Throw","Act/Anim/Nemesis.act")
  elseif IsButtonBeingPressed(12,1) and PedHasWeaponToThrown(Player2) and not PedIsDead(Player2) and not PedIsInAnyVehicle(Player2) and defkey then
	PedSetActionNode(Player2,"/Global/Thrown/Thrown/Actions/Controller/UpperBody/OverHand/Throw","Act/Weapons/Thrown.act")
  elseif IsButtonBeingPressed(12,1) and (PedHasWeapon(Player2,303) or PedHasWeapon(Player2,306)) and not PedIsDead(Player2) and not PedIsInAnyVehicle(Player2) and defkey then
	PedSetActionNode(Player2,"/Global/SlingShot/SlingShot/Actions/Controller/UpperBody/FireActions/Charge","Act/Weapons/SlingShot.act")
  elseif IsButtonPressed(7,2) and IsButtonPressed(16,2) and IsButtonPressed(17,2) and PedIsValid(Player3) and not PedIsDead(Player3) and not (PedHasWeapon(Player3,305) or PedHasWeapon(Player3,307) or PedHasWeapon(Player3,396)) and (defkey1 or PedIsInAnyVehicle(Player3)) then
    PedSetActionNode(Player3,"/Global/G_Johnny/Default_KEY/ExecuteNodes/Free/SprintBasic","Act/Anim/G_Johnny.act")
  elseif (IsButtonBeingReleased(7,2) or IsButtonBeingReleased(16,2) or PedIsDead(Player3)) and PedIsPlaying(Player3,"/Global/G_Johnny/Default_KEY/ExecuteNodes/Free/SprintBasic","Act/Anim/G_Johnny.act") then
    PedSetActionNode(Player3,"/Global/Player","Act/Player.act")
  elseif IsButtonBeingPressed(9,2) and not PedIsDead(Player3) and PedIsValid(Player3) and not PedIsInAnyVehicle(Player3) and defkey1 then
    PedSetActionNode(Player3,"/Global/Actions/Grapples/Front/Grapples/GrappleAttempt","Act/Globals.act")
  elseif IsButtonBeingPressed(2,2) and not PedIsDead(Player3) and PedIsValid(Player3) and PedIsValid(PedGetGrappleTargetPed(Player3)) and not PedIsInAnyVehicle(Player3) then
    PedSetActionNode(Player3,"/Global/Actions/Grapples/GrappleReversals/StandingReversals/GrappleBreak/Break_GIVE","Act/Globals.act")
  elseif IsButtonBeingPressed(8,2) and not IsButtonPressed(16,2) and not IsButtonPressed(17,2) and not IsMoving() and not PedIsInAnyVehicle(Player3) and defkey1 then
    PedSetActionNode(Player3, "/Global/Player/JumpActions/Jump/IdleJump/IdleJump","Act/Anim/Player.act")
  elseif IsButtonBeingPressed(8,2) and IsButtonPressed(16,2) and IsButtonPressed(17,2) and not PedIsInAnyVehicle(Player3) and defkey1 then
    PedSetActionNode(Player3,"/Global/Player/JumpActions/Jump","Act/Anim/Player.act")
  elseif IsButtonBeingPressed(6,2) and defkey1 and not IsButtonPressed(7,2) then
	PedSetActionNode(Player3, "/Global/BoxingPlayer/Attacks/BoxingAttacks/LightAttacks/Left1", "Act/Anim/BoxingPlayer.act")
  elseif IsButtonBeingPressed(6,2) and PedIsPlaying(Player3,"/Global/BoxingPlayer/Attacks/BoxingAttacks/LightAttacks/Left1","Act/Anim/BoxingPlayer.act") then
	PedSetActionNode(Player3, "/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Release/Cross", "Act/Anim/Player.act")
  elseif IsButtonBeingPressed(6,2) and PedIsPlaying(Player3,"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Release/Cross", "Act/Anim/Player.act") then
	PedSetActionNode(Player3, "/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Release/Hook", "Act/Anim/Player.act")
  elseif IsButtonBeingPressed(6,2) and PedIsPlaying(Player3,"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Release/Hook", "Act/Anim/Player.act") then
    PedSetActionNode(Player3, "/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Release/GutPunch", "Act/Anim/Player.act")
  elseif IsButtonBeingPressed(6,2) and PedIsPlaying(Player3,"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Release/GutPunch", "Act/Anim/Player.act") then
	PedSetActionNode(Player3,"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Left5/Release/UpperCut", "Act/Anim/Player.act")
  elseif IsButtonBeingPressed(2,2) and PedIsPlaying(Player3,"/Global/BoxingPlayer/Attacks/BoxingAttacks/LightAttacks/Left1", "Act/Anim/BoxingPlayer.act") then
	PedSetActionNode(Player3,"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Release/Unblockable/LegKickReleaseMax", "Act/Anim/Player.act")
  elseif IsButtonBeingPressed(2,2) and PedIsPlaying(Player3, "/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Release/Cross", "Act/Anim/Player.act") then
    PedSetActionNode(Player3, "/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Release/Unblockable/JackieKick", "Act/Anim/Player.act")
  elseif IsButtonBeingPressed(2,2) and PedIsPlaying(Player3, "/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Release/Hook", "Act/Anim/Player.act") then
	PedSetActionNode(Player3, "/Global/Actions/RisingAttacks", "Globals/G_Striker_A.act")
  elseif IsButtonBeingPressed(2,2) and PedIsPlaying(Player3, "/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Release/GutPunch", "Act/Anim/Player.act") then
	PedSetActionNode(Player3, "/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Left5/Release/Unblockable", "Act/Anim/Player.act")
  elseif PedIsInAnyVehicle(Player3) and IsButtonBeingPressed(9,2) then
    PedSetActionNode(Player3,"/Global/Vehicles/Bikes/Ground/Dismount/GetOff","Act/Vehicles.act")
  elseif IsButtonBeingPressed(12,2) and PedHasWeapon(Player3,305) and not PedIsDead(Player3) and not PedIsInAnyVehicle(Player3) and defkey1 then
	PedSetActionNode(Player3, "/Global/Gun/Gun/Actions/Controller/UpperBody/FireActions/SpudG/Release","Act/Weapons/Gun.act")
  elseif IsButtonBeingPressed(12,2) and PedHasWeapon(Player3,396) and not PedIsDead(Player3) and not PedIsInAnyVehicle(Player3) and defkey1 then
	PedSetActionNode(Player3, "/Global/Gun/Gun/Actions/Controller/UpperBody/FireActions/SpudG/Release","Act/Weapons/Gun.act")
  elseif IsButtonBeingPressed(12,2) and PedHasWeapon(Player3,349) and not PedIsDead(Player3) and not PedIsInAnyVehicle(Player3) and defkey1 then
	PedSetActionNode(Player3, "/Global/2_S04/Anim/AttachMarbles","Act/Conv/2_S04.act")
  elseif IsButtonBeingPressed(12,2) and PedHasWeapon(Player3,307) and not PedIsDead(Player3) and not PedIsInAnyVehicle(Player3) and defkey1 then
	PedSetActionNode(Player3, "/Global/Gun/Gun/Actions/Controller/UpperBody/FireActions/Brocket/Release","Act/Weapons/Gun.act")
  elseif IsButtonBeingPressed(12,2) and PedHasWeapon(Player3,311) and not PedIsDead(Player3) and not PedIsInAnyVehicle(Player3) and defkey1 then
	PedSetActionNode(Player3,"/Global/Nemesis/Special/Throw","Act/Anim/Nemesis.act")
  elseif IsButtonBeingPressed(12,2) and PedHasWeaponToThrown(Player3) and not PedIsDead(Player3) and not PedIsInAnyVehicle(Player3) and defkey1 then
	PedSetActionNode(Player3,"/Global/Thrown/Thrown/Actions/Controller/UpperBody/OverHand/Throw","Act/Weapons/Thrown.act")
  elseif IsButtonBeingPressed(12,2) and (PedHasWeapon(Player3,303) or PedHasWeapon(Player3,306)) and not PedIsDead(Player3) and not PedIsInAnyVehicle(Player3) and defkey1 then
	PedSetActionNode(Player3,"/Global/SlingShot/SlingShot/Actions/Controller/UpperBody/FireActions/Charge","Act/Weapons/SlingShot.act")
  elseif PedIsValid(PedGetGrappleTargetPed(Player2)) then
    if IsButtonBeingPressed(8,1) then
	  PedSetActionNode(Player2,"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/GrappleStrikes/HitA", "Globals/Nemesis.act")
	elseif IsButtonBeingPressed(6,1) then
	  PedSetActionNode(Player2,"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/GrappleStrikes/HitB", "Globals/Nemesis.act")
	elseif IsButtonBeingPressed(7,1) then
	  PedSetActionNode(Player2,"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/TandemGrapple","act/anim/Player.act")
	elseif IsButtonBeingPressed(9,1) then
	  PedSetActionNode(Player2,"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/DirectionalPush","Act/Globals.act")
	end
  elseif PedIsValid(PedGetGrappleTargetPed(Player3)) then
    if IsButtonBeingPressed(8,2) then
	  PedSetActionNode(Player3,"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/GrappleStrikes/HitA", "act/anim/Player.act")
	elseif IsButtonBeingPressed(6,2) then
	  PedSetActionNode(Player3,"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/GrappleStrikes/HitB", "act/anim/Player.act")
	elseif IsButtonBeingPressed(7,2) then
	  PedSetActionNode(Player3,"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/TandemGrapple","act/anim/Player.act")
	elseif IsButtonBeingPressed(9,2) then
	  PedSetActionNode(Player3,"/Global/Actions/Grapples/Front/Grapples/GrappleMoves/DirectionalPush","Act/Globals.act")
	end
  elseif IsButtonBeingPressed(2,1) and defkey and PedIsValid(Player2) and not PedIsDead(Player2) then
    PedSetActionNode(Player2,"/Global/Player/Attacks/GroundAttacks/GroundAttacks/Strikes/HeavyAttacks/GroundKick","act/anim/Player.act")
  elseif IsButtonBeingPressed(2,2) and defkey1 and PedIsValid(Player3) and not PedIsDead(Player3) then
    PedSetActionNode(Player3,"/Global/Player/Attacks/GroundAttacks/GroundAttacks/Strikes/HeavyAttacks/GroundKick","act/anim/Player.act")
  elseif IsButtonPressed(7,1) and IsButtonPressed(6,1) and defkey and PedIsValid(Player2) and not PedIsDead(Player2) then
    PedSetActionNode(Player2,"/Global/Player/Attacks/Strikes/RunningAttacks/HeavyAttacks/RunShoulder","act/anim/Player.act")
  elseif IsButtonPressed(7,2) and IsButtonPressed(6,2) and defkey1 and PedIsValid(Player3) and not PedIsDead(Player3) then
    PedSetActionNode(Player3,"/Global/Player/Attacks/Strikes/RunningAttacks/HeavyAttacks/RunShoulder","act/anim/Player.act")
  elseif IsButtonBeingPressed(15,1) and not PedGetFlag(Player2, 2, true) and not PedIsDead(Player2) and PedIsValid(Player2) and defkey and not PedIsInAnyVehicle(Player2) then
    PedSetFlag(Player2, 2, true)
  elseif IsButtonBeingPressed(15,1) and PedGetFlag(Player2, 2, true) and PedIsValid(Player2) and not PedIsDead(Player2) then
    PedSetFlag(Player2, 2, false)
  elseif IsButtonBeingPressed(15,2) and not PedGetFlag(Player3, 2, true) and not PedIsDead(Player3) and PedIsValid(Player3) and defkey1 and not PedIsInAnyVehicle(Player3) then
    PedSetFlag(Player3, 2, true)
  elseif IsButtonBeingPressed(15,2) and PedGetFlag(Player3, 2, true) and PedIsValid(Player3) and not PedIsDead(Player3) then
    PedSetFlag(Player3, 2, false)
  elseif IsButtonBeingPressed(2,1) and PedIsInAnyVehicle(Player2) and not PedHasWeapon(Player2,418) then
    PedSetWeapon(Player2,418)
  elseif IsButtonBeingPressed(10,1) and PedHasWeapon(Player2,418) and PedIsInAnyVehicle(Player2) then
    PedSetActionNode(Player2,"/Global/Vehicles/Bikes/ExecuteNodes/Attacks/LeadPipe/SwingRightExec","Act/Vehicles.act")
  elseif IsButtonBeingPressed(12,1) and PedHasWeapon(Player2,418) and PedIsInAnyVehicle(Player2) then
    PedSetActionNode(Player2,"/Global/Vehicles/Bikes/ExecuteNodes/Attacks/LeadPipe/SwingLeftExec","Act/Vehicles.act")
  elseif IsButtonBeingPressed(2,2) and PedIsInAnyVehicle(Player3) and not PedHasWeapon(Player3,418) then
    PedSetWeapon(Player3,418)
  elseif IsButtonBeingPressed(10,2) and PedHasWeapon(Player3,418) and PedIsInAnyVehicle(Player3) then
    PedSetActionNode(Player3,"/Global/Vehicles/Bikes/ExecuteNodes/Attacks/LeadPipe/SwingRightExec","Act/Vehicles.act")
  elseif IsButtonBeingPressed(12,2) and PedHasWeapon(Player3,418) and PedIsInAnyVehicle(Player3) then
    PedSetActionNode(Player3,"/Global/Vehicles/Bikes/ExecuteNodes/Attacks/LeadPipe/SwingLeftExec","Act/Vehicles.act")
  elseif PedHasWeapon(Player2,321) and IsButtonBeingPressed(12,1) and not PedIsInAnyVehicle(Player2) and PedIsValid(Player2) and defkey then
    PedSetActionNode(Player2,"/Global/Spraycan/Actions/Attacks/HeavyAttacks","Act/Weapons/Spraycan.act")
  elseif PedHasWeapon(Player2,321) and IsButtonBeingReleased(12,1) and PedIsPlaying(Player2,"/Global/Spraycan/Actions/Attacks/HeavyAttacks","Act/Weapons/Spraycan.act") then
    PedSetActionNode(Player2,"/Global/Player","Act/Player.act")
  elseif PedHasWeapon(Player3,321) and IsButtonBeingPressed(6,2) and not PedIsInAnyVehicle(Player3) and PedIsValid(Player3) and defkey1 then
    PedSetActionNode(Player3,"/Global/Spraycan/Actions/Attacks/HeavyAttacks","Act/Weapons/Spraycan.act")
  elseif PedHasWeapon(Player3,321) and IsButtonBeingReleased(6,2) and PedIsPlaying(Player3,"/Global/Spraycan/Actions/Attacks/HeavyAttacks","Act/Weapons/Spraycan.act") then
    PedSetActionNode(Player3,"/Global/Player","Act/Player.act")
  end
  if PedIsPlaying(Player2,"/Global/Vehicles/SkateBoard/Locomotion/Ride/Coast","Act/Vehicles.act") and IsButtonBeingPressed(8,1) then
    PedSetActionNode(Player2,"/Global/Vehicles/SkateBoard/Locomotion/Ride/ChargeJump/Ali","Act/Vehicles.act")
  elseif PedIsPlaying(Player3,"/Global/Vehicles/SkateBoard/Locomotion/Ride/Coast","Act/Vehicles.act") and IsButtonBeingPressed(8,2) then
    PedSetActionNode(Player3,"/Global/Vehicles/SkateBoard/Locomotion/Ride/ChargeJump/Ali","Act/Vehicles.act")
  end
  if IsButtonPressed(10,1) and PedIsValid(Player2) then
    for i,ped1 in {PedFindInAreaXYZ(0,0,0,999999)} do
	  x1,y1,z1 = PedGetPosXYZ(ped1)
	  x2,y2,z2 = PedGetPosXYZ(Player2)
	  if PedIsValid(ped1) and ped1 ~= Player2 and math.abs(x1 - x2) + math.abs(y1 - y2) + math.abs(z1 - z2) < 3 then
	    PedLockTarget(Player2,ped1)
	  end
	end
  elseif IsButtonBeingReleased(10,1) then
    PedLockTarget(Player2,-1)
  elseif IsButtonPressed(10,2) and PedIsValid(Player3) then
    for i,ped2 in {PedFindInAreaXYZ(0,0,0,999999)} do
	  x3,y3,z3 = PedGetPosXYZ(ped2)
	  x4,y4,z4 = PedGetPosXYZ(Player3)
	  if PedIsValid(ped2) and ped2 ~= Player3 and math.abs(x3 - x4) + math.abs(y3 - y4) + math.abs(z3 - z4) < 3 then
	    PedLockTarget(Player3,ped2)
	  end
	end
  elseif IsButtonBeingReleased(10,2) then
    PedLockTarget(Player3,-1)
  end
  if PedIsValid(Player2) and not PedIsValid(Player3) then
    PedSetPunishmentPoints(Player2,0)
	PedRecruitAlly(gPlayer,Player2)
	HUDSetFightStyle()
	PedShowHealthBar(Player2,true,PedGetName(Player2),true)
  elseif PedIsValid(Player3) and not PedIsValid(Player2) then
    PedSetPunishmentPoints(Player3,0)
	PedRecruitAlly(gPlayer,Player3)
	HUDSetFightStyle()
	PedShowHealthBar(Player3,true,PedGetName(Player3),true)
  elseif PedIsValid(Player2) and PedIsValid(Player3) then
    PedSetPunishmentPoints(Player2,0)
    PedSetPunishmentPoints(Player3,0)
	PedRecruitAlly(gPlayer,Player3)
	PedRecruitAlly(Player3,Player2)
	HUDSetFightStyle()
	PedShowHealthBar(Player2,true,PedGetName(Player2),true)
  end
  x1,y1,z1 = PedGetPosXYZ(Player2)
  if PedInRectangle(gPlayer,x1 + 1,y1 + 1,x1 - 1,y1 - 1) and PedIsValid(Player2) and PedIsInVehicle(Player2,VehicleForPlayer2) then
    if IsButtonBeingPressed(9,0) then
	  PlayerFixToBackOfVehicle(VehicleForPlayer2)
	  playerIn = false
	  CreateThread("PlayerInBack")
	end
  end
  if playerIn then
    if IsButtonBeingPressed(9,0) or not PedIsInVehicle(Player2,VehicleForPlayer2) then
	  PedSetActionNode(Player2,"/Global/Vehicles/Bikes/Ground/Dismount/GetOff","Act/Vehicles.act")
	  playerIn = false
	end
  end
end

function F_PunchSetting()
  if CloneIsPlaying() then
    if cWait + 300 <= GetTimer() then
      nextCombo = true
    else
	  cWait = GetTimer()
	end
  end
end

function CloneIsPlaying()
  return PedIsPlaying(Player2,"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Right4/Release/GutPunch", "Act/Anim/Player.act") or
	PedIsPlaying(Player2,"/Global/BoxingPlayer/Attacks/BoxingAttacks/LightAttacks/Left1","Act/Anim/BoxingPlayer.act") or
	PedIsPlaying(Player2,"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Release/Cross", "Act/Anim/Player.act") or
	PedIsPlaying(Player2,"/Global/Player/Attacks/Strikes/LightAttacks/Left1/Right2/Left3/Release/Hook", "Act/Anim/Player.act")
end
	  

function PlayerInBack()
  while playerIn do
    x1,y1,z1 = PedGetPosXYZ(Player2)
    CameraSetXYZ(x1,y1,z1 + 10)
    Wait(0)
  end
end

function S_SetupLM()
  size = table.getn
  weSelect = 1
  wes = {
	{name = "Jimmy"				,style = "Player"},
	{name = "Zoe"				,style = "GS_Female_A"},
	{name = "Beatrice"			,style = "GS_Female_A"},
	{name = "Algernon"			,style = "N_Striker_B"},
	{name = "Fatty"				,style = "N_Striker_A"},
	{name = "Melvin"			,style = "N_Striker_A"},
	{name = "Thad"				,style = "N_Ranged_A"},
	{name = "Bucky"				,style = "N_Ranged_A"},
	{name = "Cornelius"			,style = "N_Ranged_A"},
	{name = "Earnest"			,style = "N_Ranged_A"},
	{name = "Donald"			,style = "N_Ranged_A"},
	{name = "Damon"				,style = "J_Striker_A"},
	{name = "Kirby"				,style = "J_Striker_A"},
	{name = "Mandy"				,style = "GS_Female_A"},
	{name = "Dan"				,style = "J_Striker_A"},
	{name = "Luis"				,style = "J_Grappler_A"},
	{name = "Casey"				,style = "J_Melee_A"},
	{name = "Bo"				,style = "J_Melee_A"},
	{name = "Ted"				,style = "J_Striker_A"},
	{name = "Juri"				,style = "J_Grappler_A"},
	{name = "Peanut"			,style = "G_Striker_A"},
	{name = "Hal"				,style = "G_Grappler_A"},
	{name = "Johnny"			,style = "G_Striker_A"},
	{name = "Lefty"				,style = "G_Melee_A"},
	{name = "Lola"				,style = "GS_Female_A"},
	{name = "Lucky"				,style = "G_Striker_A"},
	{name = "Vance"				,style = "G_Melee_A"},
	{name = "Ricky"				,style = "G_Striker_A"},
	{name = "Norton"			,style = "G_Grappler_A"},
	{name = "Gord"				,style = "P_Striker_A"},
	{name = "Tad"				,style = "P_Striker_A"},
	{name = "Chad"				,style = "P_Grappler_A"},
	{name = "Bif"				,style = "P_Striker_A"},
	{name = "Justin"			,style = "P_Striker_B"},
	{name = "Bryce"				,style = "P_Grappler_A"},
	{name = "Bryce"				,style = "P_Striker_A"},
	{name = "Darby"				,style = "P_Striker_A"},
	{name = "Pinky"				,style = "GS_Female_A"},
	{name = "Angie"				,style = "GS_Female_A"},
	{name = "Parker"			,style = "P_Striker_B"},
	{name = "Jerry"				,style = "DO_Grappler_A"},
	{name = "Otto"				,style = "DO_Striker_A"},
	{name = "Leon"				,style = "DO_Striker_A"},
	{name = "Duncan"			,style = "DO_Striker_A"},
	{name = "Henry"				,style = "DO_Grappler_A"},
	{name = "Gurney"			,style = "DO_Grappler_A"},
	{name = "Omar"				,style = "DO_Striker_A"},
	{name = "Zoe"				,style = "GS_Female_A"},
	{name = "Max"				,style = "Authority"},
	{name = "Seth"				,style = "Authority"},
	{name = "Edward"			,style = "Authority"},
	{name = "Karl"				,style = "Authority"},
	{name = "Theo"				,style = "LE_Orderly_A"},
	{name = "MissPeabody"		,style = "TE_Female_A"},
	{name = "MrBurton"			,style = "Authority"},
	{name = "MrLuntz"			,style = "CV_Male_A"},
	{name = "MrGalloway"		,style = "Authority"},
	{name = "Edna"				,style = "Authority"},
	{name = "MissWinston"		,style = "TE_Female_A"},
	{name = "MrsMcRae"			,style = "TE_Female_A"},
	{name = "MrHuntingdon"		,style = "Authority"},
	{name = "MrsCarvin"			,style = "TE_Female_A"},
	{name = "MsPhillips"		,style = "TE_Female_A"},
	{name = "MrSlawter"			,style = "Authority"},
	{name = "DrCrabblesnitch"	,style = "Authority"},
	{name = "Sheldon"			,style = "GS_Male_A"},
	{name = "Christy"			,style = "GS_Female_A"},
	{name = "Gloria"			,style = "GS_Female_A"},
	{name = "Pedro"				,style = "GS_Male_A"},
	{name = "Constantinos"		,style = "GS_Male_A"},
	{name = "Ray"				,style = "GS_Fat_A"},
	{name = "Ivan"				,style = "GS_Male_A"},
	{name = "Trevor"			,style = "GS_Male_A"},
	{name = "Eunice"			,style = "GS_Fat_A"},
	{name = "Russell"			,style = "B_Striker_A"},
	{name = "DrBambillo"		,style = "CV_Male_A"},
	{name = "MrSullivan"		,style = "CV_Male_A"},
	{name = "MsKopke"			,style = "CV_Female_A"},
	{name = "MsRushinski"		,style = "CV_Female_A"},
	{name = "MsIsaacs"			,style = "CV_Female_A"},
	{name = "BethanyJones"		,style = "CV_Female_A"},
	{name = "ORourke"			,style = "CV_Male_A"},
	{name = "OfficerMonson"		,style = "Authority"},
	{name = "ZackOwens"			,style = "CV_Male_A"},
	{name = "Trent"				,style = "B_Striker_A"},
	{name = "TobiasMason"		,style = "CV_Male_A"},
	{name = "MrGrant"			,style = "CV_Male_A"},
	{name = "Mascot"			,style = "J_Mascot"},
	{name = "MrOh"				,style = "CV_Male_A"},
	{name = "Christy"			,style = "GS_Female_A"},
	{name = "Edgar"				,style = "DO_Striker_A"},
	{name = "Luis"				,style = "J_Grappler_A"},
	{name = "Mandy"				,style = "GS_Female_A"},
	{name = "Pinky"				,style = "GS_Female_A"},
	{name = "Beatrice"			,style = "GS_Female_A"},
	{name = "Lola"				,style = "GS_Female_A"},
	{name = "OfficerWilliams"	,style = "Authority"},
	{name = "Jimmy"				,style = "Player"},
	{name = "Davis"				,style = "B_Striker_A"},
	{name = "MrBreckindale"		,style = "CV_Male_A"},
	{name = "MrDoolin"			,style = "CV_Male_A"},
	{name = "Troy"				,style = "B_Striker_A"},
	{name = "Nate"				,style = "CV_Male_A"},
	{name = "MrCarmichael"		,style = "CV_Male_A"},
	{name = "NickyCharles"		,style = "CV_Male_A"},
	{name = "MrWatts"			,style = "Authority"},
	{name = "MissAbby"			,style = "CV_OLD"},
	{name = "Mihailovich"		,style = "CV_Male_A"},
	{name = "Kirby"				,style = "J_Striker_A"},
	{name = "Ted"				,style = "J_Striker_A"},
	{name = "Dan"				,style = "J_Striker_A"},
	{name = "Damon"				,style = "J_Striker_A"},
	{name = "Freeley"			,style = "CV_Male_A"},
	{name = "Dorsey"			,style = "CV_Male_A"},
	{name = "Hector"			,style = "CV_Male_A"},
	{name = "Osbourne"			,style = "CV_Male_A"},
	{name = "Chad"				,style = "P_Striker_A"},
	{name = "Justin"			,style = "P_Striker_A"},
	{name = "Parker"			,style = "P_Striker_A"},
	{name = "MariaTheresa"		,style = "CV_Female_A"},
	{name = "Bob"				,style = "GS_Male_A"},
	{name = "Fatty"				,style = "GS_Male_A"},
	{name = "Chuck"				,style = "CV_Male_A"},
	{name = "Ian"				,style = "CV_Male_A"},
	{name = "Fenwick"			,style = "DO_Striker_A"},
	{name = "Neil"				,style = "Authority"},
	{name = "MrSvenson"			,style = "CV_Male_A"},
	{name = "Denny"				,style = "CV_Male_A"},
	{name = "MrGalloway"		,style = "Authority"},
	{name = "Gary"				,style = "B_Striker_A"},
	{name = "Krakauer"			,style = "CV_OLD"},
	{name = "MrMoratti"			,style = "CV_Male_A"},
	{name = "Bif"				,style = "P_Striker_A"},
	{name = "Peter"				,style = "GS_Male_A"},
	{name = "MrSmith"			,style = "CV_Male_A"},
	{name = "Rat"				,style = "AN_Rat"},
	{name = "Melody"			,style = "GS_Female_A"},
	{name = "Karen"				,style = "GS_Female_A"},
	{name = "Gordon"			,style = "GS_Male_A"},
	{name = "Brandy"			,style = "GS_Male_A"},
	{name = "Pitbull"			,style = "AN_DOG"},
	{name = "Lance"				,style = "GS_Male_A"},
	{name = "Crystal"			,style = "CV_Female_A"},
	{name = "MrMartin"			,style = "CV_Male_A"},
	{name = "Ethan"				,style = "B_Striker_A"},
	{name = "Wade"				,style = "B_Striker_A"},
	{name = "Tom"				,style = "B_Striker_A"},
	{name = "MrRamirez"			,style = "CV_Male_A"},
	{name = "MrHuntingdon"		,style = "CV_Male_A"},
	{name = "Otto"				,style = "DO_Striker_A"},
	{name = "MrWiggins"			,style = "Authority"},
	{name = "Floyd"				,style = "CV_Male_A"},
	{name = "Leon"				,style = "DO_Striker_A"},
	{name = "Henry"				,style = "DO_Striker_A"},
	{name = "Fatty"				,style = "N_Striker_A"},
	{name = "Stan"				,style = "CV_Male_A"},
	{name = "Handy"				,style = "CV_OLD"},
	{name = "Gregory"			,style = "LE_Orderly_A"},
	{name = "Pedro"				,style = "GS_Male_A"},
	{name = "Gary"				,style = "B_Striker_A"},
	{name = "Lucky"				,style = "G_Striker_A"},
	{name = "Donald"			,style = "N_Ranged_A"},
	{name = "Parker"			,style = "P_Striker_B"},
	{name = "Casey"				,style = "J_Melee_A"},
	{name = "Peter"				,style = "GS_Male_A"},
	{name = "Angie"				,style = "GS_Female_A"},
	{name = "Pinky"				,style = "GS_Female_A"},
	{name = "Damon"				,style = "J_Striker_A"},
	{name = "Gordon"			,style = "GS_Male_A"},
	{name = "Ivan"				,style = "B_Striker_A"},
	{name = "Trevor"			,style = "B_Striker_A"},
	{name = "Bif"				,style = "P_Striker_A"},
	{name = "Vance"				,style = "G_Melee_A"},
	{name = "Thad"				,style = "N_Ranged_A"},
	{name = "Pinky"				,style = "GS_Female_A"},
	{name = "Russell"			,style = "B_Striker_A"},
	{name = "Tad"				,style = "P_Striker_A"},
	{name = "Bryce"				,style = "P_Grappler_A"},
	{name = "Justin"			,style = "P_Striker_B"},
	{name = "Angie"				,style = "GS_Female_A"},
	{name = "Christy"			,style = "GS_Female_A"},
	{name = "Pinky"				,style = "GS_Female_A"},
	{name = "MrBuba"			,style = "CV_OLD"},
	{name = "MrGordon"			,style = "CV_OLD"},
	{name = "MrsLisburn"		,style = "CV_OLD"},
	{name = "Fatty"				,style = "N_Striker_A"},
	{name = "Betty"				,style = "CV_Male_A"},
	{name = "Lightning"			,style = "P_Striker_A"},
	{name = "Zeke"				,style = "G_Striker_A"},
	{name = "Alfred"			,style = "CV_Male_A"},
	{name = "Paris"				,style = "CV_Female_A"},
	{name = "Courtney"			,style = "CV_Female_A"},
	{name = "Delilah"			,style = "CV_Female_A"},
	{name = "Drew"				,style = "CV_Male_A"},
	{name = "Castillo"			,style = "CV_Male_A"},
	{name = "Edgar"				,style = "DO_Striker_A"},
	{name = "Gurney"			,style = "DO_Grappler_A"},
	{name = "Jerry"				,style = "DO_Grappler_A"},
	{name = "Leon"				,style = "DO_Striker_A"},
	{name = "Hal"				,style = "G_Grappler_A"},
	{name = "Norton"			,style = "G_Grappler_A"},
	{name = "Peanut"			,style = "G_Striker_A"},
	{name = "Vance"				,style = "G_Melee_A"},
	{name = "Bo"				,style = "J_Melee_A"},
	{name = "Damon"				,style = "J_Striker_A"},
	{name = "Juri"				,style = "J_Grappler_A"},
	{name = "Kirby"				,style = "J_Striker_A"},
	{name = "Algernon"			,style = "N_Striker_B"},
	{name = "Bucky"				,style = "N_Ranged_A"},
	{name = "Thad"				,style = "N_Ranged_A"},
	{name = "Parker"			,style = "P_Striker_B"},
	{name = "Justin"			,style = "P_Striker_B"},
	{name = "Tad"				,style = "P_Striker_A"},
	{name = "Gord"				,style = "P_Striker_A"},
	{name = "Earnest"			,style = "N_Ranged_A"},
	{name = "Ted"				,style = "J_Striker_A"},
	{name = "Johnny"			,style = "G_Johnny"},
	{name = "Darby"				,style = "P_Striker_A"},
	{name = "Pitbull"			,style = "AN_DOG"},
	{name = "Pitbull"			,style = "AN_DOG"},
	{name = "Edna"				,style = "Authority"},
	{name = "McInnis"			,style = "CV_Male_A"},
	{name = "Johnson"			,style = "CV_Male_A"},
	{name = "Thad"				,style = "N_Ranged_A"},
	{name = "Sheldon"			,style = "GS_Male_A"},
	{name = "Pedro"				,style = "GS_Male_A"},
	{name = "Ivan"				,style = "GS_Male_A"},
	{name = "Trevor"			,style = "GS_Male_A"},
	{name = "MrBurton"			,style = "Authority"},
	{name = "Mandy"				,style = "GS_Female_A"},
	{name = "Bo"				,style = "J_Melee_A"},
	{name = "Casey"				,style = "J_Melee_A"},
	{name = "PunchBag"			,style = "PunchBagBS"},
	{name = "OfficerMonson"		,style = "Authority"},
	{name = "Constantinos"		,style = "GS_Male_A"},
	{name = "McInnis"			,style = "CV_Male_A"},
	{name = "McInnis"			,style = "CV_Male_A"},
	{name = "OfficerWilliams"	,style = "Authority"},
	{name = "Bryce"				,style = "P_Striker_A"},
	{name = "Bryce"				,style = "P_Striker_A"},
	{name = "Chad"				,style = "P_Striker_A"},
	{name = "Chad"				,style = "P_Striker_A"},
	{name = "Bif"				,style = "P_Striker_A"},
	{name = "Justin"			,style = "P_Striker_A"},
	{name = "Justin"			,style = "P_Striker_A"},
	{name = "Parker"			,style = "P_Striker_A"},
	{name = "Parker"			,style = "P_Striker_A"},
	{name = "GeographyTeacher"	,style = "Authority"},
	{name = "MusicTeacher"		,style = "TE_Female_A"},
	{name = "Elf"				,style = "GS_Male_A"},
	{name = "Elf"				,style = "GS_Male_A"},
	{name = "HoboSanta"			,style = "CV_Male_A"},
	{name = "Santa"				,style = "CV_Male_A"},
	{name = "Santa"				,style = "CV_Male_A"},
	{name = "Peter"				,style = "GS_Male_A"},
	{name = "Eunice"			,style = "GS_Fat_A"},
	{name = "Melody"			,style = "GS_Female_A"},
	{name = "Pedro"				,style = "GS_Male_A"}
  }
end

function S_SetupMovementClone()
  smoc = {
    "DEFAULT",
    "B_Striker_A",
	"Authority",
	"LE_Orderly_A",
	"BOSS_Darby",
	"BOSS_Russell",
	"Crazy_Basic",
	"CV_Drunk",
	"CV_Female_A",
	"CV_Male_A",
	"CV_OLD",
	"DO_Edgar",
	"DO_Striker_A",
	"DO_Melee_A",
	"DO_Grappler_A",
	"G_Johnny",
	"G_Striker_A",
	"G_Melee_A",
	"G_Ranged_A",
	"G_Grappler_A",
	"GS_Fat_A",
	"GS_Female_A",
	"GS_Male_A",
	"J_Ted",
	"J_Damon",
	"J_Striker_A",
	"J_Melee_A",
	"J_Grappler_A",
	"J_Mascot",
	"N_Earnest",
	"N_Striker_A",
	"N_Striker_B",
	"N_Ranged_A",
	"Nemesis",
	"P_Bif",
	"P_Striker_A",
	"P_Striker_B",
	"P_Grappler_A",
	"Russell_102",
	"TE_Female_A",
	"TE_Secretary",
  }
end

function Player2Valid()
  if PedIsValid(Player2) then
    return "Valid"
  else
    return "Not Valid"
  end
end

function Player3Valid()
  if PedIsValid(Player3) then
    return "Valid"
  else
    return "Not Valid"
  end
end

function IsAnyButtonPressed()
  local c = 0
  for b = 0,15 do
    if IsButtonPressed(b,c) then
	  return true
	end
  end
  return false
end

function AnyButtonGetPressed()
  for btn = 0,15 do
    if IsButtonBeingPressed(btn,0) then
	  return btn
	end
  end
end

function PedHasWeaponToThrown(ped)
  return PedHasWeapon(ped,301) or PedHasWeapon(ped,309) or PedHasWeapon(ped,310) or PedHasWeapon(ped,311) or PedHasWeapon(ped,312) or PedHasWeapon(ped,313) or PedHasWeapon(ped,318) or PedHasWeapon(ped,320) or PedHasWeapon(ped,325) or PedHasWeapon(ped,329) or PedHasWeapon(ped,330) or PedHasWeapon(ped,349)
end

function GrappleAnim()
  return sts[st][2] == "/Global/G_Johnny/Offense/Short/Strikes/HeavyKick/HeavyKick/Grabknees/GV" or
    sts[st][2] == "/Global/Actions/Grapples/Front/Grapples/GrappleOpps/Melee/Greaser/GrabKnees/GV" or
	sts[st][2] == "/Global/G_Striker_A/Offense/Short/Strikes/HeavyAttacks/HeavyKick/GrabKnees" or
	sts[st][2] == "/Global/Actions/Grapples/Front/Grapples/GrappleMoves/BackBreaker" or
	sts[st][2] == "/Global/Actions/Grapples/Front/Grapples/GrappleMoves/BodySlam" or
	sts[st][2] == "/Global/J_Damon/Offense/Medium/Grapples/GrapplesAttempt/TakeDown" or
	sts[st][2] == "/Global/Actions/Grapples/Front/Grapples/GrappleMoves/TandemGrapple" or
	sts[st][2] == "/Global/Actions/Grapples/Front/Grapples/GrappleMoves/BearHug" or
	sts[st][2] == "/Global/Actions/Grapples/Front/Grapples/GrappleMoves/PowerBomb" or
	sts[st][2] == "/Global/Actions/Grapples/Front/Grapples/GrappleOpps/Melee/Greaser/Takedown"
end

function MountAttack()
  return sts[st][2] == "/Global/Actions/Grapples/Front/Grapples/Mount/GrappleMoves/FacePunch/Hit1" or
    sts[st][2] == "/Global/Actions/Grapples/Front/Grapples/Mount/MountOpps/Player/KneeDrop" or
	sts[st][2] == "/Global/Actions/Grapples/Front/Grapples/Mount/MountOpps/Player/Spit" or
	sts[st][2] == "/Global/Actions/Grapples/Mount/MountOpps/Dropout/HeadButt" or
	sts[st][2] == "/Global/Actions/Grapples/Mount/GrappleMoves/Headbutt"
end

function import_action_controller(ped,num)
  if PedIsValid(ped) then
    local defkey = PedMePlaying(ped,"DEFAULT_KEY")
    if PedIsInAnyVehicle(ped) and IsButtonBeingPressed(9,num) then
	  PedSetActionNode(ped,"/Global/Vehicles/Bikes/Ground/Dismount/GetOff","Act/Vehicles.act")
	elseif IsButtonBeingPressed(12,num) and PedHasWeapon(ped,305) and not PedIsDead(ped) and not PedIsInAnyVehicle(ped) and defkey then
	  PedSetActionNode(ped,"/Global/Gun/Gun/Actions/Controller/UpperBody/FireActions/SpudG/Release","Act/Weapons/Gun.act")
	elseif IsButtonBeingPressed(12,num) and PedHasWeapon(ped,396) and not PedIsDead(ped) and not PedIsInAnyVehicle(ped) and defkey then
	  PedSetActionNode(ped,"/Global/Gun/Gun/Actions/Controller/UpperBody/FireActions/SpudG/Release","Act/Weapons/Gun.act")
	elseif IsButtonBeingPressed(12,num) and PedHasWeapon(ped,307) and not PedIsDead(ped) and not PedIsInAnyVehicle(ped) and defkey then
	  PedSetActionNode(ped,"/Global/Gun/Gun/Actions/Controller/UpperBody/FireActions/Brocket/Release","Act/Weapons/Gun.act")
	elseif IsButtonBeingPressed(12,num) and PedHasWeapon(ped,311) and not PedIsDead(ped) and not PedIsInAnyVehicle(ped) and defkey then
	  PedSetActionNode(ped,"/Global/Nemesis/Special/Throw","Act/Anim/Nemesis.act")
    elseif IsButtonBeingPressed(12,num) and PedHasWeaponToThrown(ped) and not PedIsDead(ped) and not PedIsInAnyVehicle(ped) and defkey then
	  PedSetActionNode(ped,"/Global/Thrown/Thrown/Actions/Controller/UpperBody/OverHand/Throw","Act/Weapons/Thrown.act")
    elseif IsButtonBeingPressed(12,num) and (PedHasWeapon(ped,303) or PedHasWeapon(ped,306)) and not PedIsDead(ped) and not PedIsInAnyVehicle(ped) and defkey then
	  PedSetActionNode(ped,"/Global/SlingShot/SlingShot/Actions/Controller/UpperBody/FireActions/Charge","Act/Weapons/SlingShot.act")
	elseif PedHasWeapon(ped,321) and IsButtonBeingPressed(12,num) and not PedIsInAnyVehicle(ped) and PedIsValid(ped) and defkey then
      PedSetActionNode(ped,"/Global/Spraycan/Actions/Attacks/HeavyAttacks","Act/Weapons/Spraycan.act")
    elseif PedHasWeapon(ped,321) and IsButtonBeingReleased(12,num) and PedIsPlaying(ped,"/Global/Spraycan/Actions/Attacks/HeavyAttacks","Act/Weapons/Spraycan.act") then
      PedSetActionNode(ped,"/Global/Player","Act/Player.act")
    elseif PedIsPlaying(ped,"/Global/Vehicles/SkateBoard/Locomotion/Ride/Coast","Act/Vehicles.act") and IsButtonBeingPressed(8,num) then
      PedSetActionNode(ped,"/Global/Vehicles/SkateBoard/Locomotion/Ride/ChargeJump/Ali","Act/Vehicles.act")
	end
	if PedGetWeapon(gPlayer) ~= PedGetWeapon(ped) then
	  if not PedHasWeapon(gPlayer,437) then
	    PedSetWeapon(ped,PedGetWeapon(gPlayer),80)
	  end
	end
  end
end

function AED()
  SoundPlay2D("RightBtn")
  S_ClassEditor()
  repeat
    if IsButtonPressed(0,0) then
	  aeds = aeds - 1
	  if aeds < 0 then aeds = 0 end
	elseif IsButtonPressed(1,0) then
	  aeds = aeds + 1
	  if aeds > 100 then aeds = 100 end
	end
	TextPrintString(classEditor[cl][1].."\n\nCount: "..aeds,0,1)
	if showText then
	  TextPrintString("[~LOOK_BACK~ Exit to Add-On Menu]\n[Navigate: ~dleft~ or ~dright~]",0,2)
    end
	Wait(0)
  until IsButtonBeingReleased(14,0)
  SoundPlay2D("WrongBtn")
  Wait(100)
end

function GetMissionScript()
  for m = 1,66 do
    if MissionActiveSpecific(cvs[m][1]) then
	  return cvs[m][1]
	end
  end
end

function GetShoots()
  if autoShot == 1 then
    return "Enable"
  else
    return "Disable"
  end
end

function GetControl()
  if playerControl then
    return "ENABLE"
  else
    return "DISABLE"
  end
end

function ExclusiveShopItem() -- Crash
  while true do
    if shared.playerShopping then
      ShopAddItem(POINTLIST._STORE_DT_GENERAL_ITEM1,320)
      ShopAddItem(POINTLIST._STORE_DT_GENERAL_ITEM2,409)
      ShopAddItem(POINTLIST._STORE_DT_GENERAL_ITEM3,404)
      ShopAddItem(POINTLIST._STORE_DT_GENERAL_ITEM4,396)
	end
    Wait(0)
  end
  --ShopSetShopKeepInfo(POINTLIST._STORE_DT_GENERAL_CLERK,true/false)
  --ShopAddItem(POINTLIST._STORE_DT_GENERAL_ITEM1,itemindex)
  --ShopAddItem(POINTLIST._STORE_DT_GENERAL_ITEM2,itemindex)
  --ShopAddItem(POINTLIST._STORE_DT_GENERAL_ITEM3,itemindex)
  --ShopAddItem(POINTLIST._STORE_DT_GENERAL_ITEM4,itemindex)
  --ShopAddItem(POINTLIST._STORE_DT_GENERAL_ITEM6,itemindex)
  --ShopAddItem(POINTLIST._STORE_DT_GENERAL_ITEM7,itemindex)
end

function PlayerIsFree()
  return PedIsPlaying(gPlayer,"/Global/Player/Default_KEY",true) or PlayerIsFreeStyle()
end

function PedIsFree(ped)
  return PedIsPlaying(ped,"/Global/Player/Default_KEY",true) or PedIsFreeStyle(ped)
end

function PedIsFreeStyle(ped)
  return PedIsPlaying(ped,"/Global/Player/Default_KEY",true) or
    PedIsPlaying(ped,"/Global/"..movement2.."/Default_KEY/ExecuteNodes/Free/WalkBasic",true) or
    PedIsPlaying(ped,"/Global/"..movement2.."/Default_KEY/ExecuteNodes/Free/RunBasic",true) or
    PedIsPlaying(ped,"/Global/"..movement2.."/Default_KEY/ExecuteNodes/Free/SprintBasic",true) or
	PedIsPlaying(ped,"/Global/P_Striker_A/Default_KEY/ExecuteNodes/Free/SprintBasic",true)
end

function PlayerIsStrafing()
  return PedIsPlaying(gPlayer,"/Global/"..movement.."/Default_KEY/ExecuteNodes/LocomotionOverride/Combat/StrafeIdle",true) or
    PedIsPlaying(gPlayer,"/Global/"..movement.."/Default_KEY/ExecuteNodes/LocomotionOverride/Combat/CombatBasic",true)
end

function PlayerIsFreeStyle()
  return PedIsPlaying(gPlayer,"/Global/"..saveStyle.."/Default_KEY",true) or
    PedIsPlaying(gPlayer,"/Global/"..movement.."/Default_KEY/ExecuteNodes/Free/WalkBasic",true) or
    PedIsPlaying(gPlayer,"/Global/"..movement.."/Default_KEY/ExecuteNodes/Free/RunBasic",true) or
    PedIsPlaying(gPlayer,"/Global/"..movement.."/Default_KEY/ExecuteNodes/Free/SprintBasic",true) or
	PedIsPlaying(gPlayer,"/Global/P_Striker_A/Default_KEY/ExecuteNodes/Free/SprintBasic",true)
end

function PlayerIsStrafing()
  return PedIsPlaying(gPlayer,"/Global/"..saveStyle.."/Default_KEY/ExecuteNodes/LocomotionOverride/Combat/StrafeIdle",true) or
    PedIsPlaying(gPlayer,"/Global/"..saveStyle.."/Default_KEY/ExecuteNodes/LocomotionOverride/Combat/CombatBasic",true)
end

function GreaseMovement()
  return movement == "G_Striker_A" or movement == "G_Johnny" or movement == "G_Melee_A" or movement == "G_Grappler_A" or movement == "G_Ranged_A"
end

function GreaseMovement2()
  return movement2 == "G_Striker_A" or movement2 == "G_Johnny" or movement2 == "G_Melee_A" or movement2 == "G_Grappler_A" or movement2 == "G_Ranged_A"
end